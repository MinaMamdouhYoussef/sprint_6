
I2C_SLAVE_READ.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c94  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00001368  00000000  00000000  00000ce8  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000008b5  00000000  00000000  00002050  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 32 06 	call	0xc64	; 0xc64 <main>
  64:	0c 94 48 06 	jmp	0xc90	; 0xc90 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <I2C_voidMasterInit>:
#include "I2C_private.h"
#include "I2C_interface.h"


void I2C_voidMasterInit(void) 
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62

		Ru8_TWBR = 0x70 ;
  74:	e0 e2       	ldi	r30, 0x20	; 32
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	80 e7       	ldi	r24, 0x70	; 112
  7a:	80 83       	st	Z, r24
		CLR_BIT(Ru8_TWSR,u8_I2C_TWPS1) ;
  7c:	a1 e2       	ldi	r26, 0x21	; 33
  7e:	b0 e0       	ldi	r27, 0x00	; 0
  80:	e1 e2       	ldi	r30, 0x21	; 33
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	8d 7f       	andi	r24, 0xFD	; 253
  88:	8c 93       	st	X, r24
		CLR_BIT(Ru8_TWSR,u8_I2C_TWPS0) ;
  8a:	a1 e2       	ldi	r26, 0x21	; 33
  8c:	b0 e0       	ldi	r27, 0x00	; 0
  8e:	e1 e2       	ldi	r30, 0x21	; 33
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	80 81       	ld	r24, Z
  94:	8e 7f       	andi	r24, 0xFE	; 254
  96:	8c 93       	st	X, r24

		Ru8_TWCR = ((u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWEA)|(u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWEN)) ; 
  98:	e6 e5       	ldi	r30, 0x56	; 86
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	84 e4       	ldi	r24, 0x44	; 68
  9e:	80 83       	st	Z, r24
}
  a0:	cf 91       	pop	r28
  a2:	df 91       	pop	r29
  a4:	08 95       	ret

000000a6 <I2C_u8MasterStartReq>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//return start state if it done successfully or not 
uint8_t I2C_u8MasterStartReq(void)  
{
  a6:	df 93       	push	r29
  a8:	cf 93       	push	r28
  aa:	0f 92       	push	r0
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_StartState = u8_I2C_START_FAILED ;  
  b0:	8a e0       	ldi	r24, 0x0A	; 10
  b2:	89 83       	std	Y+1, r24	; 0x01
	/*set start condion to begin the start req., make I2C Enable, and Clear int flag 
	 *so that we can send start condition (no operation can done without clearing int flag )
	 */
	Ru8_TWCR = ((u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWSTA)|(u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWEN)|(u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWINT)
  b4:	e6 e5       	ldi	r30, 0x56	; 86
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	84 ee       	ldi	r24, 0xE4	; 228
  ba:	80 83       	st	Z, r24
				|(u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWEA)) ;

	while(GET_BIT(Ru8_TWCR,u8_I2C_TWINT) != u8_I2C_FLAG_SET) ;
  bc:	e6 e5       	ldi	r30, 0x56	; 86
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	88 1f       	adc	r24, r24
  c4:	88 27       	eor	r24, r24
  c6:	88 1f       	adc	r24, r24
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	c1 f7       	brne	.-16     	; 0xbc <I2C_u8MasterStartReq+0x16>

	if((Ru8_TWSR & u8_I2C_MASK_PRESCALE)==u8_I2C_START_SEND_SUCCESSFULLY)  //start send successfully
  cc:	e1 e2       	ldi	r30, 0x21	; 33
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	88 2f       	mov	r24, r24
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	88 7f       	andi	r24, 0xF8	; 248
  d8:	90 70       	andi	r25, 0x00	; 0
  da:	88 30       	cpi	r24, 0x08	; 8
  dc:	91 05       	cpc	r25, r1
  de:	11 f4       	brne	.+4      	; 0xe4 <I2C_u8MasterStartReq+0x3e>
	{
		u8_StartState = u8_I2C_START_DONE ;
  e0:	8b e0       	ldi	r24, 0x0B	; 11
  e2:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8_StartState ; 
  e4:	89 81       	ldd	r24, Y+1	; 0x01
}
  e6:	0f 90       	pop	r0
  e8:	cf 91       	pop	r28
  ea:	df 91       	pop	r29
  ec:	08 95       	ret

000000ee <I2C_u8MasterRepeatStart>:

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t I2C_u8MasterRepeatStart(void) 
{
  ee:	df 93       	push	r29
  f0:	cf 93       	push	r28
  f2:	0f 92       	push	r0
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_StartState = u8_I2C_START_FAILED ;
  f8:	8a e0       	ldi	r24, 0x0A	; 10
  fa:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Repeat start to the last address by clearing TWINT , make a start condition ,and make I2C enabled 
	 */
	Ru8_TWCR = ((u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWSTA)|(u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWEN)|(u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWINT)
  fc:	e6 e5       	ldi	r30, 0x56	; 86
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	84 ee       	ldi	r24, 0xE4	; 228
 102:	80 83       	st	Z, r24
			   |(u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWEA)) ;
	while(GET_BIT(Ru8_TWCR,u8_I2C_TWINT) != u8_I2C_FLAG_SET) ;
 104:	e6 e5       	ldi	r30, 0x56	; 86
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	88 1f       	adc	r24, r24
 10c:	88 27       	eor	r24, r24
 10e:	88 1f       	adc	r24, r24
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	c1 f7       	brne	.-16     	; 0x104 <I2C_u8MasterRepeatStart+0x16>
	if((Ru8_TWSR & u8_I2C_MASK_PRESCALE)==u8_I2C_REPEAT_START_SEND_SUCCESSFULLY)  //start send successfully
 114:	e1 e2       	ldi	r30, 0x21	; 33
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	88 2f       	mov	r24, r24
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	88 7f       	andi	r24, 0xF8	; 248
 120:	90 70       	andi	r25, 0x00	; 0
 122:	80 31       	cpi	r24, 0x10	; 16
 124:	91 05       	cpc	r25, r1
 126:	11 f4       	brne	.+4      	; 0x12c <I2C_u8MasterRepeatStart+0x3e>
	{
		u8_StartState = u8_I2C_START_DONE ;
 128:	8b e0       	ldi	r24, 0x0B	; 11
 12a:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8_StartState ; 
 12c:	89 81       	ldd	r24, Y+1	; 0x01
}
 12e:	0f 90       	pop	r0
 130:	cf 91       	pop	r28
 132:	df 91       	pop	r29
 134:	08 95       	ret

00000136 <I2C_voidMasterSendSLAWrite>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// master send a slave address and wanted to read from the SLA
void I2C_voidMasterSendSLAWrite(uint8_t u8_SLA)
{
 136:	df 93       	push	r29
 138:	cf 93       	push	r28
 13a:	0f 92       	push	r0
 13c:	cd b7       	in	r28, 0x3d	; 61
 13e:	de b7       	in	r29, 0x3e	; 62
 140:	89 83       	std	Y+1, r24	; 0x01
	//make TWDR set with wanted slave address and make LSB = 0 to be in write operation 
	Ru8_TWDR = (u8_SLA<<u8_I2C_TWD1)  ;
 142:	e3 e2       	ldi	r30, 0x23	; 35
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	89 81       	ldd	r24, Y+1	; 0x01
 148:	88 0f       	add	r24, r24
 14a:	80 83       	st	Z, r24
	/*make I2C Enable and Clear int flag so that we can load TWDR (no operation can done without clearing int flag) 
	 *and clear condition start bit */
	Ru8_TWCR = ((u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWEN) |(u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWINT)|(u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWEA)) ;
 14c:	e6 e5       	ldi	r30, 0x56	; 86
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	84 ec       	ldi	r24, 0xC4	; 196
 152:	80 83       	st	Z, r24
	
	// wait until the Master sends the SLA address with write operation 
	while(GET_BIT(Ru8_TWCR,u8_I2C_TWINT) != u8_I2C_FLAG_SET) ; 
 154:	e6 e5       	ldi	r30, 0x56	; 86
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	88 1f       	adc	r24, r24
 15c:	88 27       	eor	r24, r24
 15e:	88 1f       	adc	r24, r24
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	c1 f7       	brne	.-16     	; 0x154 <I2C_voidMasterSendSLAWrite+0x1e>
 164:	13 c0       	rjmp	.+38     	; 0x18c <I2C_voidMasterSendSLAWrite+0x56>
	
	// wait until Ack. is received and if Ack is not received repeat start and send address again until the Ack is received. 
	while(((Ru8_TWSR & u8_I2C_MASK_PRESCALE)!=u8_I2C_SLA_W_ACK_RECEIVED))
	{
		// master will repeat start in case ACK is not reached.  
		I2C_u8MasterRepeatStart() ;
 166:	0e 94 77 00 	call	0xee	; 0xee <I2C_u8MasterRepeatStart>
		
  	   //make TWDR set with wanted slave address and make LSB = 0 to be in write operation 
		Ru8_TWDR = (u8_SLA<<u8_I2C_SET_BIT_TO_ONE)  ;
 16a:	e3 e2       	ldi	r30, 0x23	; 35
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	89 81       	ldd	r24, Y+1	; 0x01
 170:	88 0f       	add	r24, r24
 172:	80 83       	st	Z, r24
		
	/*make I2C Enable and Clear int flag so that we can load TWDR (no operation can done without clearing int flag) 
	 *and clear condition start bit */
	 Ru8_TWCR = ((u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWEN) |(u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWINT)) ;
 174:	e6 e5       	ldi	r30, 0x56	; 86
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	84 e8       	ldi	r24, 0x84	; 132
 17a:	80 83       	st	Z, r24
	
		// wait until the Master sends the SLA address with write operation 
		while(GET_BIT(Ru8_TWCR,u8_I2C_TWINT) != u8_I2C_FLAG_SET) ;
 17c:	e6 e5       	ldi	r30, 0x56	; 86
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	88 1f       	adc	r24, r24
 184:	88 27       	eor	r24, r24
 186:	88 1f       	adc	r24, r24
 188:	81 30       	cpi	r24, 0x01	; 1
 18a:	c1 f7       	brne	.-16     	; 0x17c <I2C_voidMasterSendSLAWrite+0x46>
	
	// wait until the Master sends the SLA address with write operation 
	while(GET_BIT(Ru8_TWCR,u8_I2C_TWINT) != u8_I2C_FLAG_SET) ; 
	
	// wait until Ack. is received and if Ack is not received repeat start and send address again until the Ack is received. 
	while(((Ru8_TWSR & u8_I2C_MASK_PRESCALE)!=u8_I2C_SLA_W_ACK_RECEIVED))
 18c:	e1 e2       	ldi	r30, 0x21	; 33
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	88 2f       	mov	r24, r24
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	88 7f       	andi	r24, 0xF8	; 248
 198:	90 70       	andi	r25, 0x00	; 0
 19a:	88 31       	cpi	r24, 0x18	; 24
 19c:	91 05       	cpc	r25, r1
 19e:	19 f7       	brne	.-58     	; 0x166 <I2C_voidMasterSendSLAWrite+0x30>
	
		// wait until the Master sends the SLA address with write operation 
		while(GET_BIT(Ru8_TWCR,u8_I2C_TWINT) != u8_I2C_FLAG_SET) ;
	}

}
 1a0:	0f 90       	pop	r0
 1a2:	cf 91       	pop	r28
 1a4:	df 91       	pop	r29
 1a6:	08 95       	ret

000001a8 <I2C_voidMasterSendSLARead>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// master send a slave address and wanted to read from the SLA
void I2C_voidMasterSendSLARead(uint8_t u8_SLA)
{
 1a8:	df 93       	push	r29
 1aa:	cf 93       	push	r28
 1ac:	0f 92       	push	r0
 1ae:	cd b7       	in	r28, 0x3d	; 61
 1b0:	de b7       	in	r29, 0x3e	; 62
 1b2:	89 83       	std	Y+1, r24	; 0x01
	//make TWDR set with wanted slave address and make LSB = 1 to be in read operation 
	Ru8_TWDR = (u8_SLA<<u8_I2C_TWD1)| u8_SET_READ_MODE  ;
 1b4:	e3 e2       	ldi	r30, 0x23	; 35
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	89 81       	ldd	r24, Y+1	; 0x01
 1ba:	88 2f       	mov	r24, r24
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	81 60       	ori	r24, 0x01	; 1
 1c4:	80 83       	st	Z, r24
	
	//make I2C Enable and Clear int flag so that we can load TWDR (no operation can done without clearing int flag)
	Ru8_TWCR = ((u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWEN) |(u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWINT) |(u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWEA)) ;
 1c6:	e6 e5       	ldi	r30, 0x56	; 86
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	84 ec       	ldi	r24, 0xC4	; 196
 1cc:	80 83       	st	Z, r24
	
	// wait until the Master sends the SLA address with read operation 
	while(GET_BIT(Ru8_TWCR,u8_I2C_TWINT) != u8_I2C_FLAG_SET) ; 
 1ce:	e6 e5       	ldi	r30, 0x56	; 86
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	88 1f       	adc	r24, r24
 1d6:	88 27       	eor	r24, r24
 1d8:	88 1f       	adc	r24, r24
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	c1 f7       	brne	.-16     	; 0x1ce <I2C_voidMasterSendSLARead+0x26>
 1de:	17 c0       	rjmp	.+46     	; 0x20e <I2C_voidMasterSendSLARead+0x66>
	
	// wait until Ack. is received and if Ack is not received repeat start and send address again until the Ack is received. 
	while((Ru8_TWSR & u8_I2C_MASK_PRESCALE)!=u8_I2C_SLA_R_ACK_RECEIVED)
	{
		// master will repeat start in case ACK is not reached.  
		I2C_u8MasterRepeatStart() ; 
 1e0:	0e 94 77 00 	call	0xee	; 0xee <I2C_u8MasterRepeatStart>

		//make TWDR set with wanted slave address and make LSB = 1 to be in read operation 
		Ru8_TWDR = (u8_SLA<<u8_I2C_TWD1)| u8_SET_READ_MODE  ;
 1e4:	e3 e2       	ldi	r30, 0x23	; 35
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	89 81       	ldd	r24, Y+1	; 0x01
 1ea:	88 2f       	mov	r24, r24
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	81 60       	ori	r24, 0x01	; 1
 1f4:	80 83       	st	Z, r24
		
		//make I2C Enable and Clear int flag so that we can load TWDR (no operation can done without clearing int flag)
		Ru8_TWCR = ((u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWEN) |(u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWINT)) ; 
 1f6:	e6 e5       	ldi	r30, 0x56	; 86
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	84 e8       	ldi	r24, 0x84	; 132
 1fc:	80 83       	st	Z, r24
	
		// wait until the Master sends the SLA address with read operation 
		while(GET_BIT(Ru8_TWCR,u8_I2C_TWINT) != u8_I2C_FLAG_SET) ; 
 1fe:	e6 e5       	ldi	r30, 0x56	; 86
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	88 1f       	adc	r24, r24
 206:	88 27       	eor	r24, r24
 208:	88 1f       	adc	r24, r24
 20a:	81 30       	cpi	r24, 0x01	; 1
 20c:	c1 f7       	brne	.-16     	; 0x1fe <I2C_voidMasterSendSLARead+0x56>
	
	// wait until the Master sends the SLA address with read operation 
	while(GET_BIT(Ru8_TWCR,u8_I2C_TWINT) != u8_I2C_FLAG_SET) ; 
	
	// wait until Ack. is received and if Ack is not received repeat start and send address again until the Ack is received. 
	while((Ru8_TWSR & u8_I2C_MASK_PRESCALE)!=u8_I2C_SLA_R_ACK_RECEIVED)
 20e:	e1 e2       	ldi	r30, 0x21	; 33
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	80 81       	ld	r24, Z
 214:	88 2f       	mov	r24, r24
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	88 7f       	andi	r24, 0xF8	; 248
 21a:	90 70       	andi	r25, 0x00	; 0
 21c:	80 34       	cpi	r24, 0x40	; 64
 21e:	91 05       	cpc	r25, r1
 220:	f9 f6       	brne	.-66     	; 0x1e0 <I2C_voidMasterSendSLARead+0x38>
		Ru8_TWCR = ((u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWEN) |(u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWINT)) ; 
	
		// wait until the Master sends the SLA address with read operation 
		while(GET_BIT(Ru8_TWCR,u8_I2C_TWINT) != u8_I2C_FLAG_SET) ; 
	}
}
 222:	0f 90       	pop	r0
 224:	cf 91       	pop	r28
 226:	df 91       	pop	r29
 228:	08 95       	ret

0000022a <I2C_voidMasterWriteData>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t I2C_voidMasterWriteData(uint8_t u8_DataWantedToSend)
{
 22a:	df 93       	push	r29
 22c:	cf 93       	push	r28
 22e:	00 d0       	rcall	.+0      	; 0x230 <I2C_voidMasterWriteData+0x6>
 230:	cd b7       	in	r28, 0x3d	; 61
 232:	de b7       	in	r29, 0x3e	; 62
 234:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_ErrorState = u8_I2C_INTIAL_VAL ;
 236:	19 82       	std	Y+1, r1	; 0x01
	// put the data needed to send in the send reg. 
	Ru8_TWDR = u8_DataWantedToSend ; 
 238:	e3 e2       	ldi	r30, 0x23	; 35
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	8a 81       	ldd	r24, Y+2	; 0x02
 23e:	80 83       	st	Z, r24
	
	//make I2C Enable and Clear int flag so that we can load TWDR (no operation can done without clearing int flag)
	Ru8_TWCR = ((u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWEN) |(u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWINT)|(u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWEA)) ;
 240:	e6 e5       	ldi	r30, 0x56	; 86
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	84 ec       	ldi	r24, 0xC4	; 196
 246:	80 83       	st	Z, r24
	
	// wait until the Master sends the data send .
	while(GET_BIT(Ru8_TWCR,u8_I2C_TWINT) != u8_I2C_FLAG_SET) ; 
 248:	e6 e5       	ldi	r30, 0x56	; 86
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	88 1f       	adc	r24, r24
 250:	88 27       	eor	r24, r24
 252:	88 1f       	adc	r24, r24
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	c1 f7       	brne	.-16     	; 0x248 <I2C_voidMasterWriteData+0x1e>
	
	if((Ru8_TWSR & u8_I2C_MASK_PRESCALE)== u8_I2C_DATA_W_ACK_RECEIVED)
 258:	e1 e2       	ldi	r30, 0x21	; 33
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	88 2f       	mov	r24, r24
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	88 7f       	andi	r24, 0xF8	; 248
 264:	90 70       	andi	r25, 0x00	; 0
 266:	88 32       	cpi	r24, 0x28	; 40
 268:	91 05       	cpc	r25, r1
 26a:	19 f4       	brne	.+6      	; 0x272 <I2C_voidMasterWriteData+0x48>
	{
		u8_ErrorState = u8_SENT_DATA_DONE ;
 26c:	80 e1       	ldi	r24, 0x10	; 16
 26e:	89 83       	std	Y+1, r24	; 0x01
 270:	02 c0       	rjmp	.+4      	; 0x276 <I2C_voidMasterWriteData+0x4c>
	}
	else
	{
		u8_ErrorState = u8_SENT_DATA_FAILED ;
 272:	8f e0       	ldi	r24, 0x0F	; 15
 274:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_ErrorState ;
 276:	89 81       	ldd	r24, Y+1	; 0x01
}
 278:	0f 90       	pop	r0
 27a:	0f 90       	pop	r0
 27c:	cf 91       	pop	r28
 27e:	df 91       	pop	r29
 280:	08 95       	ret

00000282 <I2C_u8MasterReadData>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//function that read from slave and return error state if the argument is wrong
uint8_t I2C_u8MasterReadData(uint8_t* u8_ReadData,uint8_t u8_ReceiveAgain)
{
 282:	df 93       	push	r29
 284:	cf 93       	push	r28
 286:	00 d0       	rcall	.+0      	; 0x288 <I2C_u8MasterReadData+0x6>
 288:	00 d0       	rcall	.+0      	; 0x28a <I2C_u8MasterReadData+0x8>
 28a:	cd b7       	in	r28, 0x3d	; 61
 28c:	de b7       	in	r29, 0x3e	; 62
 28e:	9b 83       	std	Y+3, r25	; 0x03
 290:	8a 83       	std	Y+2, r24	; 0x02
 292:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t u8_ErrorState = u8_I2C_INTIAL_VAL ;
 294:	19 82       	std	Y+1, r1	; 0x01
	if((u8_ReceiveAgain==u8_I2C_RECEIVE_MORE_WORDS || u8_ReceiveAgain==u8_I2C_RECEIVE_COMPLETE) && u8_ReadData!=NULL_POINTER )
 296:	8c 81       	ldd	r24, Y+4	; 0x04
 298:	8b 30       	cpi	r24, 0x0B	; 11
 29a:	21 f0       	breq	.+8      	; 0x2a4 <I2C_u8MasterReadData+0x22>
 29c:	8c 81       	ldd	r24, Y+4	; 0x04
 29e:	8a 30       	cpi	r24, 0x0A	; 10
 2a0:	09 f0       	breq	.+2      	; 0x2a4 <I2C_u8MasterReadData+0x22>
 2a2:	4c c0       	rjmp	.+152    	; 0x33c <I2C_u8MasterReadData+0xba>
 2a4:	8a 81       	ldd	r24, Y+2	; 0x02
 2a6:	9b 81       	ldd	r25, Y+3	; 0x03
 2a8:	00 97       	sbiw	r24, 0x00	; 0
 2aa:	09 f4       	brne	.+2      	; 0x2ae <I2C_u8MasterReadData+0x2c>
 2ac:	47 c0       	rjmp	.+142    	; 0x33c <I2C_u8MasterReadData+0xba>
	{
		if(u8_ReceiveAgain==u8_I2C_RECEIVE_MORE_WORDS)
 2ae:	8c 81       	ldd	r24, Y+4	; 0x04
 2b0:	8b 30       	cpi	r24, 0x0B	; 11
 2b2:	11 f5       	brne	.+68     	; 0x2f8 <I2C_u8MasterReadData+0x76>
		{
			/*make I2C Enable and Clear int flag so that we can load TWDR (no operation can done without clearing int flag)
			 *and make the slave ACK when the data received*/
			Ru8_TWCR = (u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWEN) |(u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWINT)|(u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWEA) ; 
 2b4:	e6 e5       	ldi	r30, 0x56	; 86
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	84 ec       	ldi	r24, 0xC4	; 196
 2ba:	80 83       	st	Z, r24
			// wait until the Master Receive the data sent .
			while(GET_BIT(Ru8_TWCR,u8_I2C_TWINT) != u8_I2C_FLAG_SET) ; 
 2bc:	e6 e5       	ldi	r30, 0x56	; 86
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	88 1f       	adc	r24, r24
 2c4:	88 27       	eor	r24, r24
 2c6:	88 1f       	adc	r24, r24
 2c8:	81 30       	cpi	r24, 0x01	; 1
 2ca:	c1 f7       	brne	.-16     	; 0x2bc <I2C_u8MasterReadData+0x3a>

			if((Ru8_TWSR & u8_I2C_MASK_PRESCALE)== u8_I2C_DATA_R_ACK_RECEIVED_ACK_RETURN)
 2cc:	e1 e2       	ldi	r30, 0x21	; 33
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	80 81       	ld	r24, Z
 2d2:	88 2f       	mov	r24, r24
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	88 7f       	andi	r24, 0xF8	; 248
 2d8:	90 70       	andi	r25, 0x00	; 0
 2da:	80 35       	cpi	r24, 0x50	; 80
 2dc:	91 05       	cpc	r25, r1
 2de:	49 f4       	brne	.+18     	; 0x2f2 <I2C_u8MasterReadData+0x70>
			{
				u8_ErrorState =u8_I2C_READ_DONE_SUCCESSFULLY ; 
 2e0:	8c e0       	ldi	r24, 0x0C	; 12
 2e2:	89 83       	std	Y+1, r24	; 0x01
				*u8_ReadData = Ru8_TWDR ;
 2e4:	e3 e2       	ldi	r30, 0x23	; 35
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	80 81       	ld	r24, Z
 2ea:	ea 81       	ldd	r30, Y+2	; 0x02
 2ec:	fb 81       	ldd	r31, Y+3	; 0x03
 2ee:	80 83       	st	Z, r24
 2f0:	27 c0       	rjmp	.+78     	; 0x340 <I2C_u8MasterReadData+0xbe>
			}
			else 
			{
				u8_ErrorState =u8_I2C_READ_FAILED; 
 2f2:	8d e0       	ldi	r24, 0x0D	; 13
 2f4:	89 83       	std	Y+1, r24	; 0x01
 2f6:	24 c0       	rjmp	.+72     	; 0x340 <I2C_u8MasterReadData+0xbe>
			}
		}
		else 
		{
			//make I2C Enable and Clear int flag so that we can load TWDR (no operation can done without clearing int flag)
			Ru8_TWCR = (u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWEN) |(u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWINT) ; 
 2f8:	e6 e5       	ldi	r30, 0x56	; 86
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	84 e8       	ldi	r24, 0x84	; 132
 2fe:	80 83       	st	Z, r24
			while(GET_BIT(Ru8_TWCR,u8_I2C_TWINT) != u8_I2C_FLAG_SET) ; 
 300:	e6 e5       	ldi	r30, 0x56	; 86
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	80 81       	ld	r24, Z
 306:	88 1f       	adc	r24, r24
 308:	88 27       	eor	r24, r24
 30a:	88 1f       	adc	r24, r24
 30c:	81 30       	cpi	r24, 0x01	; 1
 30e:	c1 f7       	brne	.-16     	; 0x300 <I2C_u8MasterReadData+0x7e>
			if((Ru8_TWSR & u8_I2C_MASK_PRESCALE)== u8_I2C_DATA_R_ACK_RECEIVED_ACK_NOT_RETURN)
 310:	e1 e2       	ldi	r30, 0x21	; 33
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	80 81       	ld	r24, Z
 316:	88 2f       	mov	r24, r24
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	88 7f       	andi	r24, 0xF8	; 248
 31c:	90 70       	andi	r25, 0x00	; 0
 31e:	88 35       	cpi	r24, 0x58	; 88
 320:	91 05       	cpc	r25, r1
 322:	49 f4       	brne	.+18     	; 0x336 <I2C_u8MasterReadData+0xb4>
			{
				u8_ErrorState =u8_I2C_READ_DONE_SUCCESSFULLY ; 
 324:	8c e0       	ldi	r24, 0x0C	; 12
 326:	89 83       	std	Y+1, r24	; 0x01
				*u8_ReadData = Ru8_TWDR ;
 328:	e3 e2       	ldi	r30, 0x23	; 35
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	ea 81       	ldd	r30, Y+2	; 0x02
 330:	fb 81       	ldd	r31, Y+3	; 0x03
 332:	80 83       	st	Z, r24
 334:	05 c0       	rjmp	.+10     	; 0x340 <I2C_u8MasterReadData+0xbe>
			}
			else 
			{
				u8_ErrorState =u8_I2C_READ_FAILED; 
 336:	8d e0       	ldi	r24, 0x0D	; 13
 338:	89 83       	std	Y+1, r24	; 0x01
 33a:	02 c0       	rjmp	.+4      	; 0x340 <I2C_u8MasterReadData+0xbe>


	}
	else 
	{
		u8_ErrorState = u8_I2C_ARG_ERROR ; 
 33c:	8e e0       	ldi	r24, 0x0E	; 14
 33e:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_ErrorState ;
 340:	89 81       	ldd	r24, Y+1	; 0x01
}
 342:	0f 90       	pop	r0
 344:	0f 90       	pop	r0
 346:	0f 90       	pop	r0
 348:	0f 90       	pop	r0
 34a:	cf 91       	pop	r28
 34c:	df 91       	pop	r29
 34e:	08 95       	ret

00000350 <I2C_voidMasterStop>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void I2C_voidMasterStop(void)
{	
 350:	df 93       	push	r29
 352:	cf 93       	push	r28
 354:	cd b7       	in	r28, 0x3d	; 61
 356:	de b7       	in	r29, 0x3e	; 62
	/*make I2C Enable and Clear int flag so that we can load TWDR (no operation can done without clearing int flag)
	 * and set condion stop bit to stop sending */
	Ru8_TWCR = (u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWEN) |(u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWINT) | (u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWSTO) ; 	
 358:	e6 e5       	ldi	r30, 0x56	; 86
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	84 e9       	ldi	r24, 0x94	; 148
 35e:	80 83       	st	Z, r24
}
 360:	cf 91       	pop	r28
 362:	df 91       	pop	r29
 364:	08 95       	ret

00000366 <I2C_voidSlaveInit>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void I2C_voidSlaveInit(uint8_t u8_SlaveAddress)
{
 366:	df 93       	push	r29
 368:	cf 93       	push	r28
 36a:	0f 92       	push	r0
 36c:	cd b7       	in	r28, 0x3d	; 61
 36e:	de b7       	in	r29, 0x3e	; 62
 370:	89 83       	std	Y+1, r24	; 0x01
	// make general call off and set slave address to intiate the slave mode of I2C
	Ru8_TWAR = u8_SlaveAddress << u8_I2C_TWA0 ;
 372:	e2 e2       	ldi	r30, 0x22	; 34
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	89 81       	ldd	r24, Y+1	; 0x01
 378:	88 0f       	add	r24, r24
 37a:	80 83       	st	Z, r24
	// initialize tWCR by setting TWEN to 1 to ENABLE the two wire interface and setting TWEA to 1 to Enable the slave to receive ack.
	Ru8_TWCR = ((u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWEN) |(u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWEA)) ;
 37c:	e6 e5       	ldi	r30, 0x56	; 86
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	84 e4       	ldi	r24, 0x44	; 68
 382:	80 83       	st	Z, r24
}
 384:	0f 90       	pop	r0
 386:	cf 91       	pop	r28
 388:	df 91       	pop	r29
 38a:	08 95       	ret

0000038c <I2C_slaveReadAckReturned>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //
uint8_t I2C_slaveReadAckReturned(void)
{
 38c:	df 93       	push	r29
 38e:	cf 93       	push	r28
 390:	cd b7       	in	r28, 0x3d	; 61
 392:	de b7       	in	r29, 0x3e	; 62
	//set ack. , clear TWINT to wait the new actio and make the I2C enabled
	Ru8_TWCR = ((u8_I2C_SET_BIT_TO_ONE << u8_I2C_TWINT) | (u8_I2C_SET_BIT_TO_ONE<< u8_I2C_TWEA) | (u8_I2C_SET_BIT_TO_ONE << u8_I2C_TWEN));
 394:	e6 e5       	ldi	r30, 0x56	; 86
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	84 ec       	ldi	r24, 0xC4	; 196
 39a:	80 83       	st	Z, r24
	//wait until data received
	while(GET_BIT(Ru8_TWCR,u8_I2C_TWINT) != u8_I2C_FLAG_SET);
 39c:	e6 e5       	ldi	r30, 0x56	; 86
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	80 81       	ld	r24, Z
 3a2:	88 1f       	adc	r24, r24
 3a4:	88 27       	eor	r24, r24
 3a6:	88 1f       	adc	r24, r24
 3a8:	81 30       	cpi	r24, 0x01	; 1
 3aa:	c1 f7       	brne	.-16     	; 0x39c <I2C_slaveReadAckReturned+0x10>
	//return the data received
	return Ru8_TWDR;
 3ac:	e3 e2       	ldi	r30, 0x23	; 35
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	80 81       	ld	r24, Z
}
 3b2:	cf 91       	pop	r28
 3b4:	df 91       	pop	r29
 3b6:	08 95       	ret

000003b8 <I2C_slaveAckRead>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void I2C_slaveAckRead(void)
{
 3b8:	df 93       	push	r29
 3ba:	cf 93       	push	r28
 3bc:	cd b7       	in	r28, 0x3d	; 61
 3be:	de b7       	in	r29, 0x3e	; 62
	//wait until the SLW+W received by slave
	while((Ru8_TWSR & 0xF8) != u8_I2C_SLAVE_ADDRESS_CALLED_SLAW) ;
 3c0:	e1 e2       	ldi	r30, 0x21	; 33
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	80 81       	ld	r24, Z
 3c6:	88 2f       	mov	r24, r24
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	88 7f       	andi	r24, 0xF8	; 248
 3cc:	90 70       	andi	r25, 0x00	; 0
 3ce:	80 36       	cpi	r24, 0x60	; 96
 3d0:	91 05       	cpc	r25, r1
 3d2:	b1 f7       	brne	.-20     	; 0x3c0 <I2C_slaveAckRead+0x8>
	//set ack. , clear TWINT to wait the new action and make the I2C enabled
	Ru8_TWCR = ((u8_I2C_SET_BIT_TO_ONE << u8_I2C_TWINT) | (u8_I2C_SET_BIT_TO_ONE<< u8_I2C_TWEA) | (u8_I2C_SET_BIT_TO_ONE << u8_I2C_TWEN));
 3d4:	e6 e5       	ldi	r30, 0x56	; 86
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
 3d8:	84 ec       	ldi	r24, 0xC4	; 196
 3da:	80 83       	st	Z, r24
	//wait until master receive the ACK.
	while  (GET_BIT(Ru8_TWCR,u8_I2C_TWINT) != u8_I2C_FLAG_SET);
 3dc:	e6 e5       	ldi	r30, 0x56	; 86
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	80 81       	ld	r24, Z
 3e2:	88 1f       	adc	r24, r24
 3e4:	88 27       	eor	r24, r24
 3e6:	88 1f       	adc	r24, r24
 3e8:	81 30       	cpi	r24, 0x01	; 1
 3ea:	c1 f7       	brne	.-16     	; 0x3dc <I2C_slaveAckRead+0x24>

}
 3ec:	cf 91       	pop	r28
 3ee:	df 91       	pop	r29
 3f0:	08 95       	ret

000003f2 <DIO_u8SetPinVal>:
#include "dio_interface.h"
#include "dio_private.h"


uint8_t DIO_u8SetPinVal(uint8_t u8_PortNum,uint8_t u8_PinNum,uint8_t u8_PinState)     
{
 3f2:	df 93       	push	r29
 3f4:	cf 93       	push	r28
 3f6:	00 d0       	rcall	.+0      	; 0x3f8 <DIO_u8SetPinVal+0x6>
 3f8:	00 d0       	rcall	.+0      	; 0x3fa <DIO_u8SetPinVal+0x8>
 3fa:	00 d0       	rcall	.+0      	; 0x3fc <DIO_u8SetPinVal+0xa>
 3fc:	cd b7       	in	r28, 0x3d	; 61
 3fe:	de b7       	in	r29, 0x3e	; 62
 400:	8a 83       	std	Y+2, r24	; 0x02
 402:	6b 83       	std	Y+3, r22	; 0x03
 404:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t u8_ErrorState = u8_DIO_OK;
 406:	82 e0       	ldi	r24, 0x02	; 2
 408:	89 83       	std	Y+1, r24	; 0x01
	if(u8_PinNum>=u8_DIO_PIN0 && u8_PinNum<=u8_DIO_PIN7)
 40a:	8b 81       	ldd	r24, Y+3	; 0x03
 40c:	88 30       	cpi	r24, 0x08	; 8
 40e:	08 f0       	brcs	.+2      	; 0x412 <DIO_u8SetPinVal+0x20>
 410:	ee c0       	rjmp	.+476    	; 0x5ee <DIO_u8SetPinVal+0x1fc>
	{
		switch(u8_PortNum)
 412:	8a 81       	ldd	r24, Y+2	; 0x02
 414:	28 2f       	mov	r18, r24
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	3e 83       	std	Y+6, r19	; 0x06
 41a:	2d 83       	std	Y+5, r18	; 0x05
 41c:	8d 81       	ldd	r24, Y+5	; 0x05
 41e:	9e 81       	ldd	r25, Y+6	; 0x06
 420:	89 30       	cpi	r24, 0x09	; 9
 422:	91 05       	cpc	r25, r1
 424:	09 f4       	brne	.+2      	; 0x428 <DIO_u8SetPinVal+0x36>
 426:	4a c0       	rjmp	.+148    	; 0x4bc <DIO_u8SetPinVal+0xca>
 428:	2d 81       	ldd	r18, Y+5	; 0x05
 42a:	3e 81       	ldd	r19, Y+6	; 0x06
 42c:	2a 30       	cpi	r18, 0x0A	; 10
 42e:	31 05       	cpc	r19, r1
 430:	34 f4       	brge	.+12     	; 0x43e <DIO_u8SetPinVal+0x4c>
 432:	8d 81       	ldd	r24, Y+5	; 0x05
 434:	9e 81       	ldd	r25, Y+6	; 0x06
 436:	88 30       	cpi	r24, 0x08	; 8
 438:	91 05       	cpc	r25, r1
 43a:	71 f0       	breq	.+28     	; 0x458 <DIO_u8SetPinVal+0x66>
 43c:	d5 c0       	rjmp	.+426    	; 0x5e8 <DIO_u8SetPinVal+0x1f6>
 43e:	2d 81       	ldd	r18, Y+5	; 0x05
 440:	3e 81       	ldd	r19, Y+6	; 0x06
 442:	2a 30       	cpi	r18, 0x0A	; 10
 444:	31 05       	cpc	r19, r1
 446:	09 f4       	brne	.+2      	; 0x44a <DIO_u8SetPinVal+0x58>
 448:	6b c0       	rjmp	.+214    	; 0x520 <DIO_u8SetPinVal+0x12e>
 44a:	8d 81       	ldd	r24, Y+5	; 0x05
 44c:	9e 81       	ldd	r25, Y+6	; 0x06
 44e:	8b 30       	cpi	r24, 0x0B	; 11
 450:	91 05       	cpc	r25, r1
 452:	09 f4       	brne	.+2      	; 0x456 <DIO_u8SetPinVal+0x64>
 454:	97 c0       	rjmp	.+302    	; 0x584 <DIO_u8SetPinVal+0x192>
 456:	c8 c0       	rjmp	.+400    	; 0x5e8 <DIO_u8SetPinVal+0x1f6>
		{
			case u8_DIO_PORTA: if(u8_PinState == u8_DIO_PIN_LOW)
 458:	8c 81       	ldd	r24, Y+4	; 0x04
 45a:	88 23       	and	r24, r24
 45c:	a9 f4       	brne	.+42     	; 0x488 <DIO_u8SetPinVal+0x96>
								{
									CLR_BIT(Ru8_PORTA,u8_PinNum) ;
 45e:	ab e3       	ldi	r26, 0x3B	; 59
 460:	b0 e0       	ldi	r27, 0x00	; 0
 462:	eb e3       	ldi	r30, 0x3B	; 59
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	80 81       	ld	r24, Z
 468:	48 2f       	mov	r20, r24
 46a:	8b 81       	ldd	r24, Y+3	; 0x03
 46c:	28 2f       	mov	r18, r24
 46e:	30 e0       	ldi	r19, 0x00	; 0
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	02 2e       	mov	r0, r18
 476:	02 c0       	rjmp	.+4      	; 0x47c <DIO_u8SetPinVal+0x8a>
 478:	88 0f       	add	r24, r24
 47a:	99 1f       	adc	r25, r25
 47c:	0a 94       	dec	r0
 47e:	e2 f7       	brpl	.-8      	; 0x478 <DIO_u8SetPinVal+0x86>
 480:	80 95       	com	r24
 482:	84 23       	and	r24, r20
 484:	8c 93       	st	X, r24
 486:	b5 c0       	rjmp	.+362    	; 0x5f2 <DIO_u8SetPinVal+0x200>
								}
								else if(u8_PinState == u8_DIO_PIN_HIGH)
 488:	8c 81       	ldd	r24, Y+4	; 0x04
 48a:	81 30       	cpi	r24, 0x01	; 1
 48c:	a1 f4       	brne	.+40     	; 0x4b6 <DIO_u8SetPinVal+0xc4>
								{
									SET_BIT(Ru8_PORTA,u8_PinNum) ;
 48e:	ab e3       	ldi	r26, 0x3B	; 59
 490:	b0 e0       	ldi	r27, 0x00	; 0
 492:	eb e3       	ldi	r30, 0x3B	; 59
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	80 81       	ld	r24, Z
 498:	48 2f       	mov	r20, r24
 49a:	8b 81       	ldd	r24, Y+3	; 0x03
 49c:	28 2f       	mov	r18, r24
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	02 2e       	mov	r0, r18
 4a6:	02 c0       	rjmp	.+4      	; 0x4ac <DIO_u8SetPinVal+0xba>
 4a8:	88 0f       	add	r24, r24
 4aa:	99 1f       	adc	r25, r25
 4ac:	0a 94       	dec	r0
 4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <DIO_u8SetPinVal+0xb6>
 4b0:	84 2b       	or	r24, r20
 4b2:	8c 93       	st	X, r24
 4b4:	9e c0       	rjmp	.+316    	; 0x5f2 <DIO_u8SetPinVal+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
 4b6:	83 e0       	ldi	r24, 0x03	; 3
 4b8:	89 83       	std	Y+1, r24	; 0x01
 4ba:	9b c0       	rjmp	.+310    	; 0x5f2 <DIO_u8SetPinVal+0x200>
								}

							   break;
							   
			case u8_DIO_PORTB:	if(u8_PinState == u8_DIO_PIN_LOW)
 4bc:	8c 81       	ldd	r24, Y+4	; 0x04
 4be:	88 23       	and	r24, r24
 4c0:	a9 f4       	brne	.+42     	; 0x4ec <DIO_u8SetPinVal+0xfa>
								{
									CLR_BIT(Ru8_PORTB,u8_PinNum) ;
 4c2:	a8 e3       	ldi	r26, 0x38	; 56
 4c4:	b0 e0       	ldi	r27, 0x00	; 0
 4c6:	e8 e3       	ldi	r30, 0x38	; 56
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
 4ca:	80 81       	ld	r24, Z
 4cc:	48 2f       	mov	r20, r24
 4ce:	8b 81       	ldd	r24, Y+3	; 0x03
 4d0:	28 2f       	mov	r18, r24
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	02 2e       	mov	r0, r18
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <DIO_u8SetPinVal+0xee>
 4dc:	88 0f       	add	r24, r24
 4de:	99 1f       	adc	r25, r25
 4e0:	0a 94       	dec	r0
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <DIO_u8SetPinVal+0xea>
 4e4:	80 95       	com	r24
 4e6:	84 23       	and	r24, r20
 4e8:	8c 93       	st	X, r24
 4ea:	83 c0       	rjmp	.+262    	; 0x5f2 <DIO_u8SetPinVal+0x200>
								}
								else if(u8_PinState == u8_DIO_PIN_HIGH)
 4ec:	8c 81       	ldd	r24, Y+4	; 0x04
 4ee:	81 30       	cpi	r24, 0x01	; 1
 4f0:	a1 f4       	brne	.+40     	; 0x51a <DIO_u8SetPinVal+0x128>
								{
									SET_BIT(Ru8_PORTB,u8_PinNum) ;
 4f2:	a8 e3       	ldi	r26, 0x38	; 56
 4f4:	b0 e0       	ldi	r27, 0x00	; 0
 4f6:	e8 e3       	ldi	r30, 0x38	; 56
 4f8:	f0 e0       	ldi	r31, 0x00	; 0
 4fa:	80 81       	ld	r24, Z
 4fc:	48 2f       	mov	r20, r24
 4fe:	8b 81       	ldd	r24, Y+3	; 0x03
 500:	28 2f       	mov	r18, r24
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	02 2e       	mov	r0, r18
 50a:	02 c0       	rjmp	.+4      	; 0x510 <DIO_u8SetPinVal+0x11e>
 50c:	88 0f       	add	r24, r24
 50e:	99 1f       	adc	r25, r25
 510:	0a 94       	dec	r0
 512:	e2 f7       	brpl	.-8      	; 0x50c <DIO_u8SetPinVal+0x11a>
 514:	84 2b       	or	r24, r20
 516:	8c 93       	st	X, r24
 518:	6c c0       	rjmp	.+216    	; 0x5f2 <DIO_u8SetPinVal+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
 51a:	83 e0       	ldi	r24, 0x03	; 3
 51c:	89 83       	std	Y+1, r24	; 0x01
 51e:	69 c0       	rjmp	.+210    	; 0x5f2 <DIO_u8SetPinVal+0x200>
								}
							   break;
							   
			case u8_DIO_PORTC:  if(u8_PinState == u8_DIO_PIN_LOW)
 520:	8c 81       	ldd	r24, Y+4	; 0x04
 522:	88 23       	and	r24, r24
 524:	a9 f4       	brne	.+42     	; 0x550 <DIO_u8SetPinVal+0x15e>
								{
									CLR_BIT(Ru8_PORTC,u8_PinNum) ;
 526:	a5 e3       	ldi	r26, 0x35	; 53
 528:	b0 e0       	ldi	r27, 0x00	; 0
 52a:	e5 e3       	ldi	r30, 0x35	; 53
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	80 81       	ld	r24, Z
 530:	48 2f       	mov	r20, r24
 532:	8b 81       	ldd	r24, Y+3	; 0x03
 534:	28 2f       	mov	r18, r24
 536:	30 e0       	ldi	r19, 0x00	; 0
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	02 2e       	mov	r0, r18
 53e:	02 c0       	rjmp	.+4      	; 0x544 <DIO_u8SetPinVal+0x152>
 540:	88 0f       	add	r24, r24
 542:	99 1f       	adc	r25, r25
 544:	0a 94       	dec	r0
 546:	e2 f7       	brpl	.-8      	; 0x540 <DIO_u8SetPinVal+0x14e>
 548:	80 95       	com	r24
 54a:	84 23       	and	r24, r20
 54c:	8c 93       	st	X, r24
 54e:	51 c0       	rjmp	.+162    	; 0x5f2 <DIO_u8SetPinVal+0x200>
								}
								else if(u8_PinState == u8_DIO_PIN_HIGH)
 550:	8c 81       	ldd	r24, Y+4	; 0x04
 552:	81 30       	cpi	r24, 0x01	; 1
 554:	a1 f4       	brne	.+40     	; 0x57e <DIO_u8SetPinVal+0x18c>
								{
									SET_BIT(Ru8_PORTC,u8_PinNum) ;
 556:	a5 e3       	ldi	r26, 0x35	; 53
 558:	b0 e0       	ldi	r27, 0x00	; 0
 55a:	e5 e3       	ldi	r30, 0x35	; 53
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	80 81       	ld	r24, Z
 560:	48 2f       	mov	r20, r24
 562:	8b 81       	ldd	r24, Y+3	; 0x03
 564:	28 2f       	mov	r18, r24
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	02 2e       	mov	r0, r18
 56e:	02 c0       	rjmp	.+4      	; 0x574 <DIO_u8SetPinVal+0x182>
 570:	88 0f       	add	r24, r24
 572:	99 1f       	adc	r25, r25
 574:	0a 94       	dec	r0
 576:	e2 f7       	brpl	.-8      	; 0x570 <DIO_u8SetPinVal+0x17e>
 578:	84 2b       	or	r24, r20
 57a:	8c 93       	st	X, r24
 57c:	3a c0       	rjmp	.+116    	; 0x5f2 <DIO_u8SetPinVal+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
 57e:	83 e0       	ldi	r24, 0x03	; 3
 580:	89 83       	std	Y+1, r24	; 0x01
 582:	37 c0       	rjmp	.+110    	; 0x5f2 <DIO_u8SetPinVal+0x200>
								}

								break;
								
			case u8_DIO_PORTD: if(u8_PinState == u8_DIO_PIN_LOW)
 584:	8c 81       	ldd	r24, Y+4	; 0x04
 586:	88 23       	and	r24, r24
 588:	a9 f4       	brne	.+42     	; 0x5b4 <DIO_u8SetPinVal+0x1c2>
							   {
									CLR_BIT(Ru8_PORTD,u8_PinNum) ;
 58a:	a2 e3       	ldi	r26, 0x32	; 50
 58c:	b0 e0       	ldi	r27, 0x00	; 0
 58e:	e2 e3       	ldi	r30, 0x32	; 50
 590:	f0 e0       	ldi	r31, 0x00	; 0
 592:	80 81       	ld	r24, Z
 594:	48 2f       	mov	r20, r24
 596:	8b 81       	ldd	r24, Y+3	; 0x03
 598:	28 2f       	mov	r18, r24
 59a:	30 e0       	ldi	r19, 0x00	; 0
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	02 2e       	mov	r0, r18
 5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <DIO_u8SetPinVal+0x1b6>
 5a4:	88 0f       	add	r24, r24
 5a6:	99 1f       	adc	r25, r25
 5a8:	0a 94       	dec	r0
 5aa:	e2 f7       	brpl	.-8      	; 0x5a4 <DIO_u8SetPinVal+0x1b2>
 5ac:	80 95       	com	r24
 5ae:	84 23       	and	r24, r20
 5b0:	8c 93       	st	X, r24
 5b2:	1f c0       	rjmp	.+62     	; 0x5f2 <DIO_u8SetPinVal+0x200>
							   }
							   else if(u8_PinState == u8_DIO_PIN_HIGH)
 5b4:	8c 81       	ldd	r24, Y+4	; 0x04
 5b6:	81 30       	cpi	r24, 0x01	; 1
 5b8:	a1 f4       	brne	.+40     	; 0x5e2 <DIO_u8SetPinVal+0x1f0>
							   {
									SET_BIT(Ru8_PORTD,u8_PinNum) ;
 5ba:	a2 e3       	ldi	r26, 0x32	; 50
 5bc:	b0 e0       	ldi	r27, 0x00	; 0
 5be:	e2 e3       	ldi	r30, 0x32	; 50
 5c0:	f0 e0       	ldi	r31, 0x00	; 0
 5c2:	80 81       	ld	r24, Z
 5c4:	48 2f       	mov	r20, r24
 5c6:	8b 81       	ldd	r24, Y+3	; 0x03
 5c8:	28 2f       	mov	r18, r24
 5ca:	30 e0       	ldi	r19, 0x00	; 0
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	02 2e       	mov	r0, r18
 5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <DIO_u8SetPinVal+0x1e6>
 5d4:	88 0f       	add	r24, r24
 5d6:	99 1f       	adc	r25, r25
 5d8:	0a 94       	dec	r0
 5da:	e2 f7       	brpl	.-8      	; 0x5d4 <DIO_u8SetPinVal+0x1e2>
 5dc:	84 2b       	or	r24, r20
 5de:	8c 93       	st	X, r24
 5e0:	08 c0       	rjmp	.+16     	; 0x5f2 <DIO_u8SetPinVal+0x200>
							   }
							   else 
							   {
									u8_ErrorState = u8_DIO_NOK ; 
 5e2:	83 e0       	ldi	r24, 0x03	; 3
 5e4:	89 83       	std	Y+1, r24	; 0x01
 5e6:	05 c0       	rjmp	.+10     	; 0x5f2 <DIO_u8SetPinVal+0x200>
							   }
								break;
								
			default          : u8_ErrorState = u8_DIO_NOK ; 
 5e8:	83 e0       	ldi	r24, 0x03	; 3
 5ea:	89 83       	std	Y+1, r24	; 0x01
 5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <DIO_u8SetPinVal+0x200>
								break ; 
		}
	}
	else 
	{
		u8_ErrorState = u8_DIO_NOK ; 
 5ee:	83 e0       	ldi	r24, 0x03	; 3
 5f0:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_ErrorState  ; 
 5f2:	89 81       	ldd	r24, Y+1	; 0x01
}
 5f4:	26 96       	adiw	r28, 0x06	; 6
 5f6:	0f b6       	in	r0, 0x3f	; 63
 5f8:	f8 94       	cli
 5fa:	de bf       	out	0x3e, r29	; 62
 5fc:	0f be       	out	0x3f, r0	; 63
 5fe:	cd bf       	out	0x3d, r28	; 61
 600:	cf 91       	pop	r28
 602:	df 91       	pop	r29
 604:	08 95       	ret

00000606 <DIO_u8SetPinDir>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8SetPinDir(uint8_t u8_PortNum,uint8_t u8_PinNum,uint8_t u8_PinDir)      
{
 606:	df 93       	push	r29
 608:	cf 93       	push	r28
 60a:	00 d0       	rcall	.+0      	; 0x60c <DIO_u8SetPinDir+0x6>
 60c:	00 d0       	rcall	.+0      	; 0x60e <DIO_u8SetPinDir+0x8>
 60e:	00 d0       	rcall	.+0      	; 0x610 <DIO_u8SetPinDir+0xa>
 610:	cd b7       	in	r28, 0x3d	; 61
 612:	de b7       	in	r29, 0x3e	; 62
 614:	8a 83       	std	Y+2, r24	; 0x02
 616:	6b 83       	std	Y+3, r22	; 0x03
 618:	4c 83       	std	Y+4, r20	; 0x04
	
	uint8_t u8_ErrorState = u8_DIO_OK;
 61a:	82 e0       	ldi	r24, 0x02	; 2
 61c:	89 83       	std	Y+1, r24	; 0x01
	if(u8_PinNum>=u8_DIO_PIN0 && u8_PinNum<=u8_DIO_PIN7)
 61e:	8b 81       	ldd	r24, Y+3	; 0x03
 620:	88 30       	cpi	r24, 0x08	; 8
 622:	08 f0       	brcs	.+2      	; 0x626 <DIO_u8SetPinDir+0x20>
 624:	ee c0       	rjmp	.+476    	; 0x802 <DIO_u8SetPinDir+0x1fc>
	{
		switch(u8_PortNum)
 626:	8a 81       	ldd	r24, Y+2	; 0x02
 628:	28 2f       	mov	r18, r24
 62a:	30 e0       	ldi	r19, 0x00	; 0
 62c:	3e 83       	std	Y+6, r19	; 0x06
 62e:	2d 83       	std	Y+5, r18	; 0x05
 630:	8d 81       	ldd	r24, Y+5	; 0x05
 632:	9e 81       	ldd	r25, Y+6	; 0x06
 634:	89 30       	cpi	r24, 0x09	; 9
 636:	91 05       	cpc	r25, r1
 638:	09 f4       	brne	.+2      	; 0x63c <DIO_u8SetPinDir+0x36>
 63a:	4a c0       	rjmp	.+148    	; 0x6d0 <DIO_u8SetPinDir+0xca>
 63c:	2d 81       	ldd	r18, Y+5	; 0x05
 63e:	3e 81       	ldd	r19, Y+6	; 0x06
 640:	2a 30       	cpi	r18, 0x0A	; 10
 642:	31 05       	cpc	r19, r1
 644:	34 f4       	brge	.+12     	; 0x652 <DIO_u8SetPinDir+0x4c>
 646:	8d 81       	ldd	r24, Y+5	; 0x05
 648:	9e 81       	ldd	r25, Y+6	; 0x06
 64a:	88 30       	cpi	r24, 0x08	; 8
 64c:	91 05       	cpc	r25, r1
 64e:	71 f0       	breq	.+28     	; 0x66c <DIO_u8SetPinDir+0x66>
 650:	d5 c0       	rjmp	.+426    	; 0x7fc <DIO_u8SetPinDir+0x1f6>
 652:	2d 81       	ldd	r18, Y+5	; 0x05
 654:	3e 81       	ldd	r19, Y+6	; 0x06
 656:	2a 30       	cpi	r18, 0x0A	; 10
 658:	31 05       	cpc	r19, r1
 65a:	09 f4       	brne	.+2      	; 0x65e <DIO_u8SetPinDir+0x58>
 65c:	6b c0       	rjmp	.+214    	; 0x734 <DIO_u8SetPinDir+0x12e>
 65e:	8d 81       	ldd	r24, Y+5	; 0x05
 660:	9e 81       	ldd	r25, Y+6	; 0x06
 662:	8b 30       	cpi	r24, 0x0B	; 11
 664:	91 05       	cpc	r25, r1
 666:	09 f4       	brne	.+2      	; 0x66a <DIO_u8SetPinDir+0x64>
 668:	97 c0       	rjmp	.+302    	; 0x798 <DIO_u8SetPinDir+0x192>
 66a:	c8 c0       	rjmp	.+400    	; 0x7fc <DIO_u8SetPinDir+0x1f6>
		{
			case u8_DIO_PORTA: if(u8_PinDir ==u8_DIO_OUTPUT_PIN)
 66c:	8c 81       	ldd	r24, Y+4	; 0x04
 66e:	81 30       	cpi	r24, 0x01	; 1
 670:	a1 f4       	brne	.+40     	; 0x69a <DIO_u8SetPinDir+0x94>
							   {
									SET_BIT(Ru8_DDRA,u8_PinNum) ;
 672:	aa e3       	ldi	r26, 0x3A	; 58
 674:	b0 e0       	ldi	r27, 0x00	; 0
 676:	ea e3       	ldi	r30, 0x3A	; 58
 678:	f0 e0       	ldi	r31, 0x00	; 0
 67a:	80 81       	ld	r24, Z
 67c:	48 2f       	mov	r20, r24
 67e:	8b 81       	ldd	r24, Y+3	; 0x03
 680:	28 2f       	mov	r18, r24
 682:	30 e0       	ldi	r19, 0x00	; 0
 684:	81 e0       	ldi	r24, 0x01	; 1
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	02 2e       	mov	r0, r18
 68a:	02 c0       	rjmp	.+4      	; 0x690 <DIO_u8SetPinDir+0x8a>
 68c:	88 0f       	add	r24, r24
 68e:	99 1f       	adc	r25, r25
 690:	0a 94       	dec	r0
 692:	e2 f7       	brpl	.-8      	; 0x68c <DIO_u8SetPinDir+0x86>
 694:	84 2b       	or	r24, r20
 696:	8c 93       	st	X, r24
 698:	b6 c0       	rjmp	.+364    	; 0x806 <DIO_u8SetPinDir+0x200>
							   }
							   else if(u8_PinDir ==u8_DIO_INPUT_PIN)
 69a:	8c 81       	ldd	r24, Y+4	; 0x04
 69c:	88 23       	and	r24, r24
 69e:	a9 f4       	brne	.+42     	; 0x6ca <DIO_u8SetPinDir+0xc4>
							   {
									CLR_BIT(Ru8_DDRA,u8_PinNum) ;
 6a0:	aa e3       	ldi	r26, 0x3A	; 58
 6a2:	b0 e0       	ldi	r27, 0x00	; 0
 6a4:	ea e3       	ldi	r30, 0x3A	; 58
 6a6:	f0 e0       	ldi	r31, 0x00	; 0
 6a8:	80 81       	ld	r24, Z
 6aa:	48 2f       	mov	r20, r24
 6ac:	8b 81       	ldd	r24, Y+3	; 0x03
 6ae:	28 2f       	mov	r18, r24
 6b0:	30 e0       	ldi	r19, 0x00	; 0
 6b2:	81 e0       	ldi	r24, 0x01	; 1
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	02 2e       	mov	r0, r18
 6b8:	02 c0       	rjmp	.+4      	; 0x6be <DIO_u8SetPinDir+0xb8>
 6ba:	88 0f       	add	r24, r24
 6bc:	99 1f       	adc	r25, r25
 6be:	0a 94       	dec	r0
 6c0:	e2 f7       	brpl	.-8      	; 0x6ba <DIO_u8SetPinDir+0xb4>
 6c2:	80 95       	com	r24
 6c4:	84 23       	and	r24, r20
 6c6:	8c 93       	st	X, r24
 6c8:	9e c0       	rjmp	.+316    	; 0x806 <DIO_u8SetPinDir+0x200>
							   }
							   else 
							   {
									u8_ErrorState = u8_DIO_NOK ; 
 6ca:	83 e0       	ldi	r24, 0x03	; 3
 6cc:	89 83       	std	Y+1, r24	; 0x01
 6ce:	9b c0       	rjmp	.+310    	; 0x806 <DIO_u8SetPinDir+0x200>
							   }
							   break;
	
			case u8_DIO_PORTB: if(u8_PinDir ==u8_DIO_OUTPUT_PIN)
 6d0:	8c 81       	ldd	r24, Y+4	; 0x04
 6d2:	81 30       	cpi	r24, 0x01	; 1
 6d4:	a1 f4       	brne	.+40     	; 0x6fe <DIO_u8SetPinDir+0xf8>
							   {
									SET_BIT(Ru8_DDRB,u8_PinNum) ;
 6d6:	a7 e3       	ldi	r26, 0x37	; 55
 6d8:	b0 e0       	ldi	r27, 0x00	; 0
 6da:	e7 e3       	ldi	r30, 0x37	; 55
 6dc:	f0 e0       	ldi	r31, 0x00	; 0
 6de:	80 81       	ld	r24, Z
 6e0:	48 2f       	mov	r20, r24
 6e2:	8b 81       	ldd	r24, Y+3	; 0x03
 6e4:	28 2f       	mov	r18, r24
 6e6:	30 e0       	ldi	r19, 0x00	; 0
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	02 2e       	mov	r0, r18
 6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <DIO_u8SetPinDir+0xee>
 6f0:	88 0f       	add	r24, r24
 6f2:	99 1f       	adc	r25, r25
 6f4:	0a 94       	dec	r0
 6f6:	e2 f7       	brpl	.-8      	; 0x6f0 <DIO_u8SetPinDir+0xea>
 6f8:	84 2b       	or	r24, r20
 6fa:	8c 93       	st	X, r24
 6fc:	84 c0       	rjmp	.+264    	; 0x806 <DIO_u8SetPinDir+0x200>
							   }
							   else if(u8_PinDir ==u8_DIO_INPUT_PIN)
 6fe:	8c 81       	ldd	r24, Y+4	; 0x04
 700:	88 23       	and	r24, r24
 702:	a9 f4       	brne	.+42     	; 0x72e <DIO_u8SetPinDir+0x128>
							   {
									CLR_BIT(Ru8_DDRB,u8_PinNum) ;
 704:	a7 e3       	ldi	r26, 0x37	; 55
 706:	b0 e0       	ldi	r27, 0x00	; 0
 708:	e7 e3       	ldi	r30, 0x37	; 55
 70a:	f0 e0       	ldi	r31, 0x00	; 0
 70c:	80 81       	ld	r24, Z
 70e:	48 2f       	mov	r20, r24
 710:	8b 81       	ldd	r24, Y+3	; 0x03
 712:	28 2f       	mov	r18, r24
 714:	30 e0       	ldi	r19, 0x00	; 0
 716:	81 e0       	ldi	r24, 0x01	; 1
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	02 2e       	mov	r0, r18
 71c:	02 c0       	rjmp	.+4      	; 0x722 <DIO_u8SetPinDir+0x11c>
 71e:	88 0f       	add	r24, r24
 720:	99 1f       	adc	r25, r25
 722:	0a 94       	dec	r0
 724:	e2 f7       	brpl	.-8      	; 0x71e <DIO_u8SetPinDir+0x118>
 726:	80 95       	com	r24
 728:	84 23       	and	r24, r20
 72a:	8c 93       	st	X, r24
 72c:	6c c0       	rjmp	.+216    	; 0x806 <DIO_u8SetPinDir+0x200>
							   }
							   else 
							   {
									u8_ErrorState = u8_DIO_NOK ; 
 72e:	83 e0       	ldi	r24, 0x03	; 3
 730:	89 83       	std	Y+1, r24	; 0x01
 732:	69 c0       	rjmp	.+210    	; 0x806 <DIO_u8SetPinDir+0x200>
							   }
							   break;
							   
			case u8_DIO_PORTC:  if(u8_PinDir ==u8_DIO_OUTPUT_PIN)
 734:	8c 81       	ldd	r24, Y+4	; 0x04
 736:	81 30       	cpi	r24, 0x01	; 1
 738:	a1 f4       	brne	.+40     	; 0x762 <DIO_u8SetPinDir+0x15c>
							    {
									SET_BIT(Ru8_DDRC,u8_PinNum) ;
 73a:	a4 e3       	ldi	r26, 0x34	; 52
 73c:	b0 e0       	ldi	r27, 0x00	; 0
 73e:	e4 e3       	ldi	r30, 0x34	; 52
 740:	f0 e0       	ldi	r31, 0x00	; 0
 742:	80 81       	ld	r24, Z
 744:	48 2f       	mov	r20, r24
 746:	8b 81       	ldd	r24, Y+3	; 0x03
 748:	28 2f       	mov	r18, r24
 74a:	30 e0       	ldi	r19, 0x00	; 0
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	02 2e       	mov	r0, r18
 752:	02 c0       	rjmp	.+4      	; 0x758 <DIO_u8SetPinDir+0x152>
 754:	88 0f       	add	r24, r24
 756:	99 1f       	adc	r25, r25
 758:	0a 94       	dec	r0
 75a:	e2 f7       	brpl	.-8      	; 0x754 <DIO_u8SetPinDir+0x14e>
 75c:	84 2b       	or	r24, r20
 75e:	8c 93       	st	X, r24
 760:	52 c0       	rjmp	.+164    	; 0x806 <DIO_u8SetPinDir+0x200>
								}
								else if(u8_PinDir ==u8_DIO_INPUT_PIN)
 762:	8c 81       	ldd	r24, Y+4	; 0x04
 764:	88 23       	and	r24, r24
 766:	a9 f4       	brne	.+42     	; 0x792 <DIO_u8SetPinDir+0x18c>
								{
									CLR_BIT(Ru8_DDRC,u8_PinNum) ;
 768:	a4 e3       	ldi	r26, 0x34	; 52
 76a:	b0 e0       	ldi	r27, 0x00	; 0
 76c:	e4 e3       	ldi	r30, 0x34	; 52
 76e:	f0 e0       	ldi	r31, 0x00	; 0
 770:	80 81       	ld	r24, Z
 772:	48 2f       	mov	r20, r24
 774:	8b 81       	ldd	r24, Y+3	; 0x03
 776:	28 2f       	mov	r18, r24
 778:	30 e0       	ldi	r19, 0x00	; 0
 77a:	81 e0       	ldi	r24, 0x01	; 1
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	02 2e       	mov	r0, r18
 780:	02 c0       	rjmp	.+4      	; 0x786 <DIO_u8SetPinDir+0x180>
 782:	88 0f       	add	r24, r24
 784:	99 1f       	adc	r25, r25
 786:	0a 94       	dec	r0
 788:	e2 f7       	brpl	.-8      	; 0x782 <DIO_u8SetPinDir+0x17c>
 78a:	80 95       	com	r24
 78c:	84 23       	and	r24, r20
 78e:	8c 93       	st	X, r24
 790:	3a c0       	rjmp	.+116    	; 0x806 <DIO_u8SetPinDir+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
 792:	83 e0       	ldi	r24, 0x03	; 3
 794:	89 83       	std	Y+1, r24	; 0x01
 796:	37 c0       	rjmp	.+110    	; 0x806 <DIO_u8SetPinDir+0x200>
								}
								break;
		
			case u8_DIO_PORTD: if(u8_PinDir ==u8_DIO_OUTPUT_PIN)
 798:	8c 81       	ldd	r24, Y+4	; 0x04
 79a:	81 30       	cpi	r24, 0x01	; 1
 79c:	a1 f4       	brne	.+40     	; 0x7c6 <DIO_u8SetPinDir+0x1c0>
							    {
									SET_BIT(Ru8_DDRD,u8_PinNum) ;
 79e:	a1 e3       	ldi	r26, 0x31	; 49
 7a0:	b0 e0       	ldi	r27, 0x00	; 0
 7a2:	e1 e3       	ldi	r30, 0x31	; 49
 7a4:	f0 e0       	ldi	r31, 0x00	; 0
 7a6:	80 81       	ld	r24, Z
 7a8:	48 2f       	mov	r20, r24
 7aa:	8b 81       	ldd	r24, Y+3	; 0x03
 7ac:	28 2f       	mov	r18, r24
 7ae:	30 e0       	ldi	r19, 0x00	; 0
 7b0:	81 e0       	ldi	r24, 0x01	; 1
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	02 2e       	mov	r0, r18
 7b6:	02 c0       	rjmp	.+4      	; 0x7bc <DIO_u8SetPinDir+0x1b6>
 7b8:	88 0f       	add	r24, r24
 7ba:	99 1f       	adc	r25, r25
 7bc:	0a 94       	dec	r0
 7be:	e2 f7       	brpl	.-8      	; 0x7b8 <DIO_u8SetPinDir+0x1b2>
 7c0:	84 2b       	or	r24, r20
 7c2:	8c 93       	st	X, r24
 7c4:	20 c0       	rjmp	.+64     	; 0x806 <DIO_u8SetPinDir+0x200>
								}
								else if(u8_PinDir ==u8_DIO_INPUT_PIN)
 7c6:	8c 81       	ldd	r24, Y+4	; 0x04
 7c8:	88 23       	and	r24, r24
 7ca:	a9 f4       	brne	.+42     	; 0x7f6 <DIO_u8SetPinDir+0x1f0>
								{
									CLR_BIT(Ru8_DDRD,u8_PinNum) ;
 7cc:	a1 e3       	ldi	r26, 0x31	; 49
 7ce:	b0 e0       	ldi	r27, 0x00	; 0
 7d0:	e1 e3       	ldi	r30, 0x31	; 49
 7d2:	f0 e0       	ldi	r31, 0x00	; 0
 7d4:	80 81       	ld	r24, Z
 7d6:	48 2f       	mov	r20, r24
 7d8:	8b 81       	ldd	r24, Y+3	; 0x03
 7da:	28 2f       	mov	r18, r24
 7dc:	30 e0       	ldi	r19, 0x00	; 0
 7de:	81 e0       	ldi	r24, 0x01	; 1
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	02 2e       	mov	r0, r18
 7e4:	02 c0       	rjmp	.+4      	; 0x7ea <DIO_u8SetPinDir+0x1e4>
 7e6:	88 0f       	add	r24, r24
 7e8:	99 1f       	adc	r25, r25
 7ea:	0a 94       	dec	r0
 7ec:	e2 f7       	brpl	.-8      	; 0x7e6 <DIO_u8SetPinDir+0x1e0>
 7ee:	80 95       	com	r24
 7f0:	84 23       	and	r24, r20
 7f2:	8c 93       	st	X, r24
 7f4:	08 c0       	rjmp	.+16     	; 0x806 <DIO_u8SetPinDir+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
 7f6:	83 e0       	ldi	r24, 0x03	; 3
 7f8:	89 83       	std	Y+1, r24	; 0x01
 7fa:	05 c0       	rjmp	.+10     	; 0x806 <DIO_u8SetPinDir+0x200>
								}
								break;
			
			default          : u8_ErrorState = u8_DIO_NOK ; 
 7fc:	83 e0       	ldi	r24, 0x03	; 3
 7fe:	89 83       	std	Y+1, r24	; 0x01
 800:	02 c0       	rjmp	.+4      	; 0x806 <DIO_u8SetPinDir+0x200>
								break ; 
		}
	}
	else 
	{
		u8_ErrorState = u8_DIO_NOK ; 
 802:	83 e0       	ldi	r24, 0x03	; 3
 804:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_ErrorState  ; 
 806:	89 81       	ldd	r24, Y+1	; 0x01
}
 808:	26 96       	adiw	r28, 0x06	; 6
 80a:	0f b6       	in	r0, 0x3f	; 63
 80c:	f8 94       	cli
 80e:	de bf       	out	0x3e, r29	; 62
 810:	0f be       	out	0x3f, r0	; 63
 812:	cd bf       	out	0x3d, r28	; 61
 814:	cf 91       	pop	r28
 816:	df 91       	pop	r29
 818:	08 95       	ret

0000081a <DIO_u8SetPortVal>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8SetPortVal(uint8_t u8_PortNum,uint8_t u8_PortState)
{
 81a:	df 93       	push	r29
 81c:	cf 93       	push	r28
 81e:	00 d0       	rcall	.+0      	; 0x820 <DIO_u8SetPortVal+0x6>
 820:	00 d0       	rcall	.+0      	; 0x822 <DIO_u8SetPortVal+0x8>
 822:	0f 92       	push	r0
 824:	cd b7       	in	r28, 0x3d	; 61
 826:	de b7       	in	r29, 0x3e	; 62
 828:	8a 83       	std	Y+2, r24	; 0x02
 82a:	6b 83       	std	Y+3, r22	; 0x03
		uint8_t u8_ErrorState = u8_DIO_OK;
 82c:	82 e0       	ldi	r24, 0x02	; 2
 82e:	89 83       	std	Y+1, r24	; 0x01

		switch(u8_PortNum)
 830:	8a 81       	ldd	r24, Y+2	; 0x02
 832:	28 2f       	mov	r18, r24
 834:	30 e0       	ldi	r19, 0x00	; 0
 836:	3d 83       	std	Y+5, r19	; 0x05
 838:	2c 83       	std	Y+4, r18	; 0x04
 83a:	8c 81       	ldd	r24, Y+4	; 0x04
 83c:	9d 81       	ldd	r25, Y+5	; 0x05
 83e:	89 30       	cpi	r24, 0x09	; 9
 840:	91 05       	cpc	r25, r1
 842:	d9 f0       	breq	.+54     	; 0x87a <__stack+0x1b>
 844:	2c 81       	ldd	r18, Y+4	; 0x04
 846:	3d 81       	ldd	r19, Y+5	; 0x05
 848:	2a 30       	cpi	r18, 0x0A	; 10
 84a:	31 05       	cpc	r19, r1
 84c:	34 f4       	brge	.+12     	; 0x85a <DIO_u8SetPortVal+0x40>
 84e:	8c 81       	ldd	r24, Y+4	; 0x04
 850:	9d 81       	ldd	r25, Y+5	; 0x05
 852:	88 30       	cpi	r24, 0x08	; 8
 854:	91 05       	cpc	r25, r1
 856:	61 f0       	breq	.+24     	; 0x870 <__stack+0x11>
 858:	1f c0       	rjmp	.+62     	; 0x898 <__stack+0x39>
 85a:	2c 81       	ldd	r18, Y+4	; 0x04
 85c:	3d 81       	ldd	r19, Y+5	; 0x05
 85e:	2a 30       	cpi	r18, 0x0A	; 10
 860:	31 05       	cpc	r19, r1
 862:	81 f0       	breq	.+32     	; 0x884 <__stack+0x25>
 864:	8c 81       	ldd	r24, Y+4	; 0x04
 866:	9d 81       	ldd	r25, Y+5	; 0x05
 868:	8b 30       	cpi	r24, 0x0B	; 11
 86a:	91 05       	cpc	r25, r1
 86c:	81 f0       	breq	.+32     	; 0x88e <__stack+0x2f>
 86e:	14 c0       	rjmp	.+40     	; 0x898 <__stack+0x39>
		{
			case u8_DIO_PORTA: Ru8_PORTA = u8_PortState ;  break ;			   
 870:	eb e3       	ldi	r30, 0x3B	; 59
 872:	f0 e0       	ldi	r31, 0x00	; 0
 874:	8b 81       	ldd	r24, Y+3	; 0x03
 876:	80 83       	st	Z, r24
 878:	11 c0       	rjmp	.+34     	; 0x89c <__stack+0x3d>
			case u8_DIO_PORTB: Ru8_PORTB = u8_PortState ;  break ;	
 87a:	e8 e3       	ldi	r30, 0x38	; 56
 87c:	f0 e0       	ldi	r31, 0x00	; 0
 87e:	8b 81       	ldd	r24, Y+3	; 0x03
 880:	80 83       	st	Z, r24
 882:	0c c0       	rjmp	.+24     	; 0x89c <__stack+0x3d>
			case u8_DIO_PORTC: Ru8_PORTC = u8_PortState ;  break ;	
 884:	e5 e3       	ldi	r30, 0x35	; 53
 886:	f0 e0       	ldi	r31, 0x00	; 0
 888:	8b 81       	ldd	r24, Y+3	; 0x03
 88a:	80 83       	st	Z, r24
 88c:	07 c0       	rjmp	.+14     	; 0x89c <__stack+0x3d>
			case u8_DIO_PORTD: Ru8_PORTD = u8_PortState ;  break ;	
 88e:	e2 e3       	ldi	r30, 0x32	; 50
 890:	f0 e0       	ldi	r31, 0x00	; 0
 892:	8b 81       	ldd	r24, Y+3	; 0x03
 894:	80 83       	st	Z, r24
 896:	02 c0       	rjmp	.+4      	; 0x89c <__stack+0x3d>
			default          : u8_ErrorState = u8_DIO_NOK; break ; 
 898:	83 e0       	ldi	r24, 0x03	; 3
 89a:	89 83       	std	Y+1, r24	; 0x01
		}
		
	return u8_ErrorState  ; 
 89c:	89 81       	ldd	r24, Y+1	; 0x01
}
 89e:	0f 90       	pop	r0
 8a0:	0f 90       	pop	r0
 8a2:	0f 90       	pop	r0
 8a4:	0f 90       	pop	r0
 8a6:	0f 90       	pop	r0
 8a8:	cf 91       	pop	r28
 8aa:	df 91       	pop	r29
 8ac:	08 95       	ret

000008ae <DIO_u8SetPortDir>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8SetPortDir(uint8_t u8_PortNum,uint8_t u8_PortDir)
{
 8ae:	df 93       	push	r29
 8b0:	cf 93       	push	r28
 8b2:	00 d0       	rcall	.+0      	; 0x8b4 <DIO_u8SetPortDir+0x6>
 8b4:	00 d0       	rcall	.+0      	; 0x8b6 <DIO_u8SetPortDir+0x8>
 8b6:	0f 92       	push	r0
 8b8:	cd b7       	in	r28, 0x3d	; 61
 8ba:	de b7       	in	r29, 0x3e	; 62
 8bc:	8a 83       	std	Y+2, r24	; 0x02
 8be:	6b 83       	std	Y+3, r22	; 0x03
		uint8_t u8_ErrorState = u8_DIO_OK;
 8c0:	82 e0       	ldi	r24, 0x02	; 2
 8c2:	89 83       	std	Y+1, r24	; 0x01
		switch(u8_PortNum)
 8c4:	8a 81       	ldd	r24, Y+2	; 0x02
 8c6:	28 2f       	mov	r18, r24
 8c8:	30 e0       	ldi	r19, 0x00	; 0
 8ca:	3d 83       	std	Y+5, r19	; 0x05
 8cc:	2c 83       	std	Y+4, r18	; 0x04
 8ce:	8c 81       	ldd	r24, Y+4	; 0x04
 8d0:	9d 81       	ldd	r25, Y+5	; 0x05
 8d2:	89 30       	cpi	r24, 0x09	; 9
 8d4:	91 05       	cpc	r25, r1
 8d6:	d9 f0       	breq	.+54     	; 0x90e <DIO_u8SetPortDir+0x60>
 8d8:	2c 81       	ldd	r18, Y+4	; 0x04
 8da:	3d 81       	ldd	r19, Y+5	; 0x05
 8dc:	2a 30       	cpi	r18, 0x0A	; 10
 8de:	31 05       	cpc	r19, r1
 8e0:	34 f4       	brge	.+12     	; 0x8ee <DIO_u8SetPortDir+0x40>
 8e2:	8c 81       	ldd	r24, Y+4	; 0x04
 8e4:	9d 81       	ldd	r25, Y+5	; 0x05
 8e6:	88 30       	cpi	r24, 0x08	; 8
 8e8:	91 05       	cpc	r25, r1
 8ea:	61 f0       	breq	.+24     	; 0x904 <DIO_u8SetPortDir+0x56>
 8ec:	1f c0       	rjmp	.+62     	; 0x92c <DIO_u8SetPortDir+0x7e>
 8ee:	2c 81       	ldd	r18, Y+4	; 0x04
 8f0:	3d 81       	ldd	r19, Y+5	; 0x05
 8f2:	2a 30       	cpi	r18, 0x0A	; 10
 8f4:	31 05       	cpc	r19, r1
 8f6:	81 f0       	breq	.+32     	; 0x918 <DIO_u8SetPortDir+0x6a>
 8f8:	8c 81       	ldd	r24, Y+4	; 0x04
 8fa:	9d 81       	ldd	r25, Y+5	; 0x05
 8fc:	8b 30       	cpi	r24, 0x0B	; 11
 8fe:	91 05       	cpc	r25, r1
 900:	81 f0       	breq	.+32     	; 0x922 <DIO_u8SetPortDir+0x74>
 902:	14 c0       	rjmp	.+40     	; 0x92c <DIO_u8SetPortDir+0x7e>
		{
			case u8_DIO_PORTA: Ru8_DDRA = u8_PortDir ;     break ;			   
 904:	ea e3       	ldi	r30, 0x3A	; 58
 906:	f0 e0       	ldi	r31, 0x00	; 0
 908:	8b 81       	ldd	r24, Y+3	; 0x03
 90a:	80 83       	st	Z, r24
 90c:	11 c0       	rjmp	.+34     	; 0x930 <DIO_u8SetPortDir+0x82>
			case u8_DIO_PORTB: Ru8_DDRB = u8_PortDir ;     break ;	
 90e:	e7 e3       	ldi	r30, 0x37	; 55
 910:	f0 e0       	ldi	r31, 0x00	; 0
 912:	8b 81       	ldd	r24, Y+3	; 0x03
 914:	80 83       	st	Z, r24
 916:	0c c0       	rjmp	.+24     	; 0x930 <DIO_u8SetPortDir+0x82>
			case u8_DIO_PORTC: Ru8_DDRC = u8_PortDir ;     break ;	
 918:	e4 e3       	ldi	r30, 0x34	; 52
 91a:	f0 e0       	ldi	r31, 0x00	; 0
 91c:	8b 81       	ldd	r24, Y+3	; 0x03
 91e:	80 83       	st	Z, r24
 920:	07 c0       	rjmp	.+14     	; 0x930 <DIO_u8SetPortDir+0x82>
			case u8_DIO_PORTD: Ru8_DDRD = u8_PortDir ;     break ;	
 922:	e1 e3       	ldi	r30, 0x31	; 49
 924:	f0 e0       	ldi	r31, 0x00	; 0
 926:	8b 81       	ldd	r24, Y+3	; 0x03
 928:	80 83       	st	Z, r24
 92a:	02 c0       	rjmp	.+4      	; 0x930 <DIO_u8SetPortDir+0x82>
			default          : u8_ErrorState = u8_DIO_NOK; break ; 
 92c:	83 e0       	ldi	r24, 0x03	; 3
 92e:	89 83       	std	Y+1, r24	; 0x01
		}
		
	return u8_ErrorState  ; 
 930:	89 81       	ldd	r24, Y+1	; 0x01
}
 932:	0f 90       	pop	r0
 934:	0f 90       	pop	r0
 936:	0f 90       	pop	r0
 938:	0f 90       	pop	r0
 93a:	0f 90       	pop	r0
 93c:	cf 91       	pop	r28
 93e:	df 91       	pop	r29
 940:	08 95       	ret

00000942 <DIO_u8GetPinVal>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8GetPinVal(uint8_t u8_PortNum,uint8_t u8_PinNum,uint8_t* pu8_ReturnedPinVal)      
{
 942:	df 93       	push	r29
 944:	cf 93       	push	r28
 946:	cd b7       	in	r28, 0x3d	; 61
 948:	de b7       	in	r29, 0x3e	; 62
 94a:	27 97       	sbiw	r28, 0x07	; 7
 94c:	0f b6       	in	r0, 0x3f	; 63
 94e:	f8 94       	cli
 950:	de bf       	out	0x3e, r29	; 62
 952:	0f be       	out	0x3f, r0	; 63
 954:	cd bf       	out	0x3d, r28	; 61
 956:	8a 83       	std	Y+2, r24	; 0x02
 958:	6b 83       	std	Y+3, r22	; 0x03
 95a:	5d 83       	std	Y+5, r21	; 0x05
 95c:	4c 83       	std	Y+4, r20	; 0x04
		uint8_t u8_ErrorState = u8_DIO_OK;
 95e:	82 e0       	ldi	r24, 0x02	; 2
 960:	89 83       	std	Y+1, r24	; 0x01
		if(u8_PinNum>=u8_DIO_PIN0 && u8_PinNum<=u8_DIO_PIN7)
 962:	8b 81       	ldd	r24, Y+3	; 0x03
 964:	88 30       	cpi	r24, 0x08	; 8
 966:	08 f0       	brcs	.+2      	; 0x96a <DIO_u8GetPinVal+0x28>
 968:	74 c0       	rjmp	.+232    	; 0xa52 <DIO_u8GetPinVal+0x110>
		{
			switch(u8_PortNum)
 96a:	8a 81       	ldd	r24, Y+2	; 0x02
 96c:	28 2f       	mov	r18, r24
 96e:	30 e0       	ldi	r19, 0x00	; 0
 970:	3f 83       	std	Y+7, r19	; 0x07
 972:	2e 83       	std	Y+6, r18	; 0x06
 974:	4e 81       	ldd	r20, Y+6	; 0x06
 976:	5f 81       	ldd	r21, Y+7	; 0x07
 978:	49 30       	cpi	r20, 0x09	; 9
 97a:	51 05       	cpc	r21, r1
 97c:	59 f1       	breq	.+86     	; 0x9d4 <DIO_u8GetPinVal+0x92>
 97e:	8e 81       	ldd	r24, Y+6	; 0x06
 980:	9f 81       	ldd	r25, Y+7	; 0x07
 982:	8a 30       	cpi	r24, 0x0A	; 10
 984:	91 05       	cpc	r25, r1
 986:	34 f4       	brge	.+12     	; 0x994 <DIO_u8GetPinVal+0x52>
 988:	2e 81       	ldd	r18, Y+6	; 0x06
 98a:	3f 81       	ldd	r19, Y+7	; 0x07
 98c:	28 30       	cpi	r18, 0x08	; 8
 98e:	31 05       	cpc	r19, r1
 990:	69 f0       	breq	.+26     	; 0x9ac <DIO_u8GetPinVal+0x6a>
 992:	5c c0       	rjmp	.+184    	; 0xa4c <DIO_u8GetPinVal+0x10a>
 994:	4e 81       	ldd	r20, Y+6	; 0x06
 996:	5f 81       	ldd	r21, Y+7	; 0x07
 998:	4a 30       	cpi	r20, 0x0A	; 10
 99a:	51 05       	cpc	r21, r1
 99c:	79 f1       	breq	.+94     	; 0x9fc <DIO_u8GetPinVal+0xba>
 99e:	8e 81       	ldd	r24, Y+6	; 0x06
 9a0:	9f 81       	ldd	r25, Y+7	; 0x07
 9a2:	8b 30       	cpi	r24, 0x0B	; 11
 9a4:	91 05       	cpc	r25, r1
 9a6:	09 f4       	brne	.+2      	; 0x9aa <DIO_u8GetPinVal+0x68>
 9a8:	3d c0       	rjmp	.+122    	; 0xa24 <DIO_u8GetPinVal+0xe2>
 9aa:	50 c0       	rjmp	.+160    	; 0xa4c <DIO_u8GetPinVal+0x10a>
			{
				case u8_DIO_PORTA: (*pu8_ReturnedPinVal) = GET_BIT(Ru8_PINA,u8_PinNum)  ; break ;
 9ac:	e9 e3       	ldi	r30, 0x39	; 57
 9ae:	f0 e0       	ldi	r31, 0x00	; 0
 9b0:	80 81       	ld	r24, Z
 9b2:	28 2f       	mov	r18, r24
 9b4:	30 e0       	ldi	r19, 0x00	; 0
 9b6:	8b 81       	ldd	r24, Y+3	; 0x03
 9b8:	88 2f       	mov	r24, r24
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	a9 01       	movw	r20, r18
 9be:	02 c0       	rjmp	.+4      	; 0x9c4 <DIO_u8GetPinVal+0x82>
 9c0:	55 95       	asr	r21
 9c2:	47 95       	ror	r20
 9c4:	8a 95       	dec	r24
 9c6:	e2 f7       	brpl	.-8      	; 0x9c0 <DIO_u8GetPinVal+0x7e>
 9c8:	ca 01       	movw	r24, r20
 9ca:	81 70       	andi	r24, 0x01	; 1
 9cc:	ec 81       	ldd	r30, Y+4	; 0x04
 9ce:	fd 81       	ldd	r31, Y+5	; 0x05
 9d0:	80 83       	st	Z, r24
 9d2:	41 c0       	rjmp	.+130    	; 0xa56 <DIO_u8GetPinVal+0x114>
				case u8_DIO_PORTB: (*pu8_ReturnedPinVal) = GET_BIT(Ru8_PINB,u8_PinNum)  ; break ;
 9d4:	e6 e3       	ldi	r30, 0x36	; 54
 9d6:	f0 e0       	ldi	r31, 0x00	; 0
 9d8:	80 81       	ld	r24, Z
 9da:	28 2f       	mov	r18, r24
 9dc:	30 e0       	ldi	r19, 0x00	; 0
 9de:	8b 81       	ldd	r24, Y+3	; 0x03
 9e0:	88 2f       	mov	r24, r24
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	a9 01       	movw	r20, r18
 9e6:	02 c0       	rjmp	.+4      	; 0x9ec <DIO_u8GetPinVal+0xaa>
 9e8:	55 95       	asr	r21
 9ea:	47 95       	ror	r20
 9ec:	8a 95       	dec	r24
 9ee:	e2 f7       	brpl	.-8      	; 0x9e8 <DIO_u8GetPinVal+0xa6>
 9f0:	ca 01       	movw	r24, r20
 9f2:	81 70       	andi	r24, 0x01	; 1
 9f4:	ec 81       	ldd	r30, Y+4	; 0x04
 9f6:	fd 81       	ldd	r31, Y+5	; 0x05
 9f8:	80 83       	st	Z, r24
 9fa:	2d c0       	rjmp	.+90     	; 0xa56 <DIO_u8GetPinVal+0x114>
				case u8_DIO_PORTC: (*pu8_ReturnedPinVal) = GET_BIT(Ru8_PINC,u8_PinNum)  ; break ;
 9fc:	e3 e3       	ldi	r30, 0x33	; 51
 9fe:	f0 e0       	ldi	r31, 0x00	; 0
 a00:	80 81       	ld	r24, Z
 a02:	28 2f       	mov	r18, r24
 a04:	30 e0       	ldi	r19, 0x00	; 0
 a06:	8b 81       	ldd	r24, Y+3	; 0x03
 a08:	88 2f       	mov	r24, r24
 a0a:	90 e0       	ldi	r25, 0x00	; 0
 a0c:	a9 01       	movw	r20, r18
 a0e:	02 c0       	rjmp	.+4      	; 0xa14 <DIO_u8GetPinVal+0xd2>
 a10:	55 95       	asr	r21
 a12:	47 95       	ror	r20
 a14:	8a 95       	dec	r24
 a16:	e2 f7       	brpl	.-8      	; 0xa10 <DIO_u8GetPinVal+0xce>
 a18:	ca 01       	movw	r24, r20
 a1a:	81 70       	andi	r24, 0x01	; 1
 a1c:	ec 81       	ldd	r30, Y+4	; 0x04
 a1e:	fd 81       	ldd	r31, Y+5	; 0x05
 a20:	80 83       	st	Z, r24
 a22:	19 c0       	rjmp	.+50     	; 0xa56 <DIO_u8GetPinVal+0x114>
				case u8_DIO_PORTD: (*pu8_ReturnedPinVal) = GET_BIT(Ru8_PIND,u8_PinNum)  ; break ;
 a24:	e0 e3       	ldi	r30, 0x30	; 48
 a26:	f0 e0       	ldi	r31, 0x00	; 0
 a28:	80 81       	ld	r24, Z
 a2a:	28 2f       	mov	r18, r24
 a2c:	30 e0       	ldi	r19, 0x00	; 0
 a2e:	8b 81       	ldd	r24, Y+3	; 0x03
 a30:	88 2f       	mov	r24, r24
 a32:	90 e0       	ldi	r25, 0x00	; 0
 a34:	a9 01       	movw	r20, r18
 a36:	02 c0       	rjmp	.+4      	; 0xa3c <DIO_u8GetPinVal+0xfa>
 a38:	55 95       	asr	r21
 a3a:	47 95       	ror	r20
 a3c:	8a 95       	dec	r24
 a3e:	e2 f7       	brpl	.-8      	; 0xa38 <DIO_u8GetPinVal+0xf6>
 a40:	ca 01       	movw	r24, r20
 a42:	81 70       	andi	r24, 0x01	; 1
 a44:	ec 81       	ldd	r30, Y+4	; 0x04
 a46:	fd 81       	ldd	r31, Y+5	; 0x05
 a48:	80 83       	st	Z, r24
 a4a:	05 c0       	rjmp	.+10     	; 0xa56 <DIO_u8GetPinVal+0x114>
				default          : u8_ErrorState = u8_DIO_NOK; 							 break ; 
 a4c:	83 e0       	ldi	r24, 0x03	; 3
 a4e:	89 83       	std	Y+1, r24	; 0x01
 a50:	02 c0       	rjmp	.+4      	; 0xa56 <DIO_u8GetPinVal+0x114>
			}
		}
		else 
		{
			u8_ErrorState = u8_DIO_NOK;
 a52:	83 e0       	ldi	r24, 0x03	; 3
 a54:	89 83       	std	Y+1, r24	; 0x01
		}
	return u8_ErrorState  ; 
 a56:	89 81       	ldd	r24, Y+1	; 0x01
}
 a58:	27 96       	adiw	r28, 0x07	; 7
 a5a:	0f b6       	in	r0, 0x3f	; 63
 a5c:	f8 94       	cli
 a5e:	de bf       	out	0x3e, r29	; 62
 a60:	0f be       	out	0x3f, r0	; 63
 a62:	cd bf       	out	0x3d, r28	; 61
 a64:	cf 91       	pop	r28
 a66:	df 91       	pop	r29
 a68:	08 95       	ret

00000a6a <DIO_u8GetPortVal>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8GetPortVal(uint8_t u8_PortNum,uint8_t* pu8_ReturnedPortVal)           
{
 a6a:	df 93       	push	r29
 a6c:	cf 93       	push	r28
 a6e:	00 d0       	rcall	.+0      	; 0xa70 <DIO_u8GetPortVal+0x6>
 a70:	00 d0       	rcall	.+0      	; 0xa72 <DIO_u8GetPortVal+0x8>
 a72:	00 d0       	rcall	.+0      	; 0xa74 <DIO_u8GetPortVal+0xa>
 a74:	cd b7       	in	r28, 0x3d	; 61
 a76:	de b7       	in	r29, 0x3e	; 62
 a78:	8a 83       	std	Y+2, r24	; 0x02
 a7a:	7c 83       	std	Y+4, r23	; 0x04
 a7c:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8_ErrorState = u8_DIO_OK;
 a7e:	82 e0       	ldi	r24, 0x02	; 2
 a80:	89 83       	std	Y+1, r24	; 0x01

	switch(u8_PortNum)
 a82:	8a 81       	ldd	r24, Y+2	; 0x02
 a84:	28 2f       	mov	r18, r24
 a86:	30 e0       	ldi	r19, 0x00	; 0
 a88:	3e 83       	std	Y+6, r19	; 0x06
 a8a:	2d 83       	std	Y+5, r18	; 0x05
 a8c:	8d 81       	ldd	r24, Y+5	; 0x05
 a8e:	9e 81       	ldd	r25, Y+6	; 0x06
 a90:	89 30       	cpi	r24, 0x09	; 9
 a92:	91 05       	cpc	r25, r1
 a94:	e9 f0       	breq	.+58     	; 0xad0 <DIO_u8GetPortVal+0x66>
 a96:	2d 81       	ldd	r18, Y+5	; 0x05
 a98:	3e 81       	ldd	r19, Y+6	; 0x06
 a9a:	2a 30       	cpi	r18, 0x0A	; 10
 a9c:	31 05       	cpc	r19, r1
 a9e:	34 f4       	brge	.+12     	; 0xaac <DIO_u8GetPortVal+0x42>
 aa0:	8d 81       	ldd	r24, Y+5	; 0x05
 aa2:	9e 81       	ldd	r25, Y+6	; 0x06
 aa4:	88 30       	cpi	r24, 0x08	; 8
 aa6:	91 05       	cpc	r25, r1
 aa8:	61 f0       	breq	.+24     	; 0xac2 <DIO_u8GetPortVal+0x58>
 aaa:	27 c0       	rjmp	.+78     	; 0xafa <DIO_u8GetPortVal+0x90>
 aac:	2d 81       	ldd	r18, Y+5	; 0x05
 aae:	3e 81       	ldd	r19, Y+6	; 0x06
 ab0:	2a 30       	cpi	r18, 0x0A	; 10
 ab2:	31 05       	cpc	r19, r1
 ab4:	a1 f0       	breq	.+40     	; 0xade <DIO_u8GetPortVal+0x74>
 ab6:	8d 81       	ldd	r24, Y+5	; 0x05
 ab8:	9e 81       	ldd	r25, Y+6	; 0x06
 aba:	8b 30       	cpi	r24, 0x0B	; 11
 abc:	91 05       	cpc	r25, r1
 abe:	b1 f0       	breq	.+44     	; 0xaec <DIO_u8GetPortVal+0x82>
 ac0:	1c c0       	rjmp	.+56     	; 0xafa <DIO_u8GetPortVal+0x90>
	{
		case u8_DIO_PORTA: (*pu8_ReturnedPortVal) = Ru8_PINA ;  break ;
 ac2:	e9 e3       	ldi	r30, 0x39	; 57
 ac4:	f0 e0       	ldi	r31, 0x00	; 0
 ac6:	80 81       	ld	r24, Z
 ac8:	eb 81       	ldd	r30, Y+3	; 0x03
 aca:	fc 81       	ldd	r31, Y+4	; 0x04
 acc:	80 83       	st	Z, r24
 ace:	17 c0       	rjmp	.+46     	; 0xafe <DIO_u8GetPortVal+0x94>
		case u8_DIO_PORTB: (*pu8_ReturnedPortVal) = Ru8_PINB ;  break ;
 ad0:	e6 e3       	ldi	r30, 0x36	; 54
 ad2:	f0 e0       	ldi	r31, 0x00	; 0
 ad4:	80 81       	ld	r24, Z
 ad6:	eb 81       	ldd	r30, Y+3	; 0x03
 ad8:	fc 81       	ldd	r31, Y+4	; 0x04
 ada:	80 83       	st	Z, r24
 adc:	10 c0       	rjmp	.+32     	; 0xafe <DIO_u8GetPortVal+0x94>
		case u8_DIO_PORTC: (*pu8_ReturnedPortVal) = Ru8_PINC ;  break ;
 ade:	e3 e3       	ldi	r30, 0x33	; 51
 ae0:	f0 e0       	ldi	r31, 0x00	; 0
 ae2:	80 81       	ld	r24, Z
 ae4:	eb 81       	ldd	r30, Y+3	; 0x03
 ae6:	fc 81       	ldd	r31, Y+4	; 0x04
 ae8:	80 83       	st	Z, r24
 aea:	09 c0       	rjmp	.+18     	; 0xafe <DIO_u8GetPortVal+0x94>
		case u8_DIO_PORTD: (*pu8_ReturnedPortVal) = Ru8_PIND ;  break ;
 aec:	e0 e3       	ldi	r30, 0x30	; 48
 aee:	f0 e0       	ldi	r31, 0x00	; 0
 af0:	80 81       	ld	r24, Z
 af2:	eb 81       	ldd	r30, Y+3	; 0x03
 af4:	fc 81       	ldd	r31, Y+4	; 0x04
 af6:	80 83       	st	Z, r24
 af8:	02 c0       	rjmp	.+4      	; 0xafe <DIO_u8GetPortVal+0x94>
		default          :  u8_ErrorState = u8_DIO_NOK; 	    break ;
 afa:	83 e0       	ldi	r24, 0x03	; 3
 afc:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8_ErrorState  ; 
 afe:	89 81       	ldd	r24, Y+1	; 0x01
}
 b00:	26 96       	adiw	r28, 0x06	; 6
 b02:	0f b6       	in	r0, 0x3f	; 63
 b04:	f8 94       	cli
 b06:	de bf       	out	0x3e, r29	; 62
 b08:	0f be       	out	0x3f, r0	; 63
 b0a:	cd bf       	out	0x3d, r28	; 61
 b0c:	cf 91       	pop	r28
 b0e:	df 91       	pop	r29
 b10:	08 95       	ret

00000b12 <DIO_u8TogPinVal>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8TogPinVal(uint8_t u8_PortNum,uint8_t u8_PinNum)           
{
 b12:	df 93       	push	r29
 b14:	cf 93       	push	r28
 b16:	00 d0       	rcall	.+0      	; 0xb18 <DIO_u8TogPinVal+0x6>
 b18:	00 d0       	rcall	.+0      	; 0xb1a <DIO_u8TogPinVal+0x8>
 b1a:	0f 92       	push	r0
 b1c:	cd b7       	in	r28, 0x3d	; 61
 b1e:	de b7       	in	r29, 0x3e	; 62
 b20:	8a 83       	std	Y+2, r24	; 0x02
 b22:	6b 83       	std	Y+3, r22	; 0x03
		uint8_t u8_ErrorState = u8_DIO_OK;
 b24:	82 e0       	ldi	r24, 0x02	; 2
 b26:	89 83       	std	Y+1, r24	; 0x01
		if(u8_PinNum>=u8_DIO_PIN0 && u8_PinNum<=u8_DIO_PIN7)
 b28:	8b 81       	ldd	r24, Y+3	; 0x03
 b2a:	88 30       	cpi	r24, 0x08	; 8
 b2c:	08 f0       	brcs	.+2      	; 0xb30 <DIO_u8TogPinVal+0x1e>
 b2e:	73 c0       	rjmp	.+230    	; 0xc16 <DIO_u8TogPinVal+0x104>
		{
			switch(u8_PortNum)
 b30:	8a 81       	ldd	r24, Y+2	; 0x02
 b32:	28 2f       	mov	r18, r24
 b34:	30 e0       	ldi	r19, 0x00	; 0
 b36:	3d 83       	std	Y+5, r19	; 0x05
 b38:	2c 83       	std	Y+4, r18	; 0x04
 b3a:	8c 81       	ldd	r24, Y+4	; 0x04
 b3c:	9d 81       	ldd	r25, Y+5	; 0x05
 b3e:	89 30       	cpi	r24, 0x09	; 9
 b40:	91 05       	cpc	r25, r1
 b42:	51 f1       	breq	.+84     	; 0xb98 <DIO_u8TogPinVal+0x86>
 b44:	2c 81       	ldd	r18, Y+4	; 0x04
 b46:	3d 81       	ldd	r19, Y+5	; 0x05
 b48:	2a 30       	cpi	r18, 0x0A	; 10
 b4a:	31 05       	cpc	r19, r1
 b4c:	34 f4       	brge	.+12     	; 0xb5a <DIO_u8TogPinVal+0x48>
 b4e:	8c 81       	ldd	r24, Y+4	; 0x04
 b50:	9d 81       	ldd	r25, Y+5	; 0x05
 b52:	88 30       	cpi	r24, 0x08	; 8
 b54:	91 05       	cpc	r25, r1
 b56:	61 f0       	breq	.+24     	; 0xb70 <DIO_u8TogPinVal+0x5e>
 b58:	5b c0       	rjmp	.+182    	; 0xc10 <DIO_u8TogPinVal+0xfe>
 b5a:	2c 81       	ldd	r18, Y+4	; 0x04
 b5c:	3d 81       	ldd	r19, Y+5	; 0x05
 b5e:	2a 30       	cpi	r18, 0x0A	; 10
 b60:	31 05       	cpc	r19, r1
 b62:	71 f1       	breq	.+92     	; 0xbc0 <DIO_u8TogPinVal+0xae>
 b64:	8c 81       	ldd	r24, Y+4	; 0x04
 b66:	9d 81       	ldd	r25, Y+5	; 0x05
 b68:	8b 30       	cpi	r24, 0x0B	; 11
 b6a:	91 05       	cpc	r25, r1
 b6c:	e9 f1       	breq	.+122    	; 0xbe8 <DIO_u8TogPinVal+0xd6>
 b6e:	50 c0       	rjmp	.+160    	; 0xc10 <DIO_u8TogPinVal+0xfe>
			{
				case u8_DIO_PORTA: TOG_BIT(Ru8_PORTA,u8_PinNum) ;  break ;
 b70:	ab e3       	ldi	r26, 0x3B	; 59
 b72:	b0 e0       	ldi	r27, 0x00	; 0
 b74:	eb e3       	ldi	r30, 0x3B	; 59
 b76:	f0 e0       	ldi	r31, 0x00	; 0
 b78:	80 81       	ld	r24, Z
 b7a:	48 2f       	mov	r20, r24
 b7c:	8b 81       	ldd	r24, Y+3	; 0x03
 b7e:	28 2f       	mov	r18, r24
 b80:	30 e0       	ldi	r19, 0x00	; 0
 b82:	81 e0       	ldi	r24, 0x01	; 1
 b84:	90 e0       	ldi	r25, 0x00	; 0
 b86:	02 2e       	mov	r0, r18
 b88:	02 c0       	rjmp	.+4      	; 0xb8e <DIO_u8TogPinVal+0x7c>
 b8a:	88 0f       	add	r24, r24
 b8c:	99 1f       	adc	r25, r25
 b8e:	0a 94       	dec	r0
 b90:	e2 f7       	brpl	.-8      	; 0xb8a <DIO_u8TogPinVal+0x78>
 b92:	84 27       	eor	r24, r20
 b94:	8c 93       	st	X, r24
 b96:	41 c0       	rjmp	.+130    	; 0xc1a <DIO_u8TogPinVal+0x108>
				case u8_DIO_PORTB: TOG_BIT(Ru8_PORTB,u8_PinNum) ;  break ;
 b98:	a8 e3       	ldi	r26, 0x38	; 56
 b9a:	b0 e0       	ldi	r27, 0x00	; 0
 b9c:	e8 e3       	ldi	r30, 0x38	; 56
 b9e:	f0 e0       	ldi	r31, 0x00	; 0
 ba0:	80 81       	ld	r24, Z
 ba2:	48 2f       	mov	r20, r24
 ba4:	8b 81       	ldd	r24, Y+3	; 0x03
 ba6:	28 2f       	mov	r18, r24
 ba8:	30 e0       	ldi	r19, 0x00	; 0
 baa:	81 e0       	ldi	r24, 0x01	; 1
 bac:	90 e0       	ldi	r25, 0x00	; 0
 bae:	02 2e       	mov	r0, r18
 bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <DIO_u8TogPinVal+0xa4>
 bb2:	88 0f       	add	r24, r24
 bb4:	99 1f       	adc	r25, r25
 bb6:	0a 94       	dec	r0
 bb8:	e2 f7       	brpl	.-8      	; 0xbb2 <DIO_u8TogPinVal+0xa0>
 bba:	84 27       	eor	r24, r20
 bbc:	8c 93       	st	X, r24
 bbe:	2d c0       	rjmp	.+90     	; 0xc1a <DIO_u8TogPinVal+0x108>
				case u8_DIO_PORTC: TOG_BIT(Ru8_PORTC,u8_PinNum) ;  break ;
 bc0:	a5 e3       	ldi	r26, 0x35	; 53
 bc2:	b0 e0       	ldi	r27, 0x00	; 0
 bc4:	e5 e3       	ldi	r30, 0x35	; 53
 bc6:	f0 e0       	ldi	r31, 0x00	; 0
 bc8:	80 81       	ld	r24, Z
 bca:	48 2f       	mov	r20, r24
 bcc:	8b 81       	ldd	r24, Y+3	; 0x03
 bce:	28 2f       	mov	r18, r24
 bd0:	30 e0       	ldi	r19, 0x00	; 0
 bd2:	81 e0       	ldi	r24, 0x01	; 1
 bd4:	90 e0       	ldi	r25, 0x00	; 0
 bd6:	02 2e       	mov	r0, r18
 bd8:	02 c0       	rjmp	.+4      	; 0xbde <DIO_u8TogPinVal+0xcc>
 bda:	88 0f       	add	r24, r24
 bdc:	99 1f       	adc	r25, r25
 bde:	0a 94       	dec	r0
 be0:	e2 f7       	brpl	.-8      	; 0xbda <DIO_u8TogPinVal+0xc8>
 be2:	84 27       	eor	r24, r20
 be4:	8c 93       	st	X, r24
 be6:	19 c0       	rjmp	.+50     	; 0xc1a <DIO_u8TogPinVal+0x108>
				case u8_DIO_PORTD: TOG_BIT(Ru8_PORTD,u8_PinNum) ;  break ;
 be8:	a2 e3       	ldi	r26, 0x32	; 50
 bea:	b0 e0       	ldi	r27, 0x00	; 0
 bec:	e2 e3       	ldi	r30, 0x32	; 50
 bee:	f0 e0       	ldi	r31, 0x00	; 0
 bf0:	80 81       	ld	r24, Z
 bf2:	48 2f       	mov	r20, r24
 bf4:	8b 81       	ldd	r24, Y+3	; 0x03
 bf6:	28 2f       	mov	r18, r24
 bf8:	30 e0       	ldi	r19, 0x00	; 0
 bfa:	81 e0       	ldi	r24, 0x01	; 1
 bfc:	90 e0       	ldi	r25, 0x00	; 0
 bfe:	02 2e       	mov	r0, r18
 c00:	02 c0       	rjmp	.+4      	; 0xc06 <DIO_u8TogPinVal+0xf4>
 c02:	88 0f       	add	r24, r24
 c04:	99 1f       	adc	r25, r25
 c06:	0a 94       	dec	r0
 c08:	e2 f7       	brpl	.-8      	; 0xc02 <DIO_u8TogPinVal+0xf0>
 c0a:	84 27       	eor	r24, r20
 c0c:	8c 93       	st	X, r24
 c0e:	05 c0       	rjmp	.+10     	; 0xc1a <DIO_u8TogPinVal+0x108>
				default          :  u8_ErrorState = u8_DIO_NOK;   break ; 
 c10:	83 e0       	ldi	r24, 0x03	; 3
 c12:	89 83       	std	Y+1, r24	; 0x01
 c14:	02 c0       	rjmp	.+4      	; 0xc1a <DIO_u8TogPinVal+0x108>
			}
		}
		else 
		{
			u8_ErrorState = u8_DIO_NOK;
 c16:	83 e0       	ldi	r24, 0x03	; 3
 c18:	89 83       	std	Y+1, r24	; 0x01
		}
	return u8_ErrorState  ; 
 c1a:	89 81       	ldd	r24, Y+1	; 0x01
}
 c1c:	0f 90       	pop	r0
 c1e:	0f 90       	pop	r0
 c20:	0f 90       	pop	r0
 c22:	0f 90       	pop	r0
 c24:	0f 90       	pop	r0
 c26:	cf 91       	pop	r28
 c28:	df 91       	pop	r29
 c2a:	08 95       	ret

00000c2c <DIO_voidDisablePullUps>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void DIO_voidDisablePullUps(void)   
{
 c2c:	df 93       	push	r29
 c2e:	cf 93       	push	r28
 c30:	cd b7       	in	r28, 0x3d	; 61
 c32:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(Ru8_SFIOR,u8_PUD) ;
 c34:	a0 e5       	ldi	r26, 0x50	; 80
 c36:	b0 e0       	ldi	r27, 0x00	; 0
 c38:	e0 e5       	ldi	r30, 0x50	; 80
 c3a:	f0 e0       	ldi	r31, 0x00	; 0
 c3c:	80 81       	ld	r24, Z
 c3e:	84 60       	ori	r24, 0x04	; 4
 c40:	8c 93       	st	X, r24
}
 c42:	cf 91       	pop	r28
 c44:	df 91       	pop	r29
 c46:	08 95       	ret

00000c48 <DIO_voidEnablePullUps>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void DIO_voidEnablePullUps(void)  
{
 c48:	df 93       	push	r29
 c4a:	cf 93       	push	r28
 c4c:	cd b7       	in	r28, 0x3d	; 61
 c4e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(Ru8_SFIOR,u8_PUD) ;
 c50:	a0 e5       	ldi	r26, 0x50	; 80
 c52:	b0 e0       	ldi	r27, 0x00	; 0
 c54:	e0 e5       	ldi	r30, 0x50	; 80
 c56:	f0 e0       	ldi	r31, 0x00	; 0
 c58:	80 81       	ld	r24, Z
 c5a:	8b 7f       	andi	r24, 0xFB	; 251
 c5c:	8c 93       	st	X, r24
}
 c5e:	cf 91       	pop	r28
 c60:	df 91       	pop	r29
 c62:	08 95       	ret

00000c64 <main>:


#define u8_I2C_MCU_SLAVE_ADDRESS			0x51

int main(void)
{
 c64:	df 93       	push	r29
 c66:	cf 93       	push	r28
 c68:	0f 92       	push	r0
 c6a:	cd b7       	in	r28, 0x3d	; 61
 c6c:	de b7       	in	r29, 0x3e	; 62

	uint8_t u8_dataRead ;
	//initializing the slave
	I2C_voidSlaveInit(u8_I2C_MCU_SLAVE_ADDRESS) ;
 c6e:	81 e5       	ldi	r24, 0x51	; 81
 c70:	0e 94 b3 01 	call	0x366	; 0x366 <I2C_voidSlaveInit>
	//send ack from slave that the master's write request happened
	I2C_slaveAckRead() ;
 c74:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <I2C_slaveAckRead>
	//get the returned data
	u8_dataRead = I2C_slaveReadAckReturned() ;
 c78:	0e 94 c6 01 	call	0x38c	; 0x38c <I2C_slaveReadAckReturned>
 c7c:	89 83       	std	Y+1, r24	; 0x01
	//initialize the PORTA to be output port
	DIO_u8SetPortDir(u8_DIO_PORTA,u8_DIO_OUTPUT_PORT) ;
 c7e:	88 e0       	ldi	r24, 0x08	; 8
 c80:	6f ef       	ldi	r22, 0xFF	; 255
 c82:	0e 94 57 04 	call	0x8ae	; 0x8ae <DIO_u8SetPortDir>
	//set the port with the returned value (value sent from master )
	DIO_u8SetPortVal(u8_DIO_PORTA,u8_dataRead) ;
 c86:	88 e0       	ldi	r24, 0x08	; 8
 c88:	69 81       	ldd	r22, Y+1	; 0x01
 c8a:	0e 94 0d 04 	call	0x81a	; 0x81a <DIO_u8SetPortVal>
 c8e:	ff cf       	rjmp	.-2      	; 0xc8e <main+0x2a>

00000c90 <_exit>:
 c90:	f8 94       	cli

00000c92 <__stop_program>:
 c92:	ff cf       	rjmp	.-2      	; 0xc92 <__stop_program>
