
SPI_testCaseMaster.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000adc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00001038  00000000  00000000  00000b30  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000007bf  00000000  00000000  00001b68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 60 05 	call	0xac0	; 0xac0 <main>
  64:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_voidInit>:
#include "SPI_private.h"
#include "SPI_config.h"


void SPI_voidInit(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	//config the enable of spi
	#if	u8_SPI_STATE == u8_SPI_ENABLE
		SET_BIT(Ru8_SPCR,u8_SPI_SPE) ;
  74:	ad e2       	ldi	r26, 0x2D	; 45
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	ed e2       	ldi	r30, 0x2D	; 45
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	80 64       	ori	r24, 0x40	; 64
  80:	8c 93       	st	X, r24
		#error "bre-build wrong config SPI_STATE "
	#endif
	
	//config the beginning of transmit bit
	#if u8_SPI_DATA_TRANS_ORDER == u8_SPI_LSB_TRANS_FRIST
		SET_BIT(Ru8_SPCR,u8_SPI_DORD) ;
  82:	ad e2       	ldi	r26, 0x2D	; 45
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	ed e2       	ldi	r30, 0x2D	; 45
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	80 62       	ori	r24, 0x20	; 32
  8e:	8c 93       	st	X, r24
		#error "bre-build wrong config DATA_TRANS_ORDER"
	#endif

		//config the SPI operation mode in master or slave
	#if u8_SPI_SELECT_SPI_MODE == u8_SPI_MASTER
		SET_BIT(Ru8_SPCR,u8_SPI_MSTR) ;
  90:	ad e2       	ldi	r26, 0x2D	; 45
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	ed e2       	ldi	r30, 0x2D	; 45
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	80 61       	ori	r24, 0x10	; 16
  9c:	8c 93       	st	X, r24
		SET_BIT(Ru8_DDRB,u8_SPI_SCK_PIN);
  9e:	a7 e3       	ldi	r26, 0x37	; 55
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	e7 e3       	ldi	r30, 0x37	; 55
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	80 68       	ori	r24, 0x80	; 128
  aa:	8c 93       	st	X, r24
		CLR_BIT(Ru8_DDRB,u8_SPI_MISO_PIN);
  ac:	a7 e3       	ldi	r26, 0x37	; 55
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	e7 e3       	ldi	r30, 0x37	; 55
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	8f 7b       	andi	r24, 0xBF	; 191
  b8:	8c 93       	st	X, r24
		SET_BIT(Ru8_DDRB,u8_SPI_MOSI_PIN);
  ba:	a7 e3       	ldi	r26, 0x37	; 55
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	e7 e3       	ldi	r30, 0x37	; 55
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	80 62       	ori	r24, 0x20	; 32
  c6:	8c 93       	st	X, r24
		CLR_BIT(Ru8_DDRB,u8_SPI_SS_PIN);
  c8:	a7 e3       	ldi	r26, 0x37	; 55
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	e7 e3       	ldi	r30, 0x37	; 55
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	8f 7e       	andi	r24, 0xEF	; 239
  d4:	8c 93       	st	X, r24
		SET_BIT(Ru8_PORTB,u8_SPI_SS_PIN);
  d6:	a8 e3       	ldi	r26, 0x38	; 56
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	e8 e3       	ldi	r30, 0x38	; 56
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	80 61       	ori	r24, 0x10	; 16
  e2:	8c 93       	st	X, r24
		#error "bre-build wrong config SELECT_SPI_MODE"
	#endif

		//config the idle SCK state and the edge that occur after idle
	#if u8_SPI_CLK_OPERATION_CONFIG == u8_SPI_CLK_LEADING_RISING_EDGE
		CLR_BIT(Ru8_SPCR,u8_SPI_CPOL) ;
  e4:	ad e2       	ldi	r26, 0x2D	; 45
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	ed e2       	ldi	r30, 0x2D	; 45
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	87 7f       	andi	r24, 0xF7	; 247
  f0:	8c 93       	st	X, r24

	//config the sampling time of the spi
	#if u8_SPI_SAMPLING_OPERATION_CONFIG == u8_SPI_SAMPLE_ON_LEADING_EDGE
		CLR_BIT(Ru8_SPCR,u8_SPI_CPHA) ;
	#elif u8_SPI_SAMPLING_OPERATION_CONFIG == u8_SPI_SAMPLE_ON_TRAILLING_EDGE
		SET_BIT(Ru8_SPCR,u8_SPI_CPHA) ;
  f2:	ad e2       	ldi	r26, 0x2D	; 45
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	ed e2       	ldi	r30, 0x2D	; 45
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	84 60       	ori	r24, 0x04	; 4
  fe:	8c 93       	st	X, r24
	#elif u8_SPI_CLK_CONFIG == u8_SPI_CLK_FSOC_BY_32
		SET_BIT(Ru8_SPCR,u8_SPI_SPR1) ;
	    CLR_BIT(Ru8_SPCR,u8_SPI_SPR0) ;
	    SET_BIT(Ru8_SPSR,u8_SPI_SPI2X) ;
	#elif u8_SPI_CLK_CONFIG == u8_SPI_CLK_FSOC_BY_64
		SET_BIT(Ru8_SPCR,u8_SPI_SPR1) ;
 100:	ad e2       	ldi	r26, 0x2D	; 45
 102:	b0 e0       	ldi	r27, 0x00	; 0
 104:	ed e2       	ldi	r30, 0x2D	; 45
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	82 60       	ori	r24, 0x02	; 2
 10c:	8c 93       	st	X, r24
	    SET_BIT(Ru8_SPCR,u8_SPI_SPR0) ;
 10e:	ad e2       	ldi	r26, 0x2D	; 45
 110:	b0 e0       	ldi	r27, 0x00	; 0
 112:	ed e2       	ldi	r30, 0x2D	; 45
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	81 60       	ori	r24, 0x01	; 1
 11a:	8c 93       	st	X, r24
	    CLR_BIT(Ru8_SPSR,u8_SPI_SPI2X) ;
 11c:	ae e2       	ldi	r26, 0x2E	; 46
 11e:	b0 e0       	ldi	r27, 0x00	; 0
 120:	ee e2       	ldi	r30, 0x2E	; 46
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	8e 7f       	andi	r24, 0xFE	; 254
 128:	8c 93       	st	X, r24
	#endif


	
	
}
 12a:	cf 91       	pop	r28
 12c:	df 91       	pop	r29
 12e:	08 95       	ret

00000130 <SPI_voidTransever>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//function that send and receive on Byte at the same time by returning the received and take the sending in argument 
uint8_t SPI_voidTransever(uint8_t u8_dataSent)
{
 130:	df 93       	push	r29
 132:	cf 93       	push	r28
 134:	0f 92       	push	r0
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
 13a:	89 83       	std	Y+1, r24	; 0x01
	Ru8_SPDR = u8_dataSent ; 
 13c:	ef e2       	ldi	r30, 0x2F	; 47
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	89 81       	ldd	r24, Y+1	; 0x01
 142:	80 83       	st	Z, r24
	
	while(GET_BIT(Ru8_SPSR,u8_SPI_SPIF)!=u8_SPI_FLAG_SET) ; 
 144:	ee e2       	ldi	r30, 0x2E	; 46
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	88 1f       	adc	r24, r24
 14c:	88 27       	eor	r24, r24
 14e:	88 1f       	adc	r24, r24
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	c1 f7       	brne	.-16     	; 0x144 <SPI_voidTransever+0x14>
	
	return Ru8_SPDR ; 
 154:	ef e2       	ldi	r30, 0x2F	; 47
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
}
 15a:	0f 90       	pop	r0
 15c:	cf 91       	pop	r28
 15e:	df 91       	pop	r29
 160:	08 95       	ret

00000162 <SPI_voidReceiveArr>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//function that receive Array of bytes or string in array pointer pu8_dataReceive with array size u8_arrSize
void SPI_voidReceiveArr(uint8_t* pu8_dataReceive,uint8_t u8_arrSize)
{
 162:	0f 93       	push	r16
 164:	1f 93       	push	r17
 166:	df 93       	push	r29
 168:	cf 93       	push	r28
 16a:	00 d0       	rcall	.+0      	; 0x16c <SPI_voidReceiveArr+0xa>
 16c:	00 d0       	rcall	.+0      	; 0x16e <SPI_voidReceiveArr+0xc>
 16e:	0f 92       	push	r0
 170:	cd b7       	in	r28, 0x3d	; 61
 172:	de b7       	in	r29, 0x3e	; 62
 174:	9c 83       	std	Y+4, r25	; 0x04
 176:	8b 83       	std	Y+3, r24	; 0x03
 178:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t u8_dummy, u8_indexArr = u8_SPI_INTIAL_VAL ; 
 17a:	19 82       	std	Y+1, r1	; 0x01
 17c:	1b c0       	rjmp	.+54     	; 0x1b4 <SPI_voidReceiveArr+0x52>
	
	while(u8_indexArr<u8_arrSize)
	{
		pu8_dataReceive[u8_indexArr] = SPI_voidTransever(u8_dummy)  ;
 17e:	89 81       	ldd	r24, Y+1	; 0x01
 180:	28 2f       	mov	r18, r24
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	8b 81       	ldd	r24, Y+3	; 0x03
 186:	9c 81       	ldd	r25, Y+4	; 0x04
 188:	8c 01       	movw	r16, r24
 18a:	02 0f       	add	r16, r18
 18c:	13 1f       	adc	r17, r19
 18e:	8a 81       	ldd	r24, Y+2	; 0x02
 190:	0e 94 98 00 	call	0x130	; 0x130 <SPI_voidTransever>
 194:	f8 01       	movw	r30, r16
 196:	80 83       	st	Z, r24
		
		if(pu8_dataReceive[u8_indexArr] == NULL_CHAR)
 198:	89 81       	ldd	r24, Y+1	; 0x01
 19a:	28 2f       	mov	r18, r24
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	8b 81       	ldd	r24, Y+3	; 0x03
 1a0:	9c 81       	ldd	r25, Y+4	; 0x04
 1a2:	fc 01       	movw	r30, r24
 1a4:	e2 0f       	add	r30, r18
 1a6:	f3 1f       	adc	r31, r19
 1a8:	80 81       	ld	r24, Z
 1aa:	88 23       	and	r24, r24
 1ac:	39 f0       	breq	.+14     	; 0x1bc <SPI_voidReceiveArr+0x5a>
		{
			break ; 
		}
		++u8_indexArr ;
 1ae:	89 81       	ldd	r24, Y+1	; 0x01
 1b0:	8f 5f       	subi	r24, 0xFF	; 255
 1b2:	89 83       	std	Y+1, r24	; 0x01
//function that receive Array of bytes or string in array pointer pu8_dataReceive with array size u8_arrSize
void SPI_voidReceiveArr(uint8_t* pu8_dataReceive,uint8_t u8_arrSize)
{
	uint8_t u8_dummy, u8_indexArr = u8_SPI_INTIAL_VAL ; 
	
	while(u8_indexArr<u8_arrSize)
 1b4:	99 81       	ldd	r25, Y+1	; 0x01
 1b6:	8d 81       	ldd	r24, Y+5	; 0x05
 1b8:	98 17       	cp	r25, r24
 1ba:	08 f3       	brcs	.-62     	; 0x17e <SPI_voidReceiveArr+0x1c>
			break ; 
		}
		++u8_indexArr ;
	}
	
}
 1bc:	0f 90       	pop	r0
 1be:	0f 90       	pop	r0
 1c0:	0f 90       	pop	r0
 1c2:	0f 90       	pop	r0
 1c4:	0f 90       	pop	r0
 1c6:	cf 91       	pop	r28
 1c8:	df 91       	pop	r29
 1ca:	1f 91       	pop	r17
 1cc:	0f 91       	pop	r16
 1ce:	08 95       	ret

000001d0 <SPI_voidSendArr>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//function that send Array of bytes or string in array pointer pu8_dataSent with array size u8_arrSize
void SPI_voidSendArr(uint8_t* pu8_dataSent,uint8_t u8_arrSize)
{
 1d0:	df 93       	push	r29
 1d2:	cf 93       	push	r28
 1d4:	00 d0       	rcall	.+0      	; 0x1d6 <SPI_voidSendArr+0x6>
 1d6:	00 d0       	rcall	.+0      	; 0x1d8 <SPI_voidSendArr+0x8>
 1d8:	0f 92       	push	r0
 1da:	cd b7       	in	r28, 0x3d	; 61
 1dc:	de b7       	in	r29, 0x3e	; 62
 1de:	9c 83       	std	Y+4, r25	; 0x04
 1e0:	8b 83       	std	Y+3, r24	; 0x03
 1e2:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t u8_dummy, u8_indexArr = u8_SPI_INTIAL_VAL ; 
 1e4:	19 82       	std	Y+1, r1	; 0x01
 1e6:	27 c0       	rjmp	.+78     	; 0x236 <SPI_voidSendArr+0x66>
	
	while(u8_indexArr<u8_arrSize)
	{
		if(pu8_dataSent[u8_indexArr] == NULL_CHAR)
 1e8:	89 81       	ldd	r24, Y+1	; 0x01
 1ea:	28 2f       	mov	r18, r24
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	8b 81       	ldd	r24, Y+3	; 0x03
 1f0:	9c 81       	ldd	r25, Y+4	; 0x04
 1f2:	fc 01       	movw	r30, r24
 1f4:	e2 0f       	add	r30, r18
 1f6:	f3 1f       	adc	r31, r19
 1f8:	80 81       	ld	r24, Z
 1fa:	88 23       	and	r24, r24
 1fc:	69 f4       	brne	.+26     	; 0x218 <SPI_voidSendArr+0x48>
		{
			u8_dummy = SPI_voidTransever(pu8_dataSent[u8_indexArr])  ;
 1fe:	89 81       	ldd	r24, Y+1	; 0x01
 200:	28 2f       	mov	r18, r24
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	8b 81       	ldd	r24, Y+3	; 0x03
 206:	9c 81       	ldd	r25, Y+4	; 0x04
 208:	fc 01       	movw	r30, r24
 20a:	e2 0f       	add	r30, r18
 20c:	f3 1f       	adc	r31, r19
 20e:	80 81       	ld	r24, Z
 210:	0e 94 98 00 	call	0x130	; 0x130 <SPI_voidTransever>
 214:	8a 83       	std	Y+2, r24	; 0x02
 216:	13 c0       	rjmp	.+38     	; 0x23e <SPI_voidSendArr+0x6e>
			break ; 
		}
		else 
		{
			u8_dummy = SPI_voidTransever(pu8_dataSent[u8_indexArr])  ;
 218:	89 81       	ldd	r24, Y+1	; 0x01
 21a:	28 2f       	mov	r18, r24
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	8b 81       	ldd	r24, Y+3	; 0x03
 220:	9c 81       	ldd	r25, Y+4	; 0x04
 222:	fc 01       	movw	r30, r24
 224:	e2 0f       	add	r30, r18
 226:	f3 1f       	adc	r31, r19
 228:	80 81       	ld	r24, Z
 22a:	0e 94 98 00 	call	0x130	; 0x130 <SPI_voidTransever>
 22e:	8a 83       	std	Y+2, r24	; 0x02
			++u8_indexArr ;
 230:	89 81       	ldd	r24, Y+1	; 0x01
 232:	8f 5f       	subi	r24, 0xFF	; 255
 234:	89 83       	std	Y+1, r24	; 0x01
//function that send Array of bytes or string in array pointer pu8_dataSent with array size u8_arrSize
void SPI_voidSendArr(uint8_t* pu8_dataSent,uint8_t u8_arrSize)
{
	uint8_t u8_dummy, u8_indexArr = u8_SPI_INTIAL_VAL ; 
	
	while(u8_indexArr<u8_arrSize)
 236:	99 81       	ldd	r25, Y+1	; 0x01
 238:	8d 81       	ldd	r24, Y+5	; 0x05
 23a:	98 17       	cp	r25, r24
 23c:	a8 f2       	brcs	.-86     	; 0x1e8 <SPI_voidSendArr+0x18>
		{
			u8_dummy = SPI_voidTransever(pu8_dataSent[u8_indexArr])  ;
			++u8_indexArr ;
		}
	}
}
 23e:	0f 90       	pop	r0
 240:	0f 90       	pop	r0
 242:	0f 90       	pop	r0
 244:	0f 90       	pop	r0
 246:	0f 90       	pop	r0
 248:	cf 91       	pop	r28
 24a:	df 91       	pop	r29
 24c:	08 95       	ret

0000024e <DIO_u8SetPinVal>:
#include "dio_interface.h"
#include "dio_private.h"


uint8_t DIO_u8SetPinVal(uint8_t u8_PortNum,uint8_t u8_PinNum,uint8_t u8_PinState)     
{
 24e:	df 93       	push	r29
 250:	cf 93       	push	r28
 252:	00 d0       	rcall	.+0      	; 0x254 <DIO_u8SetPinVal+0x6>
 254:	00 d0       	rcall	.+0      	; 0x256 <DIO_u8SetPinVal+0x8>
 256:	00 d0       	rcall	.+0      	; 0x258 <DIO_u8SetPinVal+0xa>
 258:	cd b7       	in	r28, 0x3d	; 61
 25a:	de b7       	in	r29, 0x3e	; 62
 25c:	8a 83       	std	Y+2, r24	; 0x02
 25e:	6b 83       	std	Y+3, r22	; 0x03
 260:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t u8_ErrorState = u8_DIO_OK;
 262:	82 e0       	ldi	r24, 0x02	; 2
 264:	89 83       	std	Y+1, r24	; 0x01
	if(u8_PinNum>=u8_DIO_PIN0 && u8_PinNum<=u8_DIO_PIN7)
 266:	8b 81       	ldd	r24, Y+3	; 0x03
 268:	88 30       	cpi	r24, 0x08	; 8
 26a:	08 f0       	brcs	.+2      	; 0x26e <DIO_u8SetPinVal+0x20>
 26c:	ee c0       	rjmp	.+476    	; 0x44a <DIO_u8SetPinVal+0x1fc>
	{
		switch(u8_PortNum)
 26e:	8a 81       	ldd	r24, Y+2	; 0x02
 270:	28 2f       	mov	r18, r24
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	3e 83       	std	Y+6, r19	; 0x06
 276:	2d 83       	std	Y+5, r18	; 0x05
 278:	8d 81       	ldd	r24, Y+5	; 0x05
 27a:	9e 81       	ldd	r25, Y+6	; 0x06
 27c:	89 30       	cpi	r24, 0x09	; 9
 27e:	91 05       	cpc	r25, r1
 280:	09 f4       	brne	.+2      	; 0x284 <DIO_u8SetPinVal+0x36>
 282:	4a c0       	rjmp	.+148    	; 0x318 <DIO_u8SetPinVal+0xca>
 284:	2d 81       	ldd	r18, Y+5	; 0x05
 286:	3e 81       	ldd	r19, Y+6	; 0x06
 288:	2a 30       	cpi	r18, 0x0A	; 10
 28a:	31 05       	cpc	r19, r1
 28c:	34 f4       	brge	.+12     	; 0x29a <DIO_u8SetPinVal+0x4c>
 28e:	8d 81       	ldd	r24, Y+5	; 0x05
 290:	9e 81       	ldd	r25, Y+6	; 0x06
 292:	88 30       	cpi	r24, 0x08	; 8
 294:	91 05       	cpc	r25, r1
 296:	71 f0       	breq	.+28     	; 0x2b4 <DIO_u8SetPinVal+0x66>
 298:	d5 c0       	rjmp	.+426    	; 0x444 <DIO_u8SetPinVal+0x1f6>
 29a:	2d 81       	ldd	r18, Y+5	; 0x05
 29c:	3e 81       	ldd	r19, Y+6	; 0x06
 29e:	2a 30       	cpi	r18, 0x0A	; 10
 2a0:	31 05       	cpc	r19, r1
 2a2:	09 f4       	brne	.+2      	; 0x2a6 <DIO_u8SetPinVal+0x58>
 2a4:	6b c0       	rjmp	.+214    	; 0x37c <DIO_u8SetPinVal+0x12e>
 2a6:	8d 81       	ldd	r24, Y+5	; 0x05
 2a8:	9e 81       	ldd	r25, Y+6	; 0x06
 2aa:	8b 30       	cpi	r24, 0x0B	; 11
 2ac:	91 05       	cpc	r25, r1
 2ae:	09 f4       	brne	.+2      	; 0x2b2 <DIO_u8SetPinVal+0x64>
 2b0:	97 c0       	rjmp	.+302    	; 0x3e0 <DIO_u8SetPinVal+0x192>
 2b2:	c8 c0       	rjmp	.+400    	; 0x444 <DIO_u8SetPinVal+0x1f6>
		{
			case u8_DIO_PORTA: if(u8_PinState == u8_DIO_PIN_LOW)
 2b4:	8c 81       	ldd	r24, Y+4	; 0x04
 2b6:	88 23       	and	r24, r24
 2b8:	a9 f4       	brne	.+42     	; 0x2e4 <DIO_u8SetPinVal+0x96>
								{
									CLR_BIT(Ru8_PORTA,u8_PinNum) ;
 2ba:	ab e3       	ldi	r26, 0x3B	; 59
 2bc:	b0 e0       	ldi	r27, 0x00	; 0
 2be:	eb e3       	ldi	r30, 0x3B	; 59
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	80 81       	ld	r24, Z
 2c4:	48 2f       	mov	r20, r24
 2c6:	8b 81       	ldd	r24, Y+3	; 0x03
 2c8:	28 2f       	mov	r18, r24
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	02 2e       	mov	r0, r18
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_u8SetPinVal+0x8a>
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	0a 94       	dec	r0
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_u8SetPinVal+0x86>
 2dc:	80 95       	com	r24
 2de:	84 23       	and	r24, r20
 2e0:	8c 93       	st	X, r24
 2e2:	b5 c0       	rjmp	.+362    	; 0x44e <DIO_u8SetPinVal+0x200>
								}
								else if(u8_PinState == u8_DIO_PIN_HIGH)
 2e4:	8c 81       	ldd	r24, Y+4	; 0x04
 2e6:	81 30       	cpi	r24, 0x01	; 1
 2e8:	a1 f4       	brne	.+40     	; 0x312 <DIO_u8SetPinVal+0xc4>
								{
									SET_BIT(Ru8_PORTA,u8_PinNum) ;
 2ea:	ab e3       	ldi	r26, 0x3B	; 59
 2ec:	b0 e0       	ldi	r27, 0x00	; 0
 2ee:	eb e3       	ldi	r30, 0x3B	; 59
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	80 81       	ld	r24, Z
 2f4:	48 2f       	mov	r20, r24
 2f6:	8b 81       	ldd	r24, Y+3	; 0x03
 2f8:	28 2f       	mov	r18, r24
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	02 2e       	mov	r0, r18
 302:	02 c0       	rjmp	.+4      	; 0x308 <DIO_u8SetPinVal+0xba>
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	0a 94       	dec	r0
 30a:	e2 f7       	brpl	.-8      	; 0x304 <DIO_u8SetPinVal+0xb6>
 30c:	84 2b       	or	r24, r20
 30e:	8c 93       	st	X, r24
 310:	9e c0       	rjmp	.+316    	; 0x44e <DIO_u8SetPinVal+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
 312:	83 e0       	ldi	r24, 0x03	; 3
 314:	89 83       	std	Y+1, r24	; 0x01
 316:	9b c0       	rjmp	.+310    	; 0x44e <DIO_u8SetPinVal+0x200>
								}

							   break;
							   
			case u8_DIO_PORTB:	if(u8_PinState == u8_DIO_PIN_LOW)
 318:	8c 81       	ldd	r24, Y+4	; 0x04
 31a:	88 23       	and	r24, r24
 31c:	a9 f4       	brne	.+42     	; 0x348 <DIO_u8SetPinVal+0xfa>
								{
									CLR_BIT(Ru8_PORTB,u8_PinNum) ;
 31e:	a8 e3       	ldi	r26, 0x38	; 56
 320:	b0 e0       	ldi	r27, 0x00	; 0
 322:	e8 e3       	ldi	r30, 0x38	; 56
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	80 81       	ld	r24, Z
 328:	48 2f       	mov	r20, r24
 32a:	8b 81       	ldd	r24, Y+3	; 0x03
 32c:	28 2f       	mov	r18, r24
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	02 2e       	mov	r0, r18
 336:	02 c0       	rjmp	.+4      	; 0x33c <DIO_u8SetPinVal+0xee>
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	0a 94       	dec	r0
 33e:	e2 f7       	brpl	.-8      	; 0x338 <DIO_u8SetPinVal+0xea>
 340:	80 95       	com	r24
 342:	84 23       	and	r24, r20
 344:	8c 93       	st	X, r24
 346:	83 c0       	rjmp	.+262    	; 0x44e <DIO_u8SetPinVal+0x200>
								}
								else if(u8_PinState == u8_DIO_PIN_HIGH)
 348:	8c 81       	ldd	r24, Y+4	; 0x04
 34a:	81 30       	cpi	r24, 0x01	; 1
 34c:	a1 f4       	brne	.+40     	; 0x376 <DIO_u8SetPinVal+0x128>
								{
									SET_BIT(Ru8_PORTB,u8_PinNum) ;
 34e:	a8 e3       	ldi	r26, 0x38	; 56
 350:	b0 e0       	ldi	r27, 0x00	; 0
 352:	e8 e3       	ldi	r30, 0x38	; 56
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	80 81       	ld	r24, Z
 358:	48 2f       	mov	r20, r24
 35a:	8b 81       	ldd	r24, Y+3	; 0x03
 35c:	28 2f       	mov	r18, r24
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	02 2e       	mov	r0, r18
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_u8SetPinVal+0x11e>
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	0a 94       	dec	r0
 36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_u8SetPinVal+0x11a>
 370:	84 2b       	or	r24, r20
 372:	8c 93       	st	X, r24
 374:	6c c0       	rjmp	.+216    	; 0x44e <DIO_u8SetPinVal+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
 376:	83 e0       	ldi	r24, 0x03	; 3
 378:	89 83       	std	Y+1, r24	; 0x01
 37a:	69 c0       	rjmp	.+210    	; 0x44e <DIO_u8SetPinVal+0x200>
								}
							   break;
							   
			case u8_DIO_PORTC:  if(u8_PinState == u8_DIO_PIN_LOW)
 37c:	8c 81       	ldd	r24, Y+4	; 0x04
 37e:	88 23       	and	r24, r24
 380:	a9 f4       	brne	.+42     	; 0x3ac <DIO_u8SetPinVal+0x15e>
								{
									CLR_BIT(Ru8_PORTC,u8_PinNum) ;
 382:	a5 e3       	ldi	r26, 0x35	; 53
 384:	b0 e0       	ldi	r27, 0x00	; 0
 386:	e5 e3       	ldi	r30, 0x35	; 53
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	80 81       	ld	r24, Z
 38c:	48 2f       	mov	r20, r24
 38e:	8b 81       	ldd	r24, Y+3	; 0x03
 390:	28 2f       	mov	r18, r24
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	02 2e       	mov	r0, r18
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <DIO_u8SetPinVal+0x152>
 39c:	88 0f       	add	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	0a 94       	dec	r0
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <DIO_u8SetPinVal+0x14e>
 3a4:	80 95       	com	r24
 3a6:	84 23       	and	r24, r20
 3a8:	8c 93       	st	X, r24
 3aa:	51 c0       	rjmp	.+162    	; 0x44e <DIO_u8SetPinVal+0x200>
								}
								else if(u8_PinState == u8_DIO_PIN_HIGH)
 3ac:	8c 81       	ldd	r24, Y+4	; 0x04
 3ae:	81 30       	cpi	r24, 0x01	; 1
 3b0:	a1 f4       	brne	.+40     	; 0x3da <DIO_u8SetPinVal+0x18c>
								{
									SET_BIT(Ru8_PORTC,u8_PinNum) ;
 3b2:	a5 e3       	ldi	r26, 0x35	; 53
 3b4:	b0 e0       	ldi	r27, 0x00	; 0
 3b6:	e5 e3       	ldi	r30, 0x35	; 53
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	80 81       	ld	r24, Z
 3bc:	48 2f       	mov	r20, r24
 3be:	8b 81       	ldd	r24, Y+3	; 0x03
 3c0:	28 2f       	mov	r18, r24
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	02 2e       	mov	r0, r18
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_u8SetPinVal+0x182>
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	0a 94       	dec	r0
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_u8SetPinVal+0x17e>
 3d4:	84 2b       	or	r24, r20
 3d6:	8c 93       	st	X, r24
 3d8:	3a c0       	rjmp	.+116    	; 0x44e <DIO_u8SetPinVal+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
 3da:	83 e0       	ldi	r24, 0x03	; 3
 3dc:	89 83       	std	Y+1, r24	; 0x01
 3de:	37 c0       	rjmp	.+110    	; 0x44e <DIO_u8SetPinVal+0x200>
								}

								break;
								
			case u8_DIO_PORTD: if(u8_PinState == u8_DIO_PIN_LOW)
 3e0:	8c 81       	ldd	r24, Y+4	; 0x04
 3e2:	88 23       	and	r24, r24
 3e4:	a9 f4       	brne	.+42     	; 0x410 <DIO_u8SetPinVal+0x1c2>
							   {
									CLR_BIT(Ru8_PORTD,u8_PinNum) ;
 3e6:	a2 e3       	ldi	r26, 0x32	; 50
 3e8:	b0 e0       	ldi	r27, 0x00	; 0
 3ea:	e2 e3       	ldi	r30, 0x32	; 50
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	80 81       	ld	r24, Z
 3f0:	48 2f       	mov	r20, r24
 3f2:	8b 81       	ldd	r24, Y+3	; 0x03
 3f4:	28 2f       	mov	r18, r24
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	02 2e       	mov	r0, r18
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <DIO_u8SetPinVal+0x1b6>
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	0a 94       	dec	r0
 406:	e2 f7       	brpl	.-8      	; 0x400 <DIO_u8SetPinVal+0x1b2>
 408:	80 95       	com	r24
 40a:	84 23       	and	r24, r20
 40c:	8c 93       	st	X, r24
 40e:	1f c0       	rjmp	.+62     	; 0x44e <DIO_u8SetPinVal+0x200>
							   }
							   else if(u8_PinState == u8_DIO_PIN_HIGH)
 410:	8c 81       	ldd	r24, Y+4	; 0x04
 412:	81 30       	cpi	r24, 0x01	; 1
 414:	a1 f4       	brne	.+40     	; 0x43e <DIO_u8SetPinVal+0x1f0>
							   {
									SET_BIT(Ru8_PORTD,u8_PinNum) ;
 416:	a2 e3       	ldi	r26, 0x32	; 50
 418:	b0 e0       	ldi	r27, 0x00	; 0
 41a:	e2 e3       	ldi	r30, 0x32	; 50
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	80 81       	ld	r24, Z
 420:	48 2f       	mov	r20, r24
 422:	8b 81       	ldd	r24, Y+3	; 0x03
 424:	28 2f       	mov	r18, r24
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	02 2e       	mov	r0, r18
 42e:	02 c0       	rjmp	.+4      	; 0x434 <DIO_u8SetPinVal+0x1e6>
 430:	88 0f       	add	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	0a 94       	dec	r0
 436:	e2 f7       	brpl	.-8      	; 0x430 <DIO_u8SetPinVal+0x1e2>
 438:	84 2b       	or	r24, r20
 43a:	8c 93       	st	X, r24
 43c:	08 c0       	rjmp	.+16     	; 0x44e <DIO_u8SetPinVal+0x200>
							   }
							   else 
							   {
									u8_ErrorState = u8_DIO_NOK ; 
 43e:	83 e0       	ldi	r24, 0x03	; 3
 440:	89 83       	std	Y+1, r24	; 0x01
 442:	05 c0       	rjmp	.+10     	; 0x44e <DIO_u8SetPinVal+0x200>
							   }
								break;
								
			default          : u8_ErrorState = u8_DIO_NOK ; 
 444:	83 e0       	ldi	r24, 0x03	; 3
 446:	89 83       	std	Y+1, r24	; 0x01
 448:	02 c0       	rjmp	.+4      	; 0x44e <DIO_u8SetPinVal+0x200>
								break ; 
		}
	}
	else 
	{
		u8_ErrorState = u8_DIO_NOK ; 
 44a:	83 e0       	ldi	r24, 0x03	; 3
 44c:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_ErrorState  ; 
 44e:	89 81       	ldd	r24, Y+1	; 0x01
}
 450:	26 96       	adiw	r28, 0x06	; 6
 452:	0f b6       	in	r0, 0x3f	; 63
 454:	f8 94       	cli
 456:	de bf       	out	0x3e, r29	; 62
 458:	0f be       	out	0x3f, r0	; 63
 45a:	cd bf       	out	0x3d, r28	; 61
 45c:	cf 91       	pop	r28
 45e:	df 91       	pop	r29
 460:	08 95       	ret

00000462 <DIO_u8SetPinDir>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8SetPinDir(uint8_t u8_PortNum,uint8_t u8_PinNum,uint8_t u8_PinDir)      
{
 462:	df 93       	push	r29
 464:	cf 93       	push	r28
 466:	00 d0       	rcall	.+0      	; 0x468 <DIO_u8SetPinDir+0x6>
 468:	00 d0       	rcall	.+0      	; 0x46a <DIO_u8SetPinDir+0x8>
 46a:	00 d0       	rcall	.+0      	; 0x46c <DIO_u8SetPinDir+0xa>
 46c:	cd b7       	in	r28, 0x3d	; 61
 46e:	de b7       	in	r29, 0x3e	; 62
 470:	8a 83       	std	Y+2, r24	; 0x02
 472:	6b 83       	std	Y+3, r22	; 0x03
 474:	4c 83       	std	Y+4, r20	; 0x04
	
	uint8_t u8_ErrorState = u8_DIO_OK;
 476:	82 e0       	ldi	r24, 0x02	; 2
 478:	89 83       	std	Y+1, r24	; 0x01
	if(u8_PinNum>=u8_DIO_PIN0 && u8_PinNum<=u8_DIO_PIN7)
 47a:	8b 81       	ldd	r24, Y+3	; 0x03
 47c:	88 30       	cpi	r24, 0x08	; 8
 47e:	08 f0       	brcs	.+2      	; 0x482 <DIO_u8SetPinDir+0x20>
 480:	ee c0       	rjmp	.+476    	; 0x65e <DIO_u8SetPinDir+0x1fc>
	{
		switch(u8_PortNum)
 482:	8a 81       	ldd	r24, Y+2	; 0x02
 484:	28 2f       	mov	r18, r24
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	3e 83       	std	Y+6, r19	; 0x06
 48a:	2d 83       	std	Y+5, r18	; 0x05
 48c:	8d 81       	ldd	r24, Y+5	; 0x05
 48e:	9e 81       	ldd	r25, Y+6	; 0x06
 490:	89 30       	cpi	r24, 0x09	; 9
 492:	91 05       	cpc	r25, r1
 494:	09 f4       	brne	.+2      	; 0x498 <DIO_u8SetPinDir+0x36>
 496:	4a c0       	rjmp	.+148    	; 0x52c <DIO_u8SetPinDir+0xca>
 498:	2d 81       	ldd	r18, Y+5	; 0x05
 49a:	3e 81       	ldd	r19, Y+6	; 0x06
 49c:	2a 30       	cpi	r18, 0x0A	; 10
 49e:	31 05       	cpc	r19, r1
 4a0:	34 f4       	brge	.+12     	; 0x4ae <DIO_u8SetPinDir+0x4c>
 4a2:	8d 81       	ldd	r24, Y+5	; 0x05
 4a4:	9e 81       	ldd	r25, Y+6	; 0x06
 4a6:	88 30       	cpi	r24, 0x08	; 8
 4a8:	91 05       	cpc	r25, r1
 4aa:	71 f0       	breq	.+28     	; 0x4c8 <DIO_u8SetPinDir+0x66>
 4ac:	d5 c0       	rjmp	.+426    	; 0x658 <DIO_u8SetPinDir+0x1f6>
 4ae:	2d 81       	ldd	r18, Y+5	; 0x05
 4b0:	3e 81       	ldd	r19, Y+6	; 0x06
 4b2:	2a 30       	cpi	r18, 0x0A	; 10
 4b4:	31 05       	cpc	r19, r1
 4b6:	09 f4       	brne	.+2      	; 0x4ba <DIO_u8SetPinDir+0x58>
 4b8:	6b c0       	rjmp	.+214    	; 0x590 <DIO_u8SetPinDir+0x12e>
 4ba:	8d 81       	ldd	r24, Y+5	; 0x05
 4bc:	9e 81       	ldd	r25, Y+6	; 0x06
 4be:	8b 30       	cpi	r24, 0x0B	; 11
 4c0:	91 05       	cpc	r25, r1
 4c2:	09 f4       	brne	.+2      	; 0x4c6 <DIO_u8SetPinDir+0x64>
 4c4:	97 c0       	rjmp	.+302    	; 0x5f4 <DIO_u8SetPinDir+0x192>
 4c6:	c8 c0       	rjmp	.+400    	; 0x658 <DIO_u8SetPinDir+0x1f6>
		{
			case u8_DIO_PORTA: if(u8_PinDir ==u8_DIO_OUTPUT_PIN)
 4c8:	8c 81       	ldd	r24, Y+4	; 0x04
 4ca:	81 30       	cpi	r24, 0x01	; 1
 4cc:	a1 f4       	brne	.+40     	; 0x4f6 <DIO_u8SetPinDir+0x94>
							   {
									SET_BIT(Ru8_DDRA,u8_PinNum) ;
 4ce:	aa e3       	ldi	r26, 0x3A	; 58
 4d0:	b0 e0       	ldi	r27, 0x00	; 0
 4d2:	ea e3       	ldi	r30, 0x3A	; 58
 4d4:	f0 e0       	ldi	r31, 0x00	; 0
 4d6:	80 81       	ld	r24, Z
 4d8:	48 2f       	mov	r20, r24
 4da:	8b 81       	ldd	r24, Y+3	; 0x03
 4dc:	28 2f       	mov	r18, r24
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	02 2e       	mov	r0, r18
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <DIO_u8SetPinDir+0x8a>
 4e8:	88 0f       	add	r24, r24
 4ea:	99 1f       	adc	r25, r25
 4ec:	0a 94       	dec	r0
 4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <DIO_u8SetPinDir+0x86>
 4f0:	84 2b       	or	r24, r20
 4f2:	8c 93       	st	X, r24
 4f4:	b6 c0       	rjmp	.+364    	; 0x662 <DIO_u8SetPinDir+0x200>
							   }
							   else if(u8_PinDir ==u8_DIO_INPUT_PIN)
 4f6:	8c 81       	ldd	r24, Y+4	; 0x04
 4f8:	88 23       	and	r24, r24
 4fa:	a9 f4       	brne	.+42     	; 0x526 <DIO_u8SetPinDir+0xc4>
							   {
									CLR_BIT(Ru8_DDRA,u8_PinNum) ;
 4fc:	aa e3       	ldi	r26, 0x3A	; 58
 4fe:	b0 e0       	ldi	r27, 0x00	; 0
 500:	ea e3       	ldi	r30, 0x3A	; 58
 502:	f0 e0       	ldi	r31, 0x00	; 0
 504:	80 81       	ld	r24, Z
 506:	48 2f       	mov	r20, r24
 508:	8b 81       	ldd	r24, Y+3	; 0x03
 50a:	28 2f       	mov	r18, r24
 50c:	30 e0       	ldi	r19, 0x00	; 0
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	02 2e       	mov	r0, r18
 514:	02 c0       	rjmp	.+4      	; 0x51a <DIO_u8SetPinDir+0xb8>
 516:	88 0f       	add	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	0a 94       	dec	r0
 51c:	e2 f7       	brpl	.-8      	; 0x516 <DIO_u8SetPinDir+0xb4>
 51e:	80 95       	com	r24
 520:	84 23       	and	r24, r20
 522:	8c 93       	st	X, r24
 524:	9e c0       	rjmp	.+316    	; 0x662 <DIO_u8SetPinDir+0x200>
							   }
							   else 
							   {
									u8_ErrorState = u8_DIO_NOK ; 
 526:	83 e0       	ldi	r24, 0x03	; 3
 528:	89 83       	std	Y+1, r24	; 0x01
 52a:	9b c0       	rjmp	.+310    	; 0x662 <DIO_u8SetPinDir+0x200>
							   }
							   break;
	
			case u8_DIO_PORTB: if(u8_PinDir ==u8_DIO_OUTPUT_PIN)
 52c:	8c 81       	ldd	r24, Y+4	; 0x04
 52e:	81 30       	cpi	r24, 0x01	; 1
 530:	a1 f4       	brne	.+40     	; 0x55a <DIO_u8SetPinDir+0xf8>
							   {
									SET_BIT(Ru8_DDRB,u8_PinNum) ;
 532:	a7 e3       	ldi	r26, 0x37	; 55
 534:	b0 e0       	ldi	r27, 0x00	; 0
 536:	e7 e3       	ldi	r30, 0x37	; 55
 538:	f0 e0       	ldi	r31, 0x00	; 0
 53a:	80 81       	ld	r24, Z
 53c:	48 2f       	mov	r20, r24
 53e:	8b 81       	ldd	r24, Y+3	; 0x03
 540:	28 2f       	mov	r18, r24
 542:	30 e0       	ldi	r19, 0x00	; 0
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	02 2e       	mov	r0, r18
 54a:	02 c0       	rjmp	.+4      	; 0x550 <DIO_u8SetPinDir+0xee>
 54c:	88 0f       	add	r24, r24
 54e:	99 1f       	adc	r25, r25
 550:	0a 94       	dec	r0
 552:	e2 f7       	brpl	.-8      	; 0x54c <DIO_u8SetPinDir+0xea>
 554:	84 2b       	or	r24, r20
 556:	8c 93       	st	X, r24
 558:	84 c0       	rjmp	.+264    	; 0x662 <DIO_u8SetPinDir+0x200>
							   }
							   else if(u8_PinDir ==u8_DIO_INPUT_PIN)
 55a:	8c 81       	ldd	r24, Y+4	; 0x04
 55c:	88 23       	and	r24, r24
 55e:	a9 f4       	brne	.+42     	; 0x58a <DIO_u8SetPinDir+0x128>
							   {
									CLR_BIT(Ru8_DDRB,u8_PinNum) ;
 560:	a7 e3       	ldi	r26, 0x37	; 55
 562:	b0 e0       	ldi	r27, 0x00	; 0
 564:	e7 e3       	ldi	r30, 0x37	; 55
 566:	f0 e0       	ldi	r31, 0x00	; 0
 568:	80 81       	ld	r24, Z
 56a:	48 2f       	mov	r20, r24
 56c:	8b 81       	ldd	r24, Y+3	; 0x03
 56e:	28 2f       	mov	r18, r24
 570:	30 e0       	ldi	r19, 0x00	; 0
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	02 2e       	mov	r0, r18
 578:	02 c0       	rjmp	.+4      	; 0x57e <DIO_u8SetPinDir+0x11c>
 57a:	88 0f       	add	r24, r24
 57c:	99 1f       	adc	r25, r25
 57e:	0a 94       	dec	r0
 580:	e2 f7       	brpl	.-8      	; 0x57a <DIO_u8SetPinDir+0x118>
 582:	80 95       	com	r24
 584:	84 23       	and	r24, r20
 586:	8c 93       	st	X, r24
 588:	6c c0       	rjmp	.+216    	; 0x662 <DIO_u8SetPinDir+0x200>
							   }
							   else 
							   {
									u8_ErrorState = u8_DIO_NOK ; 
 58a:	83 e0       	ldi	r24, 0x03	; 3
 58c:	89 83       	std	Y+1, r24	; 0x01
 58e:	69 c0       	rjmp	.+210    	; 0x662 <DIO_u8SetPinDir+0x200>
							   }
							   break;
							   
			case u8_DIO_PORTC:  if(u8_PinDir ==u8_DIO_OUTPUT_PIN)
 590:	8c 81       	ldd	r24, Y+4	; 0x04
 592:	81 30       	cpi	r24, 0x01	; 1
 594:	a1 f4       	brne	.+40     	; 0x5be <DIO_u8SetPinDir+0x15c>
							    {
									SET_BIT(Ru8_DDRC,u8_PinNum) ;
 596:	a4 e3       	ldi	r26, 0x34	; 52
 598:	b0 e0       	ldi	r27, 0x00	; 0
 59a:	e4 e3       	ldi	r30, 0x34	; 52
 59c:	f0 e0       	ldi	r31, 0x00	; 0
 59e:	80 81       	ld	r24, Z
 5a0:	48 2f       	mov	r20, r24
 5a2:	8b 81       	ldd	r24, Y+3	; 0x03
 5a4:	28 2f       	mov	r18, r24
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	02 2e       	mov	r0, r18
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <DIO_u8SetPinDir+0x152>
 5b0:	88 0f       	add	r24, r24
 5b2:	99 1f       	adc	r25, r25
 5b4:	0a 94       	dec	r0
 5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <DIO_u8SetPinDir+0x14e>
 5b8:	84 2b       	or	r24, r20
 5ba:	8c 93       	st	X, r24
 5bc:	52 c0       	rjmp	.+164    	; 0x662 <DIO_u8SetPinDir+0x200>
								}
								else if(u8_PinDir ==u8_DIO_INPUT_PIN)
 5be:	8c 81       	ldd	r24, Y+4	; 0x04
 5c0:	88 23       	and	r24, r24
 5c2:	a9 f4       	brne	.+42     	; 0x5ee <DIO_u8SetPinDir+0x18c>
								{
									CLR_BIT(Ru8_DDRC,u8_PinNum) ;
 5c4:	a4 e3       	ldi	r26, 0x34	; 52
 5c6:	b0 e0       	ldi	r27, 0x00	; 0
 5c8:	e4 e3       	ldi	r30, 0x34	; 52
 5ca:	f0 e0       	ldi	r31, 0x00	; 0
 5cc:	80 81       	ld	r24, Z
 5ce:	48 2f       	mov	r20, r24
 5d0:	8b 81       	ldd	r24, Y+3	; 0x03
 5d2:	28 2f       	mov	r18, r24
 5d4:	30 e0       	ldi	r19, 0x00	; 0
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	02 2e       	mov	r0, r18
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <DIO_u8SetPinDir+0x180>
 5de:	88 0f       	add	r24, r24
 5e0:	99 1f       	adc	r25, r25
 5e2:	0a 94       	dec	r0
 5e4:	e2 f7       	brpl	.-8      	; 0x5de <DIO_u8SetPinDir+0x17c>
 5e6:	80 95       	com	r24
 5e8:	84 23       	and	r24, r20
 5ea:	8c 93       	st	X, r24
 5ec:	3a c0       	rjmp	.+116    	; 0x662 <DIO_u8SetPinDir+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
 5ee:	83 e0       	ldi	r24, 0x03	; 3
 5f0:	89 83       	std	Y+1, r24	; 0x01
 5f2:	37 c0       	rjmp	.+110    	; 0x662 <DIO_u8SetPinDir+0x200>
								}
								break;
		
			case u8_DIO_PORTD: if(u8_PinDir ==u8_DIO_OUTPUT_PIN)
 5f4:	8c 81       	ldd	r24, Y+4	; 0x04
 5f6:	81 30       	cpi	r24, 0x01	; 1
 5f8:	a1 f4       	brne	.+40     	; 0x622 <DIO_u8SetPinDir+0x1c0>
							    {
									SET_BIT(Ru8_DDRD,u8_PinNum) ;
 5fa:	a1 e3       	ldi	r26, 0x31	; 49
 5fc:	b0 e0       	ldi	r27, 0x00	; 0
 5fe:	e1 e3       	ldi	r30, 0x31	; 49
 600:	f0 e0       	ldi	r31, 0x00	; 0
 602:	80 81       	ld	r24, Z
 604:	48 2f       	mov	r20, r24
 606:	8b 81       	ldd	r24, Y+3	; 0x03
 608:	28 2f       	mov	r18, r24
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	02 2e       	mov	r0, r18
 612:	02 c0       	rjmp	.+4      	; 0x618 <DIO_u8SetPinDir+0x1b6>
 614:	88 0f       	add	r24, r24
 616:	99 1f       	adc	r25, r25
 618:	0a 94       	dec	r0
 61a:	e2 f7       	brpl	.-8      	; 0x614 <DIO_u8SetPinDir+0x1b2>
 61c:	84 2b       	or	r24, r20
 61e:	8c 93       	st	X, r24
 620:	20 c0       	rjmp	.+64     	; 0x662 <DIO_u8SetPinDir+0x200>
								}
								else if(u8_PinDir ==u8_DIO_INPUT_PIN)
 622:	8c 81       	ldd	r24, Y+4	; 0x04
 624:	88 23       	and	r24, r24
 626:	a9 f4       	brne	.+42     	; 0x652 <DIO_u8SetPinDir+0x1f0>
								{
									CLR_BIT(Ru8_DDRD,u8_PinNum) ;
 628:	a1 e3       	ldi	r26, 0x31	; 49
 62a:	b0 e0       	ldi	r27, 0x00	; 0
 62c:	e1 e3       	ldi	r30, 0x31	; 49
 62e:	f0 e0       	ldi	r31, 0x00	; 0
 630:	80 81       	ld	r24, Z
 632:	48 2f       	mov	r20, r24
 634:	8b 81       	ldd	r24, Y+3	; 0x03
 636:	28 2f       	mov	r18, r24
 638:	30 e0       	ldi	r19, 0x00	; 0
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	02 2e       	mov	r0, r18
 640:	02 c0       	rjmp	.+4      	; 0x646 <DIO_u8SetPinDir+0x1e4>
 642:	88 0f       	add	r24, r24
 644:	99 1f       	adc	r25, r25
 646:	0a 94       	dec	r0
 648:	e2 f7       	brpl	.-8      	; 0x642 <DIO_u8SetPinDir+0x1e0>
 64a:	80 95       	com	r24
 64c:	84 23       	and	r24, r20
 64e:	8c 93       	st	X, r24
 650:	08 c0       	rjmp	.+16     	; 0x662 <DIO_u8SetPinDir+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
 652:	83 e0       	ldi	r24, 0x03	; 3
 654:	89 83       	std	Y+1, r24	; 0x01
 656:	05 c0       	rjmp	.+10     	; 0x662 <DIO_u8SetPinDir+0x200>
								}
								break;
			
			default          : u8_ErrorState = u8_DIO_NOK ; 
 658:	83 e0       	ldi	r24, 0x03	; 3
 65a:	89 83       	std	Y+1, r24	; 0x01
 65c:	02 c0       	rjmp	.+4      	; 0x662 <DIO_u8SetPinDir+0x200>
								break ; 
		}
	}
	else 
	{
		u8_ErrorState = u8_DIO_NOK ; 
 65e:	83 e0       	ldi	r24, 0x03	; 3
 660:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_ErrorState  ; 
 662:	89 81       	ldd	r24, Y+1	; 0x01
}
 664:	26 96       	adiw	r28, 0x06	; 6
 666:	0f b6       	in	r0, 0x3f	; 63
 668:	f8 94       	cli
 66a:	de bf       	out	0x3e, r29	; 62
 66c:	0f be       	out	0x3f, r0	; 63
 66e:	cd bf       	out	0x3d, r28	; 61
 670:	cf 91       	pop	r28
 672:	df 91       	pop	r29
 674:	08 95       	ret

00000676 <DIO_u8SetPortVal>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8SetPortVal(uint8_t u8_PortNum,uint8_t u8_PortState)
{
 676:	df 93       	push	r29
 678:	cf 93       	push	r28
 67a:	00 d0       	rcall	.+0      	; 0x67c <DIO_u8SetPortVal+0x6>
 67c:	00 d0       	rcall	.+0      	; 0x67e <DIO_u8SetPortVal+0x8>
 67e:	0f 92       	push	r0
 680:	cd b7       	in	r28, 0x3d	; 61
 682:	de b7       	in	r29, 0x3e	; 62
 684:	8a 83       	std	Y+2, r24	; 0x02
 686:	6b 83       	std	Y+3, r22	; 0x03
		uint8_t u8_ErrorState = u8_DIO_OK;
 688:	82 e0       	ldi	r24, 0x02	; 2
 68a:	89 83       	std	Y+1, r24	; 0x01

		switch(u8_PortNum)
 68c:	8a 81       	ldd	r24, Y+2	; 0x02
 68e:	28 2f       	mov	r18, r24
 690:	30 e0       	ldi	r19, 0x00	; 0
 692:	3d 83       	std	Y+5, r19	; 0x05
 694:	2c 83       	std	Y+4, r18	; 0x04
 696:	8c 81       	ldd	r24, Y+4	; 0x04
 698:	9d 81       	ldd	r25, Y+5	; 0x05
 69a:	89 30       	cpi	r24, 0x09	; 9
 69c:	91 05       	cpc	r25, r1
 69e:	d9 f0       	breq	.+54     	; 0x6d6 <DIO_u8SetPortVal+0x60>
 6a0:	2c 81       	ldd	r18, Y+4	; 0x04
 6a2:	3d 81       	ldd	r19, Y+5	; 0x05
 6a4:	2a 30       	cpi	r18, 0x0A	; 10
 6a6:	31 05       	cpc	r19, r1
 6a8:	34 f4       	brge	.+12     	; 0x6b6 <DIO_u8SetPortVal+0x40>
 6aa:	8c 81       	ldd	r24, Y+4	; 0x04
 6ac:	9d 81       	ldd	r25, Y+5	; 0x05
 6ae:	88 30       	cpi	r24, 0x08	; 8
 6b0:	91 05       	cpc	r25, r1
 6b2:	61 f0       	breq	.+24     	; 0x6cc <DIO_u8SetPortVal+0x56>
 6b4:	1f c0       	rjmp	.+62     	; 0x6f4 <DIO_u8SetPortVal+0x7e>
 6b6:	2c 81       	ldd	r18, Y+4	; 0x04
 6b8:	3d 81       	ldd	r19, Y+5	; 0x05
 6ba:	2a 30       	cpi	r18, 0x0A	; 10
 6bc:	31 05       	cpc	r19, r1
 6be:	81 f0       	breq	.+32     	; 0x6e0 <DIO_u8SetPortVal+0x6a>
 6c0:	8c 81       	ldd	r24, Y+4	; 0x04
 6c2:	9d 81       	ldd	r25, Y+5	; 0x05
 6c4:	8b 30       	cpi	r24, 0x0B	; 11
 6c6:	91 05       	cpc	r25, r1
 6c8:	81 f0       	breq	.+32     	; 0x6ea <DIO_u8SetPortVal+0x74>
 6ca:	14 c0       	rjmp	.+40     	; 0x6f4 <DIO_u8SetPortVal+0x7e>
		{
			case u8_DIO_PORTA: Ru8_PORTA = u8_PortState ;  break ;			   
 6cc:	eb e3       	ldi	r30, 0x3B	; 59
 6ce:	f0 e0       	ldi	r31, 0x00	; 0
 6d0:	8b 81       	ldd	r24, Y+3	; 0x03
 6d2:	80 83       	st	Z, r24
 6d4:	11 c0       	rjmp	.+34     	; 0x6f8 <DIO_u8SetPortVal+0x82>
			case u8_DIO_PORTB: Ru8_PORTB = u8_PortState ;  break ;	
 6d6:	e8 e3       	ldi	r30, 0x38	; 56
 6d8:	f0 e0       	ldi	r31, 0x00	; 0
 6da:	8b 81       	ldd	r24, Y+3	; 0x03
 6dc:	80 83       	st	Z, r24
 6de:	0c c0       	rjmp	.+24     	; 0x6f8 <DIO_u8SetPortVal+0x82>
			case u8_DIO_PORTC: Ru8_PORTC = u8_PortState ;  break ;	
 6e0:	e5 e3       	ldi	r30, 0x35	; 53
 6e2:	f0 e0       	ldi	r31, 0x00	; 0
 6e4:	8b 81       	ldd	r24, Y+3	; 0x03
 6e6:	80 83       	st	Z, r24
 6e8:	07 c0       	rjmp	.+14     	; 0x6f8 <DIO_u8SetPortVal+0x82>
			case u8_DIO_PORTD: Ru8_PORTD = u8_PortState ;  break ;	
 6ea:	e2 e3       	ldi	r30, 0x32	; 50
 6ec:	f0 e0       	ldi	r31, 0x00	; 0
 6ee:	8b 81       	ldd	r24, Y+3	; 0x03
 6f0:	80 83       	st	Z, r24
 6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <DIO_u8SetPortVal+0x82>
			default          : u8_ErrorState = u8_DIO_NOK; break ; 
 6f4:	83 e0       	ldi	r24, 0x03	; 3
 6f6:	89 83       	std	Y+1, r24	; 0x01
		}
		
	return u8_ErrorState  ; 
 6f8:	89 81       	ldd	r24, Y+1	; 0x01
}
 6fa:	0f 90       	pop	r0
 6fc:	0f 90       	pop	r0
 6fe:	0f 90       	pop	r0
 700:	0f 90       	pop	r0
 702:	0f 90       	pop	r0
 704:	cf 91       	pop	r28
 706:	df 91       	pop	r29
 708:	08 95       	ret

0000070a <DIO_u8SetPortDir>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8SetPortDir(uint8_t u8_PortNum,uint8_t u8_PortDir)
{
 70a:	df 93       	push	r29
 70c:	cf 93       	push	r28
 70e:	00 d0       	rcall	.+0      	; 0x710 <DIO_u8SetPortDir+0x6>
 710:	00 d0       	rcall	.+0      	; 0x712 <DIO_u8SetPortDir+0x8>
 712:	0f 92       	push	r0
 714:	cd b7       	in	r28, 0x3d	; 61
 716:	de b7       	in	r29, 0x3e	; 62
 718:	8a 83       	std	Y+2, r24	; 0x02
 71a:	6b 83       	std	Y+3, r22	; 0x03
		uint8_t u8_ErrorState = u8_DIO_OK;
 71c:	82 e0       	ldi	r24, 0x02	; 2
 71e:	89 83       	std	Y+1, r24	; 0x01
		switch(u8_PortNum)
 720:	8a 81       	ldd	r24, Y+2	; 0x02
 722:	28 2f       	mov	r18, r24
 724:	30 e0       	ldi	r19, 0x00	; 0
 726:	3d 83       	std	Y+5, r19	; 0x05
 728:	2c 83       	std	Y+4, r18	; 0x04
 72a:	8c 81       	ldd	r24, Y+4	; 0x04
 72c:	9d 81       	ldd	r25, Y+5	; 0x05
 72e:	89 30       	cpi	r24, 0x09	; 9
 730:	91 05       	cpc	r25, r1
 732:	d9 f0       	breq	.+54     	; 0x76a <DIO_u8SetPortDir+0x60>
 734:	2c 81       	ldd	r18, Y+4	; 0x04
 736:	3d 81       	ldd	r19, Y+5	; 0x05
 738:	2a 30       	cpi	r18, 0x0A	; 10
 73a:	31 05       	cpc	r19, r1
 73c:	34 f4       	brge	.+12     	; 0x74a <DIO_u8SetPortDir+0x40>
 73e:	8c 81       	ldd	r24, Y+4	; 0x04
 740:	9d 81       	ldd	r25, Y+5	; 0x05
 742:	88 30       	cpi	r24, 0x08	; 8
 744:	91 05       	cpc	r25, r1
 746:	61 f0       	breq	.+24     	; 0x760 <DIO_u8SetPortDir+0x56>
 748:	1f c0       	rjmp	.+62     	; 0x788 <DIO_u8SetPortDir+0x7e>
 74a:	2c 81       	ldd	r18, Y+4	; 0x04
 74c:	3d 81       	ldd	r19, Y+5	; 0x05
 74e:	2a 30       	cpi	r18, 0x0A	; 10
 750:	31 05       	cpc	r19, r1
 752:	81 f0       	breq	.+32     	; 0x774 <DIO_u8SetPortDir+0x6a>
 754:	8c 81       	ldd	r24, Y+4	; 0x04
 756:	9d 81       	ldd	r25, Y+5	; 0x05
 758:	8b 30       	cpi	r24, 0x0B	; 11
 75a:	91 05       	cpc	r25, r1
 75c:	81 f0       	breq	.+32     	; 0x77e <DIO_u8SetPortDir+0x74>
 75e:	14 c0       	rjmp	.+40     	; 0x788 <DIO_u8SetPortDir+0x7e>
		{
			case u8_DIO_PORTA: Ru8_DDRA = u8_PortDir ;     break ;			   
 760:	ea e3       	ldi	r30, 0x3A	; 58
 762:	f0 e0       	ldi	r31, 0x00	; 0
 764:	8b 81       	ldd	r24, Y+3	; 0x03
 766:	80 83       	st	Z, r24
 768:	11 c0       	rjmp	.+34     	; 0x78c <DIO_u8SetPortDir+0x82>
			case u8_DIO_PORTB: Ru8_DDRB = u8_PortDir ;     break ;	
 76a:	e7 e3       	ldi	r30, 0x37	; 55
 76c:	f0 e0       	ldi	r31, 0x00	; 0
 76e:	8b 81       	ldd	r24, Y+3	; 0x03
 770:	80 83       	st	Z, r24
 772:	0c c0       	rjmp	.+24     	; 0x78c <DIO_u8SetPortDir+0x82>
			case u8_DIO_PORTC: Ru8_DDRC = u8_PortDir ;     break ;	
 774:	e4 e3       	ldi	r30, 0x34	; 52
 776:	f0 e0       	ldi	r31, 0x00	; 0
 778:	8b 81       	ldd	r24, Y+3	; 0x03
 77a:	80 83       	st	Z, r24
 77c:	07 c0       	rjmp	.+14     	; 0x78c <DIO_u8SetPortDir+0x82>
			case u8_DIO_PORTD: Ru8_DDRD = u8_PortDir ;     break ;	
 77e:	e1 e3       	ldi	r30, 0x31	; 49
 780:	f0 e0       	ldi	r31, 0x00	; 0
 782:	8b 81       	ldd	r24, Y+3	; 0x03
 784:	80 83       	st	Z, r24
 786:	02 c0       	rjmp	.+4      	; 0x78c <DIO_u8SetPortDir+0x82>
			default          : u8_ErrorState = u8_DIO_NOK; break ; 
 788:	83 e0       	ldi	r24, 0x03	; 3
 78a:	89 83       	std	Y+1, r24	; 0x01
		}
		
	return u8_ErrorState  ; 
 78c:	89 81       	ldd	r24, Y+1	; 0x01
}
 78e:	0f 90       	pop	r0
 790:	0f 90       	pop	r0
 792:	0f 90       	pop	r0
 794:	0f 90       	pop	r0
 796:	0f 90       	pop	r0
 798:	cf 91       	pop	r28
 79a:	df 91       	pop	r29
 79c:	08 95       	ret

0000079e <DIO_u8GetPinVal>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8GetPinVal(uint8_t u8_PortNum,uint8_t u8_PinNum,uint8_t* pu8_ReturnedPinVal)      
{
 79e:	df 93       	push	r29
 7a0:	cf 93       	push	r28
 7a2:	cd b7       	in	r28, 0x3d	; 61
 7a4:	de b7       	in	r29, 0x3e	; 62
 7a6:	27 97       	sbiw	r28, 0x07	; 7
 7a8:	0f b6       	in	r0, 0x3f	; 63
 7aa:	f8 94       	cli
 7ac:	de bf       	out	0x3e, r29	; 62
 7ae:	0f be       	out	0x3f, r0	; 63
 7b0:	cd bf       	out	0x3d, r28	; 61
 7b2:	8a 83       	std	Y+2, r24	; 0x02
 7b4:	6b 83       	std	Y+3, r22	; 0x03
 7b6:	5d 83       	std	Y+5, r21	; 0x05
 7b8:	4c 83       	std	Y+4, r20	; 0x04
		uint8_t u8_ErrorState = u8_DIO_OK;
 7ba:	82 e0       	ldi	r24, 0x02	; 2
 7bc:	89 83       	std	Y+1, r24	; 0x01
		if(u8_PinNum>=u8_DIO_PIN0 && u8_PinNum<=u8_DIO_PIN7)
 7be:	8b 81       	ldd	r24, Y+3	; 0x03
 7c0:	88 30       	cpi	r24, 0x08	; 8
 7c2:	08 f0       	brcs	.+2      	; 0x7c6 <DIO_u8GetPinVal+0x28>
 7c4:	74 c0       	rjmp	.+232    	; 0x8ae <__stack+0x4f>
		{
			switch(u8_PortNum)
 7c6:	8a 81       	ldd	r24, Y+2	; 0x02
 7c8:	28 2f       	mov	r18, r24
 7ca:	30 e0       	ldi	r19, 0x00	; 0
 7cc:	3f 83       	std	Y+7, r19	; 0x07
 7ce:	2e 83       	std	Y+6, r18	; 0x06
 7d0:	4e 81       	ldd	r20, Y+6	; 0x06
 7d2:	5f 81       	ldd	r21, Y+7	; 0x07
 7d4:	49 30       	cpi	r20, 0x09	; 9
 7d6:	51 05       	cpc	r21, r1
 7d8:	59 f1       	breq	.+86     	; 0x830 <DIO_u8GetPinVal+0x92>
 7da:	8e 81       	ldd	r24, Y+6	; 0x06
 7dc:	9f 81       	ldd	r25, Y+7	; 0x07
 7de:	8a 30       	cpi	r24, 0x0A	; 10
 7e0:	91 05       	cpc	r25, r1
 7e2:	34 f4       	brge	.+12     	; 0x7f0 <DIO_u8GetPinVal+0x52>
 7e4:	2e 81       	ldd	r18, Y+6	; 0x06
 7e6:	3f 81       	ldd	r19, Y+7	; 0x07
 7e8:	28 30       	cpi	r18, 0x08	; 8
 7ea:	31 05       	cpc	r19, r1
 7ec:	69 f0       	breq	.+26     	; 0x808 <DIO_u8GetPinVal+0x6a>
 7ee:	5c c0       	rjmp	.+184    	; 0x8a8 <__stack+0x49>
 7f0:	4e 81       	ldd	r20, Y+6	; 0x06
 7f2:	5f 81       	ldd	r21, Y+7	; 0x07
 7f4:	4a 30       	cpi	r20, 0x0A	; 10
 7f6:	51 05       	cpc	r21, r1
 7f8:	79 f1       	breq	.+94     	; 0x858 <DIO_u8GetPinVal+0xba>
 7fa:	8e 81       	ldd	r24, Y+6	; 0x06
 7fc:	9f 81       	ldd	r25, Y+7	; 0x07
 7fe:	8b 30       	cpi	r24, 0x0B	; 11
 800:	91 05       	cpc	r25, r1
 802:	09 f4       	brne	.+2      	; 0x806 <DIO_u8GetPinVal+0x68>
 804:	3d c0       	rjmp	.+122    	; 0x880 <__stack+0x21>
 806:	50 c0       	rjmp	.+160    	; 0x8a8 <__stack+0x49>
			{
				case u8_DIO_PORTA: (*pu8_ReturnedPinVal) = GET_BIT(Ru8_PINA,u8_PinNum)  ; break ;
 808:	e9 e3       	ldi	r30, 0x39	; 57
 80a:	f0 e0       	ldi	r31, 0x00	; 0
 80c:	80 81       	ld	r24, Z
 80e:	28 2f       	mov	r18, r24
 810:	30 e0       	ldi	r19, 0x00	; 0
 812:	8b 81       	ldd	r24, Y+3	; 0x03
 814:	88 2f       	mov	r24, r24
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	a9 01       	movw	r20, r18
 81a:	02 c0       	rjmp	.+4      	; 0x820 <DIO_u8GetPinVal+0x82>
 81c:	55 95       	asr	r21
 81e:	47 95       	ror	r20
 820:	8a 95       	dec	r24
 822:	e2 f7       	brpl	.-8      	; 0x81c <DIO_u8GetPinVal+0x7e>
 824:	ca 01       	movw	r24, r20
 826:	81 70       	andi	r24, 0x01	; 1
 828:	ec 81       	ldd	r30, Y+4	; 0x04
 82a:	fd 81       	ldd	r31, Y+5	; 0x05
 82c:	80 83       	st	Z, r24
 82e:	41 c0       	rjmp	.+130    	; 0x8b2 <__stack+0x53>
				case u8_DIO_PORTB: (*pu8_ReturnedPinVal) = GET_BIT(Ru8_PINB,u8_PinNum)  ; break ;
 830:	e6 e3       	ldi	r30, 0x36	; 54
 832:	f0 e0       	ldi	r31, 0x00	; 0
 834:	80 81       	ld	r24, Z
 836:	28 2f       	mov	r18, r24
 838:	30 e0       	ldi	r19, 0x00	; 0
 83a:	8b 81       	ldd	r24, Y+3	; 0x03
 83c:	88 2f       	mov	r24, r24
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	a9 01       	movw	r20, r18
 842:	02 c0       	rjmp	.+4      	; 0x848 <DIO_u8GetPinVal+0xaa>
 844:	55 95       	asr	r21
 846:	47 95       	ror	r20
 848:	8a 95       	dec	r24
 84a:	e2 f7       	brpl	.-8      	; 0x844 <DIO_u8GetPinVal+0xa6>
 84c:	ca 01       	movw	r24, r20
 84e:	81 70       	andi	r24, 0x01	; 1
 850:	ec 81       	ldd	r30, Y+4	; 0x04
 852:	fd 81       	ldd	r31, Y+5	; 0x05
 854:	80 83       	st	Z, r24
 856:	2d c0       	rjmp	.+90     	; 0x8b2 <__stack+0x53>
				case u8_DIO_PORTC: (*pu8_ReturnedPinVal) = GET_BIT(Ru8_PINC,u8_PinNum)  ; break ;
 858:	e3 e3       	ldi	r30, 0x33	; 51
 85a:	f0 e0       	ldi	r31, 0x00	; 0
 85c:	80 81       	ld	r24, Z
 85e:	28 2f       	mov	r18, r24
 860:	30 e0       	ldi	r19, 0x00	; 0
 862:	8b 81       	ldd	r24, Y+3	; 0x03
 864:	88 2f       	mov	r24, r24
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	a9 01       	movw	r20, r18
 86a:	02 c0       	rjmp	.+4      	; 0x870 <__stack+0x11>
 86c:	55 95       	asr	r21
 86e:	47 95       	ror	r20
 870:	8a 95       	dec	r24
 872:	e2 f7       	brpl	.-8      	; 0x86c <__stack+0xd>
 874:	ca 01       	movw	r24, r20
 876:	81 70       	andi	r24, 0x01	; 1
 878:	ec 81       	ldd	r30, Y+4	; 0x04
 87a:	fd 81       	ldd	r31, Y+5	; 0x05
 87c:	80 83       	st	Z, r24
 87e:	19 c0       	rjmp	.+50     	; 0x8b2 <__stack+0x53>
				case u8_DIO_PORTD: (*pu8_ReturnedPinVal) = GET_BIT(Ru8_PIND,u8_PinNum)  ; break ;
 880:	e0 e3       	ldi	r30, 0x30	; 48
 882:	f0 e0       	ldi	r31, 0x00	; 0
 884:	80 81       	ld	r24, Z
 886:	28 2f       	mov	r18, r24
 888:	30 e0       	ldi	r19, 0x00	; 0
 88a:	8b 81       	ldd	r24, Y+3	; 0x03
 88c:	88 2f       	mov	r24, r24
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	a9 01       	movw	r20, r18
 892:	02 c0       	rjmp	.+4      	; 0x898 <__stack+0x39>
 894:	55 95       	asr	r21
 896:	47 95       	ror	r20
 898:	8a 95       	dec	r24
 89a:	e2 f7       	brpl	.-8      	; 0x894 <__stack+0x35>
 89c:	ca 01       	movw	r24, r20
 89e:	81 70       	andi	r24, 0x01	; 1
 8a0:	ec 81       	ldd	r30, Y+4	; 0x04
 8a2:	fd 81       	ldd	r31, Y+5	; 0x05
 8a4:	80 83       	st	Z, r24
 8a6:	05 c0       	rjmp	.+10     	; 0x8b2 <__stack+0x53>
				default          : u8_ErrorState = u8_DIO_NOK; 							 break ; 
 8a8:	83 e0       	ldi	r24, 0x03	; 3
 8aa:	89 83       	std	Y+1, r24	; 0x01
 8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <__stack+0x53>
			}
		}
		else 
		{
			u8_ErrorState = u8_DIO_NOK;
 8ae:	83 e0       	ldi	r24, 0x03	; 3
 8b0:	89 83       	std	Y+1, r24	; 0x01
		}
	return u8_ErrorState  ; 
 8b2:	89 81       	ldd	r24, Y+1	; 0x01
}
 8b4:	27 96       	adiw	r28, 0x07	; 7
 8b6:	0f b6       	in	r0, 0x3f	; 63
 8b8:	f8 94       	cli
 8ba:	de bf       	out	0x3e, r29	; 62
 8bc:	0f be       	out	0x3f, r0	; 63
 8be:	cd bf       	out	0x3d, r28	; 61
 8c0:	cf 91       	pop	r28
 8c2:	df 91       	pop	r29
 8c4:	08 95       	ret

000008c6 <DIO_u8GetPortVal>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8GetPortVal(uint8_t u8_PortNum,uint8_t* pu8_ReturnedPortVal)           
{
 8c6:	df 93       	push	r29
 8c8:	cf 93       	push	r28
 8ca:	00 d0       	rcall	.+0      	; 0x8cc <DIO_u8GetPortVal+0x6>
 8cc:	00 d0       	rcall	.+0      	; 0x8ce <DIO_u8GetPortVal+0x8>
 8ce:	00 d0       	rcall	.+0      	; 0x8d0 <DIO_u8GetPortVal+0xa>
 8d0:	cd b7       	in	r28, 0x3d	; 61
 8d2:	de b7       	in	r29, 0x3e	; 62
 8d4:	8a 83       	std	Y+2, r24	; 0x02
 8d6:	7c 83       	std	Y+4, r23	; 0x04
 8d8:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8_ErrorState = u8_DIO_OK;
 8da:	82 e0       	ldi	r24, 0x02	; 2
 8dc:	89 83       	std	Y+1, r24	; 0x01

	switch(u8_PortNum)
 8de:	8a 81       	ldd	r24, Y+2	; 0x02
 8e0:	28 2f       	mov	r18, r24
 8e2:	30 e0       	ldi	r19, 0x00	; 0
 8e4:	3e 83       	std	Y+6, r19	; 0x06
 8e6:	2d 83       	std	Y+5, r18	; 0x05
 8e8:	8d 81       	ldd	r24, Y+5	; 0x05
 8ea:	9e 81       	ldd	r25, Y+6	; 0x06
 8ec:	89 30       	cpi	r24, 0x09	; 9
 8ee:	91 05       	cpc	r25, r1
 8f0:	e9 f0       	breq	.+58     	; 0x92c <DIO_u8GetPortVal+0x66>
 8f2:	2d 81       	ldd	r18, Y+5	; 0x05
 8f4:	3e 81       	ldd	r19, Y+6	; 0x06
 8f6:	2a 30       	cpi	r18, 0x0A	; 10
 8f8:	31 05       	cpc	r19, r1
 8fa:	34 f4       	brge	.+12     	; 0x908 <DIO_u8GetPortVal+0x42>
 8fc:	8d 81       	ldd	r24, Y+5	; 0x05
 8fe:	9e 81       	ldd	r25, Y+6	; 0x06
 900:	88 30       	cpi	r24, 0x08	; 8
 902:	91 05       	cpc	r25, r1
 904:	61 f0       	breq	.+24     	; 0x91e <DIO_u8GetPortVal+0x58>
 906:	27 c0       	rjmp	.+78     	; 0x956 <DIO_u8GetPortVal+0x90>
 908:	2d 81       	ldd	r18, Y+5	; 0x05
 90a:	3e 81       	ldd	r19, Y+6	; 0x06
 90c:	2a 30       	cpi	r18, 0x0A	; 10
 90e:	31 05       	cpc	r19, r1
 910:	a1 f0       	breq	.+40     	; 0x93a <DIO_u8GetPortVal+0x74>
 912:	8d 81       	ldd	r24, Y+5	; 0x05
 914:	9e 81       	ldd	r25, Y+6	; 0x06
 916:	8b 30       	cpi	r24, 0x0B	; 11
 918:	91 05       	cpc	r25, r1
 91a:	b1 f0       	breq	.+44     	; 0x948 <DIO_u8GetPortVal+0x82>
 91c:	1c c0       	rjmp	.+56     	; 0x956 <DIO_u8GetPortVal+0x90>
	{
		case u8_DIO_PORTA: (*pu8_ReturnedPortVal) = Ru8_PINA ;  break ;
 91e:	e9 e3       	ldi	r30, 0x39	; 57
 920:	f0 e0       	ldi	r31, 0x00	; 0
 922:	80 81       	ld	r24, Z
 924:	eb 81       	ldd	r30, Y+3	; 0x03
 926:	fc 81       	ldd	r31, Y+4	; 0x04
 928:	80 83       	st	Z, r24
 92a:	17 c0       	rjmp	.+46     	; 0x95a <DIO_u8GetPortVal+0x94>
		case u8_DIO_PORTB: (*pu8_ReturnedPortVal) = Ru8_PINB ;  break ;
 92c:	e6 e3       	ldi	r30, 0x36	; 54
 92e:	f0 e0       	ldi	r31, 0x00	; 0
 930:	80 81       	ld	r24, Z
 932:	eb 81       	ldd	r30, Y+3	; 0x03
 934:	fc 81       	ldd	r31, Y+4	; 0x04
 936:	80 83       	st	Z, r24
 938:	10 c0       	rjmp	.+32     	; 0x95a <DIO_u8GetPortVal+0x94>
		case u8_DIO_PORTC: (*pu8_ReturnedPortVal) = Ru8_PINC ;  break ;
 93a:	e3 e3       	ldi	r30, 0x33	; 51
 93c:	f0 e0       	ldi	r31, 0x00	; 0
 93e:	80 81       	ld	r24, Z
 940:	eb 81       	ldd	r30, Y+3	; 0x03
 942:	fc 81       	ldd	r31, Y+4	; 0x04
 944:	80 83       	st	Z, r24
 946:	09 c0       	rjmp	.+18     	; 0x95a <DIO_u8GetPortVal+0x94>
		case u8_DIO_PORTD: (*pu8_ReturnedPortVal) = Ru8_PIND ;  break ;
 948:	e0 e3       	ldi	r30, 0x30	; 48
 94a:	f0 e0       	ldi	r31, 0x00	; 0
 94c:	80 81       	ld	r24, Z
 94e:	eb 81       	ldd	r30, Y+3	; 0x03
 950:	fc 81       	ldd	r31, Y+4	; 0x04
 952:	80 83       	st	Z, r24
 954:	02 c0       	rjmp	.+4      	; 0x95a <DIO_u8GetPortVal+0x94>
		default          :  u8_ErrorState = u8_DIO_NOK; 	    break ;
 956:	83 e0       	ldi	r24, 0x03	; 3
 958:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8_ErrorState  ; 
 95a:	89 81       	ldd	r24, Y+1	; 0x01
}
 95c:	26 96       	adiw	r28, 0x06	; 6
 95e:	0f b6       	in	r0, 0x3f	; 63
 960:	f8 94       	cli
 962:	de bf       	out	0x3e, r29	; 62
 964:	0f be       	out	0x3f, r0	; 63
 966:	cd bf       	out	0x3d, r28	; 61
 968:	cf 91       	pop	r28
 96a:	df 91       	pop	r29
 96c:	08 95       	ret

0000096e <DIO_u8TogPinVal>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8TogPinVal(uint8_t u8_PortNum,uint8_t u8_PinNum)           
{
 96e:	df 93       	push	r29
 970:	cf 93       	push	r28
 972:	00 d0       	rcall	.+0      	; 0x974 <DIO_u8TogPinVal+0x6>
 974:	00 d0       	rcall	.+0      	; 0x976 <DIO_u8TogPinVal+0x8>
 976:	0f 92       	push	r0
 978:	cd b7       	in	r28, 0x3d	; 61
 97a:	de b7       	in	r29, 0x3e	; 62
 97c:	8a 83       	std	Y+2, r24	; 0x02
 97e:	6b 83       	std	Y+3, r22	; 0x03
		uint8_t u8_ErrorState = u8_DIO_OK;
 980:	82 e0       	ldi	r24, 0x02	; 2
 982:	89 83       	std	Y+1, r24	; 0x01
		if(u8_PinNum>=u8_DIO_PIN0 && u8_PinNum<=u8_DIO_PIN7)
 984:	8b 81       	ldd	r24, Y+3	; 0x03
 986:	88 30       	cpi	r24, 0x08	; 8
 988:	08 f0       	brcs	.+2      	; 0x98c <DIO_u8TogPinVal+0x1e>
 98a:	73 c0       	rjmp	.+230    	; 0xa72 <DIO_u8TogPinVal+0x104>
		{
			switch(u8_PortNum)
 98c:	8a 81       	ldd	r24, Y+2	; 0x02
 98e:	28 2f       	mov	r18, r24
 990:	30 e0       	ldi	r19, 0x00	; 0
 992:	3d 83       	std	Y+5, r19	; 0x05
 994:	2c 83       	std	Y+4, r18	; 0x04
 996:	8c 81       	ldd	r24, Y+4	; 0x04
 998:	9d 81       	ldd	r25, Y+5	; 0x05
 99a:	89 30       	cpi	r24, 0x09	; 9
 99c:	91 05       	cpc	r25, r1
 99e:	51 f1       	breq	.+84     	; 0x9f4 <DIO_u8TogPinVal+0x86>
 9a0:	2c 81       	ldd	r18, Y+4	; 0x04
 9a2:	3d 81       	ldd	r19, Y+5	; 0x05
 9a4:	2a 30       	cpi	r18, 0x0A	; 10
 9a6:	31 05       	cpc	r19, r1
 9a8:	34 f4       	brge	.+12     	; 0x9b6 <DIO_u8TogPinVal+0x48>
 9aa:	8c 81       	ldd	r24, Y+4	; 0x04
 9ac:	9d 81       	ldd	r25, Y+5	; 0x05
 9ae:	88 30       	cpi	r24, 0x08	; 8
 9b0:	91 05       	cpc	r25, r1
 9b2:	61 f0       	breq	.+24     	; 0x9cc <DIO_u8TogPinVal+0x5e>
 9b4:	5b c0       	rjmp	.+182    	; 0xa6c <DIO_u8TogPinVal+0xfe>
 9b6:	2c 81       	ldd	r18, Y+4	; 0x04
 9b8:	3d 81       	ldd	r19, Y+5	; 0x05
 9ba:	2a 30       	cpi	r18, 0x0A	; 10
 9bc:	31 05       	cpc	r19, r1
 9be:	71 f1       	breq	.+92     	; 0xa1c <DIO_u8TogPinVal+0xae>
 9c0:	8c 81       	ldd	r24, Y+4	; 0x04
 9c2:	9d 81       	ldd	r25, Y+5	; 0x05
 9c4:	8b 30       	cpi	r24, 0x0B	; 11
 9c6:	91 05       	cpc	r25, r1
 9c8:	e9 f1       	breq	.+122    	; 0xa44 <DIO_u8TogPinVal+0xd6>
 9ca:	50 c0       	rjmp	.+160    	; 0xa6c <DIO_u8TogPinVal+0xfe>
			{
				case u8_DIO_PORTA: TOG_BIT(Ru8_PORTA,u8_PinNum) ;  break ;
 9cc:	ab e3       	ldi	r26, 0x3B	; 59
 9ce:	b0 e0       	ldi	r27, 0x00	; 0
 9d0:	eb e3       	ldi	r30, 0x3B	; 59
 9d2:	f0 e0       	ldi	r31, 0x00	; 0
 9d4:	80 81       	ld	r24, Z
 9d6:	48 2f       	mov	r20, r24
 9d8:	8b 81       	ldd	r24, Y+3	; 0x03
 9da:	28 2f       	mov	r18, r24
 9dc:	30 e0       	ldi	r19, 0x00	; 0
 9de:	81 e0       	ldi	r24, 0x01	; 1
 9e0:	90 e0       	ldi	r25, 0x00	; 0
 9e2:	02 2e       	mov	r0, r18
 9e4:	02 c0       	rjmp	.+4      	; 0x9ea <DIO_u8TogPinVal+0x7c>
 9e6:	88 0f       	add	r24, r24
 9e8:	99 1f       	adc	r25, r25
 9ea:	0a 94       	dec	r0
 9ec:	e2 f7       	brpl	.-8      	; 0x9e6 <DIO_u8TogPinVal+0x78>
 9ee:	84 27       	eor	r24, r20
 9f0:	8c 93       	st	X, r24
 9f2:	41 c0       	rjmp	.+130    	; 0xa76 <DIO_u8TogPinVal+0x108>
				case u8_DIO_PORTB: TOG_BIT(Ru8_PORTB,u8_PinNum) ;  break ;
 9f4:	a8 e3       	ldi	r26, 0x38	; 56
 9f6:	b0 e0       	ldi	r27, 0x00	; 0
 9f8:	e8 e3       	ldi	r30, 0x38	; 56
 9fa:	f0 e0       	ldi	r31, 0x00	; 0
 9fc:	80 81       	ld	r24, Z
 9fe:	48 2f       	mov	r20, r24
 a00:	8b 81       	ldd	r24, Y+3	; 0x03
 a02:	28 2f       	mov	r18, r24
 a04:	30 e0       	ldi	r19, 0x00	; 0
 a06:	81 e0       	ldi	r24, 0x01	; 1
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	02 2e       	mov	r0, r18
 a0c:	02 c0       	rjmp	.+4      	; 0xa12 <DIO_u8TogPinVal+0xa4>
 a0e:	88 0f       	add	r24, r24
 a10:	99 1f       	adc	r25, r25
 a12:	0a 94       	dec	r0
 a14:	e2 f7       	brpl	.-8      	; 0xa0e <DIO_u8TogPinVal+0xa0>
 a16:	84 27       	eor	r24, r20
 a18:	8c 93       	st	X, r24
 a1a:	2d c0       	rjmp	.+90     	; 0xa76 <DIO_u8TogPinVal+0x108>
				case u8_DIO_PORTC: TOG_BIT(Ru8_PORTC,u8_PinNum) ;  break ;
 a1c:	a5 e3       	ldi	r26, 0x35	; 53
 a1e:	b0 e0       	ldi	r27, 0x00	; 0
 a20:	e5 e3       	ldi	r30, 0x35	; 53
 a22:	f0 e0       	ldi	r31, 0x00	; 0
 a24:	80 81       	ld	r24, Z
 a26:	48 2f       	mov	r20, r24
 a28:	8b 81       	ldd	r24, Y+3	; 0x03
 a2a:	28 2f       	mov	r18, r24
 a2c:	30 e0       	ldi	r19, 0x00	; 0
 a2e:	81 e0       	ldi	r24, 0x01	; 1
 a30:	90 e0       	ldi	r25, 0x00	; 0
 a32:	02 2e       	mov	r0, r18
 a34:	02 c0       	rjmp	.+4      	; 0xa3a <DIO_u8TogPinVal+0xcc>
 a36:	88 0f       	add	r24, r24
 a38:	99 1f       	adc	r25, r25
 a3a:	0a 94       	dec	r0
 a3c:	e2 f7       	brpl	.-8      	; 0xa36 <DIO_u8TogPinVal+0xc8>
 a3e:	84 27       	eor	r24, r20
 a40:	8c 93       	st	X, r24
 a42:	19 c0       	rjmp	.+50     	; 0xa76 <DIO_u8TogPinVal+0x108>
				case u8_DIO_PORTD: TOG_BIT(Ru8_PORTD,u8_PinNum) ;  break ;
 a44:	a2 e3       	ldi	r26, 0x32	; 50
 a46:	b0 e0       	ldi	r27, 0x00	; 0
 a48:	e2 e3       	ldi	r30, 0x32	; 50
 a4a:	f0 e0       	ldi	r31, 0x00	; 0
 a4c:	80 81       	ld	r24, Z
 a4e:	48 2f       	mov	r20, r24
 a50:	8b 81       	ldd	r24, Y+3	; 0x03
 a52:	28 2f       	mov	r18, r24
 a54:	30 e0       	ldi	r19, 0x00	; 0
 a56:	81 e0       	ldi	r24, 0x01	; 1
 a58:	90 e0       	ldi	r25, 0x00	; 0
 a5a:	02 2e       	mov	r0, r18
 a5c:	02 c0       	rjmp	.+4      	; 0xa62 <DIO_u8TogPinVal+0xf4>
 a5e:	88 0f       	add	r24, r24
 a60:	99 1f       	adc	r25, r25
 a62:	0a 94       	dec	r0
 a64:	e2 f7       	brpl	.-8      	; 0xa5e <DIO_u8TogPinVal+0xf0>
 a66:	84 27       	eor	r24, r20
 a68:	8c 93       	st	X, r24
 a6a:	05 c0       	rjmp	.+10     	; 0xa76 <DIO_u8TogPinVal+0x108>
				default          :  u8_ErrorState = u8_DIO_NOK;   break ; 
 a6c:	83 e0       	ldi	r24, 0x03	; 3
 a6e:	89 83       	std	Y+1, r24	; 0x01
 a70:	02 c0       	rjmp	.+4      	; 0xa76 <DIO_u8TogPinVal+0x108>
			}
		}
		else 
		{
			u8_ErrorState = u8_DIO_NOK;
 a72:	83 e0       	ldi	r24, 0x03	; 3
 a74:	89 83       	std	Y+1, r24	; 0x01
		}
	return u8_ErrorState  ; 
 a76:	89 81       	ldd	r24, Y+1	; 0x01
}
 a78:	0f 90       	pop	r0
 a7a:	0f 90       	pop	r0
 a7c:	0f 90       	pop	r0
 a7e:	0f 90       	pop	r0
 a80:	0f 90       	pop	r0
 a82:	cf 91       	pop	r28
 a84:	df 91       	pop	r29
 a86:	08 95       	ret

00000a88 <DIO_voidDisablePullUps>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void DIO_voidDisablePullUps(void)   
{
 a88:	df 93       	push	r29
 a8a:	cf 93       	push	r28
 a8c:	cd b7       	in	r28, 0x3d	; 61
 a8e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(Ru8_SFIOR,u8_PUD) ;
 a90:	a0 e5       	ldi	r26, 0x50	; 80
 a92:	b0 e0       	ldi	r27, 0x00	; 0
 a94:	e0 e5       	ldi	r30, 0x50	; 80
 a96:	f0 e0       	ldi	r31, 0x00	; 0
 a98:	80 81       	ld	r24, Z
 a9a:	84 60       	ori	r24, 0x04	; 4
 a9c:	8c 93       	st	X, r24
}
 a9e:	cf 91       	pop	r28
 aa0:	df 91       	pop	r29
 aa2:	08 95       	ret

00000aa4 <DIO_voidEnablePullUps>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void DIO_voidEnablePullUps(void)  
{
 aa4:	df 93       	push	r29
 aa6:	cf 93       	push	r28
 aa8:	cd b7       	in	r28, 0x3d	; 61
 aaa:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(Ru8_SFIOR,u8_PUD) ;
 aac:	a0 e5       	ldi	r26, 0x50	; 80
 aae:	b0 e0       	ldi	r27, 0x00	; 0
 ab0:	e0 e5       	ldi	r30, 0x50	; 80
 ab2:	f0 e0       	ldi	r31, 0x00	; 0
 ab4:	80 81       	ld	r24, Z
 ab6:	8b 7f       	andi	r24, 0xFB	; 251
 ab8:	8c 93       	st	X, r24
}
 aba:	cf 91       	pop	r28
 abc:	df 91       	pop	r29
 abe:	08 95       	ret

00000ac0 <main>:
//sending from master 0xFF to make slave output port high when set this data in PORT
#define u8_MAKE_SLAVE_PORT_HIGH					0xFF


int main(void)
{
 ac0:	df 93       	push	r29
 ac2:	cf 93       	push	r28
 ac4:	0f 92       	push	r0
 ac6:	cd b7       	in	r28, 0x3d	; 61
 ac8:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_dummy ;
	//SPI intialization
	SPI_voidInit() ;
 aca:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_voidInit>
	//send the wanted data to slave and receive dummy value from slave
	u8_dummy = SPI_voidTransever(u8_MAKE_SLAVE_PORT_HIGH) ;
 ace:	8f ef       	ldi	r24, 0xFF	; 255
 ad0:	0e 94 98 00 	call	0x130	; 0x130 <SPI_voidTransever>
 ad4:	89 83       	std	Y+1, r24	; 0x01
 ad6:	ff cf       	rjmp	.-2      	; 0xad6 <main+0x16>

00000ad8 <_exit>:
 ad8:	f8 94       	cli

00000ada <__stop_program>:
 ada:	ff cf       	rjmp	.-2      	; 0xada <__stop_program>
