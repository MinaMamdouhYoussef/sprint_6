
SPI_testCaseSlave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ade  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00001050  00000000  00000000  00000b34  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000007d3  00000000  00000000  00001b84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 59 05 	call	0xab2	; 0xab2 <main>
  64:	0c 94 6d 05 	jmp	0xada	; 0xada <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_voidInit>:
#include "SPI_private.h"
#include "SPI_config.h"


void SPI_voidInit(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	#if	u8_SPI_STATE == u8_SPI_ENABLE
		SET_BIT(Ru8_SPCR,u8_SPI_SPE) ;
  74:	ad e2       	ldi	r26, 0x2D	; 45
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	ed e2       	ldi	r30, 0x2D	; 45
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	80 64       	ori	r24, 0x40	; 64
  80:	8c 93       	st	X, r24
		#error "bre-build wrong config SPI_STATE "
	#endif
	
	
	#if u8_SPI_DATA_TRANS_ORDER == u8_SPI_LSB_TRANS_FRIST
		SET_BIT(Ru8_SPCR,u8_SPI_DORD) ;
  82:	ad e2       	ldi	r26, 0x2D	; 45
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	ed e2       	ldi	r30, 0x2D	; 45
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	80 62       	ori	r24, 0x20	; 32
  8e:	8c 93       	st	X, r24
		CLR_BIT(Ru8_DDRB,u8_SPI_SS_PIN);
		SET_BIT(Ru8_PORTB,u8_SPI_SS_PIN);

		
	#elif u8_SPI_SELECT_SPI_MODE == u8_SPI_SLAVE
		CLR_BIT(Ru8_SPCR,u8_SPI_MSTR) ;
  90:	ad e2       	ldi	r26, 0x2D	; 45
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	ed e2       	ldi	r30, 0x2D	; 45
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	8f 7e       	andi	r24, 0xEF	; 239
  9c:	8c 93       	st	X, r24
		CLR_BIT(Ru8_DDRB,u8_SPI_SCK_PIN);
  9e:	a7 e3       	ldi	r26, 0x37	; 55
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	e7 e3       	ldi	r30, 0x37	; 55
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	8f 77       	andi	r24, 0x7F	; 127
  aa:	8c 93       	st	X, r24
		SET_BIT(Ru8_DDRB,u8_SPI_MISO_PIN);
  ac:	a7 e3       	ldi	r26, 0x37	; 55
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	e7 e3       	ldi	r30, 0x37	; 55
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	8c 93       	st	X, r24
		CLR_BIT(Ru8_DDRB,u8_SPI_MOSI_PIN);
  ba:	a7 e3       	ldi	r26, 0x37	; 55
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	e7 e3       	ldi	r30, 0x37	; 55
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	8f 7d       	andi	r24, 0xDF	; 223
  c6:	8c 93       	st	X, r24
		CLR_BIT(Ru8_DDRB,u8_SPI_SS_PIN);
  c8:	a7 e3       	ldi	r26, 0x37	; 55
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	e7 e3       	ldi	r30, 0x37	; 55
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	8f 7e       	andi	r24, 0xEF	; 239
  d4:	8c 93       	st	X, r24
	#else
		#error "bre-build wrong config SELECT_SPI_MODE"
	#endif

	#if u8_SPI_CLK_OPERATION_CONFIG == u8_SPI_CLK_LEADING_RISING_EDGE
		CLR_BIT(Ru8_SPCR,u8_SPI_CPOL) ;
  d6:	ad e2       	ldi	r26, 0x2D	; 45
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	ed e2       	ldi	r30, 0x2D	; 45
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	87 7f       	andi	r24, 0xF7	; 247
  e2:	8c 93       	st	X, r24


	#if u8_SPI_SAMPLING_OPERATION_CONFIG == u8_SPI_SAMPLE_ON_LEADING_EDGE
		CLR_BIT(Ru8_SPCR,u8_SPI_CPHA) ;
	#elif u8_SPI_SAMPLING_OPERATION_CONFIG == u8_SPI_SAMPLE_ON_TRAILLING_EDGE
		SET_BIT(Ru8_SPCR,u8_SPI_CPHA) ;
  e4:	ad e2       	ldi	r26, 0x2D	; 45
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	ed e2       	ldi	r30, 0x2D	; 45
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	84 60       	ori	r24, 0x04	; 4
  f0:	8c 93       	st	X, r24
	#elif u8_SPI_CLK_CONFIG == u8_SPI_CLK_FSOC_BY_32
		SET_BIT(Ru8_SPCR,u8_SPI_SPR1) ;
	    CLR_BIT(Ru8_SPCR,u8_SPI_SPR0) ;
	    SET_BIT(Ru8_SPSR,u8_SPI_SPI2X) ;
	#elif u8_SPI_CLK_CONFIG == u8_SPI_CLK_FSOC_BY_64
		SET_BIT(Ru8_SPCR,u8_SPI_SPR1) ;
  f2:	ad e2       	ldi	r26, 0x2D	; 45
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	ed e2       	ldi	r30, 0x2D	; 45
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	82 60       	ori	r24, 0x02	; 2
  fe:	8c 93       	st	X, r24
	    SET_BIT(Ru8_SPCR,u8_SPI_SPR0) ;
 100:	ad e2       	ldi	r26, 0x2D	; 45
 102:	b0 e0       	ldi	r27, 0x00	; 0
 104:	ed e2       	ldi	r30, 0x2D	; 45
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	81 60       	ori	r24, 0x01	; 1
 10c:	8c 93       	st	X, r24
	    CLR_BIT(Ru8_SPSR,u8_SPI_SPI2X) ;
 10e:	ae e2       	ldi	r26, 0x2E	; 46
 110:	b0 e0       	ldi	r27, 0x00	; 0
 112:	ee e2       	ldi	r30, 0x2E	; 46
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	8e 7f       	andi	r24, 0xFE	; 254
 11a:	8c 93       	st	X, r24
	#endif


	
	
}
 11c:	cf 91       	pop	r28
 11e:	df 91       	pop	r29
 120:	08 95       	ret

00000122 <SPI_voidTransever>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//function that send and receive on Byte at the same time by returning the received and take the sending in argument 
uint8_t SPI_voidTransever(uint8_t u8_dataSent)
{
 122:	df 93       	push	r29
 124:	cf 93       	push	r28
 126:	0f 92       	push	r0
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	89 83       	std	Y+1, r24	; 0x01
	Ru8_SPDR = u8_dataSent ; 
 12e:	ef e2       	ldi	r30, 0x2F	; 47
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	89 81       	ldd	r24, Y+1	; 0x01
 134:	80 83       	st	Z, r24
	
	while(GET_BIT(Ru8_SPSR,u8_SPI_SPIF)!=u8_SPI_FLAG_SET) ; 
 136:	ee e2       	ldi	r30, 0x2E	; 46
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	88 1f       	adc	r24, r24
 13e:	88 27       	eor	r24, r24
 140:	88 1f       	adc	r24, r24
 142:	81 30       	cpi	r24, 0x01	; 1
 144:	c1 f7       	brne	.-16     	; 0x136 <SPI_voidTransever+0x14>
	
	return Ru8_SPDR ; 
 146:	ef e2       	ldi	r30, 0x2F	; 47
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
}
 14c:	0f 90       	pop	r0
 14e:	cf 91       	pop	r28
 150:	df 91       	pop	r29
 152:	08 95       	ret

00000154 <SPI_voidReceiveArr>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//function that receive Array of bytes or string in array pointer pu8_dataReceive with array size u8_arrSize
void SPI_voidReceiveArr(uint8_t* pu8_dataReceive,uint8_t u8_arrSize)
{
 154:	0f 93       	push	r16
 156:	1f 93       	push	r17
 158:	df 93       	push	r29
 15a:	cf 93       	push	r28
 15c:	00 d0       	rcall	.+0      	; 0x15e <SPI_voidReceiveArr+0xa>
 15e:	00 d0       	rcall	.+0      	; 0x160 <SPI_voidReceiveArr+0xc>
 160:	0f 92       	push	r0
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
 166:	9c 83       	std	Y+4, r25	; 0x04
 168:	8b 83       	std	Y+3, r24	; 0x03
 16a:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t u8_dummy, u8_indexArr = u8_SPI_INTIAL_VAL ; 
 16c:	19 82       	std	Y+1, r1	; 0x01
 16e:	1b c0       	rjmp	.+54     	; 0x1a6 <SPI_voidReceiveArr+0x52>
	
	while(u8_indexArr<u8_arrSize)
	{
		pu8_dataReceive[u8_indexArr] = SPI_voidTransever(u8_dummy)  ;
 170:	89 81       	ldd	r24, Y+1	; 0x01
 172:	28 2f       	mov	r18, r24
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	8b 81       	ldd	r24, Y+3	; 0x03
 178:	9c 81       	ldd	r25, Y+4	; 0x04
 17a:	8c 01       	movw	r16, r24
 17c:	02 0f       	add	r16, r18
 17e:	13 1f       	adc	r17, r19
 180:	8a 81       	ldd	r24, Y+2	; 0x02
 182:	0e 94 91 00 	call	0x122	; 0x122 <SPI_voidTransever>
 186:	f8 01       	movw	r30, r16
 188:	80 83       	st	Z, r24
		
		if(pu8_dataReceive[u8_indexArr] == NULL_CHAR)
 18a:	89 81       	ldd	r24, Y+1	; 0x01
 18c:	28 2f       	mov	r18, r24
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	8b 81       	ldd	r24, Y+3	; 0x03
 192:	9c 81       	ldd	r25, Y+4	; 0x04
 194:	fc 01       	movw	r30, r24
 196:	e2 0f       	add	r30, r18
 198:	f3 1f       	adc	r31, r19
 19a:	80 81       	ld	r24, Z
 19c:	88 23       	and	r24, r24
 19e:	39 f0       	breq	.+14     	; 0x1ae <SPI_voidReceiveArr+0x5a>
		{
			break ; 
		}
		++u8_indexArr ;
 1a0:	89 81       	ldd	r24, Y+1	; 0x01
 1a2:	8f 5f       	subi	r24, 0xFF	; 255
 1a4:	89 83       	std	Y+1, r24	; 0x01
//function that receive Array of bytes or string in array pointer pu8_dataReceive with array size u8_arrSize
void SPI_voidReceiveArr(uint8_t* pu8_dataReceive,uint8_t u8_arrSize)
{
	uint8_t u8_dummy, u8_indexArr = u8_SPI_INTIAL_VAL ; 
	
	while(u8_indexArr<u8_arrSize)
 1a6:	99 81       	ldd	r25, Y+1	; 0x01
 1a8:	8d 81       	ldd	r24, Y+5	; 0x05
 1aa:	98 17       	cp	r25, r24
 1ac:	08 f3       	brcs	.-62     	; 0x170 <SPI_voidReceiveArr+0x1c>
			break ; 
		}
		++u8_indexArr ;
	}
	
}
 1ae:	0f 90       	pop	r0
 1b0:	0f 90       	pop	r0
 1b2:	0f 90       	pop	r0
 1b4:	0f 90       	pop	r0
 1b6:	0f 90       	pop	r0
 1b8:	cf 91       	pop	r28
 1ba:	df 91       	pop	r29
 1bc:	1f 91       	pop	r17
 1be:	0f 91       	pop	r16
 1c0:	08 95       	ret

000001c2 <SPI_voidSendArr>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//function that send Array of bytes or string in array pointer pu8_dataSent with array size u8_arrSize
void SPI_voidSendArr(uint8_t* pu8_dataSent,uint8_t u8_arrSize)
{
 1c2:	df 93       	push	r29
 1c4:	cf 93       	push	r28
 1c6:	00 d0       	rcall	.+0      	; 0x1c8 <SPI_voidSendArr+0x6>
 1c8:	00 d0       	rcall	.+0      	; 0x1ca <SPI_voidSendArr+0x8>
 1ca:	0f 92       	push	r0
 1cc:	cd b7       	in	r28, 0x3d	; 61
 1ce:	de b7       	in	r29, 0x3e	; 62
 1d0:	9c 83       	std	Y+4, r25	; 0x04
 1d2:	8b 83       	std	Y+3, r24	; 0x03
 1d4:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t u8_dummy, u8_indexArr = u8_SPI_INTIAL_VAL ; 
 1d6:	19 82       	std	Y+1, r1	; 0x01
 1d8:	27 c0       	rjmp	.+78     	; 0x228 <SPI_voidSendArr+0x66>
	
	while(u8_indexArr<u8_arrSize)
	{
		if(pu8_dataSent[u8_indexArr] == NULL_CHAR)
 1da:	89 81       	ldd	r24, Y+1	; 0x01
 1dc:	28 2f       	mov	r18, r24
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	8b 81       	ldd	r24, Y+3	; 0x03
 1e2:	9c 81       	ldd	r25, Y+4	; 0x04
 1e4:	fc 01       	movw	r30, r24
 1e6:	e2 0f       	add	r30, r18
 1e8:	f3 1f       	adc	r31, r19
 1ea:	80 81       	ld	r24, Z
 1ec:	88 23       	and	r24, r24
 1ee:	69 f4       	brne	.+26     	; 0x20a <SPI_voidSendArr+0x48>
		{
			u8_dummy = SPI_voidTransever(pu8_dataSent[u8_indexArr])  ;
 1f0:	89 81       	ldd	r24, Y+1	; 0x01
 1f2:	28 2f       	mov	r18, r24
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	8b 81       	ldd	r24, Y+3	; 0x03
 1f8:	9c 81       	ldd	r25, Y+4	; 0x04
 1fa:	fc 01       	movw	r30, r24
 1fc:	e2 0f       	add	r30, r18
 1fe:	f3 1f       	adc	r31, r19
 200:	80 81       	ld	r24, Z
 202:	0e 94 91 00 	call	0x122	; 0x122 <SPI_voidTransever>
 206:	8a 83       	std	Y+2, r24	; 0x02
 208:	13 c0       	rjmp	.+38     	; 0x230 <SPI_voidSendArr+0x6e>
			break ; 
		}
		else 
		{
			u8_dummy = SPI_voidTransever(pu8_dataSent[u8_indexArr])  ;
 20a:	89 81       	ldd	r24, Y+1	; 0x01
 20c:	28 2f       	mov	r18, r24
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	8b 81       	ldd	r24, Y+3	; 0x03
 212:	9c 81       	ldd	r25, Y+4	; 0x04
 214:	fc 01       	movw	r30, r24
 216:	e2 0f       	add	r30, r18
 218:	f3 1f       	adc	r31, r19
 21a:	80 81       	ld	r24, Z
 21c:	0e 94 91 00 	call	0x122	; 0x122 <SPI_voidTransever>
 220:	8a 83       	std	Y+2, r24	; 0x02
			++u8_indexArr ;
 222:	89 81       	ldd	r24, Y+1	; 0x01
 224:	8f 5f       	subi	r24, 0xFF	; 255
 226:	89 83       	std	Y+1, r24	; 0x01
//function that send Array of bytes or string in array pointer pu8_dataSent with array size u8_arrSize
void SPI_voidSendArr(uint8_t* pu8_dataSent,uint8_t u8_arrSize)
{
	uint8_t u8_dummy, u8_indexArr = u8_SPI_INTIAL_VAL ; 
	
	while(u8_indexArr<u8_arrSize)
 228:	99 81       	ldd	r25, Y+1	; 0x01
 22a:	8d 81       	ldd	r24, Y+5	; 0x05
 22c:	98 17       	cp	r25, r24
 22e:	a8 f2       	brcs	.-86     	; 0x1da <SPI_voidSendArr+0x18>
		{
			u8_dummy = SPI_voidTransever(pu8_dataSent[u8_indexArr])  ;
			++u8_indexArr ;
		}
	}
}
 230:	0f 90       	pop	r0
 232:	0f 90       	pop	r0
 234:	0f 90       	pop	r0
 236:	0f 90       	pop	r0
 238:	0f 90       	pop	r0
 23a:	cf 91       	pop	r28
 23c:	df 91       	pop	r29
 23e:	08 95       	ret

00000240 <DIO_u8SetPinVal>:
#include "dio_interface.h"
#include "dio_private.h"


uint8_t DIO_u8SetPinVal(uint8_t u8_PortNum,uint8_t u8_PinNum,uint8_t u8_PinState)     
{
 240:	df 93       	push	r29
 242:	cf 93       	push	r28
 244:	00 d0       	rcall	.+0      	; 0x246 <DIO_u8SetPinVal+0x6>
 246:	00 d0       	rcall	.+0      	; 0x248 <DIO_u8SetPinVal+0x8>
 248:	00 d0       	rcall	.+0      	; 0x24a <DIO_u8SetPinVal+0xa>
 24a:	cd b7       	in	r28, 0x3d	; 61
 24c:	de b7       	in	r29, 0x3e	; 62
 24e:	8a 83       	std	Y+2, r24	; 0x02
 250:	6b 83       	std	Y+3, r22	; 0x03
 252:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t u8_ErrorState = u8_DIO_OK;
 254:	82 e0       	ldi	r24, 0x02	; 2
 256:	89 83       	std	Y+1, r24	; 0x01
	if(u8_PinNum>=u8_DIO_PIN0 && u8_PinNum<=u8_DIO_PIN7)
 258:	8b 81       	ldd	r24, Y+3	; 0x03
 25a:	88 30       	cpi	r24, 0x08	; 8
 25c:	08 f0       	brcs	.+2      	; 0x260 <DIO_u8SetPinVal+0x20>
 25e:	ee c0       	rjmp	.+476    	; 0x43c <DIO_u8SetPinVal+0x1fc>
	{
		switch(u8_PortNum)
 260:	8a 81       	ldd	r24, Y+2	; 0x02
 262:	28 2f       	mov	r18, r24
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	3e 83       	std	Y+6, r19	; 0x06
 268:	2d 83       	std	Y+5, r18	; 0x05
 26a:	8d 81       	ldd	r24, Y+5	; 0x05
 26c:	9e 81       	ldd	r25, Y+6	; 0x06
 26e:	89 30       	cpi	r24, 0x09	; 9
 270:	91 05       	cpc	r25, r1
 272:	09 f4       	brne	.+2      	; 0x276 <DIO_u8SetPinVal+0x36>
 274:	4a c0       	rjmp	.+148    	; 0x30a <DIO_u8SetPinVal+0xca>
 276:	2d 81       	ldd	r18, Y+5	; 0x05
 278:	3e 81       	ldd	r19, Y+6	; 0x06
 27a:	2a 30       	cpi	r18, 0x0A	; 10
 27c:	31 05       	cpc	r19, r1
 27e:	34 f4       	brge	.+12     	; 0x28c <DIO_u8SetPinVal+0x4c>
 280:	8d 81       	ldd	r24, Y+5	; 0x05
 282:	9e 81       	ldd	r25, Y+6	; 0x06
 284:	88 30       	cpi	r24, 0x08	; 8
 286:	91 05       	cpc	r25, r1
 288:	71 f0       	breq	.+28     	; 0x2a6 <DIO_u8SetPinVal+0x66>
 28a:	d5 c0       	rjmp	.+426    	; 0x436 <DIO_u8SetPinVal+0x1f6>
 28c:	2d 81       	ldd	r18, Y+5	; 0x05
 28e:	3e 81       	ldd	r19, Y+6	; 0x06
 290:	2a 30       	cpi	r18, 0x0A	; 10
 292:	31 05       	cpc	r19, r1
 294:	09 f4       	brne	.+2      	; 0x298 <DIO_u8SetPinVal+0x58>
 296:	6b c0       	rjmp	.+214    	; 0x36e <DIO_u8SetPinVal+0x12e>
 298:	8d 81       	ldd	r24, Y+5	; 0x05
 29a:	9e 81       	ldd	r25, Y+6	; 0x06
 29c:	8b 30       	cpi	r24, 0x0B	; 11
 29e:	91 05       	cpc	r25, r1
 2a0:	09 f4       	brne	.+2      	; 0x2a4 <DIO_u8SetPinVal+0x64>
 2a2:	97 c0       	rjmp	.+302    	; 0x3d2 <DIO_u8SetPinVal+0x192>
 2a4:	c8 c0       	rjmp	.+400    	; 0x436 <DIO_u8SetPinVal+0x1f6>
		{
			case u8_DIO_PORTA: if(u8_PinState == u8_DIO_PIN_LOW)
 2a6:	8c 81       	ldd	r24, Y+4	; 0x04
 2a8:	88 23       	and	r24, r24
 2aa:	a9 f4       	brne	.+42     	; 0x2d6 <DIO_u8SetPinVal+0x96>
								{
									CLR_BIT(Ru8_PORTA,u8_PinNum) ;
 2ac:	ab e3       	ldi	r26, 0x3B	; 59
 2ae:	b0 e0       	ldi	r27, 0x00	; 0
 2b0:	eb e3       	ldi	r30, 0x3B	; 59
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	80 81       	ld	r24, Z
 2b6:	48 2f       	mov	r20, r24
 2b8:	8b 81       	ldd	r24, Y+3	; 0x03
 2ba:	28 2f       	mov	r18, r24
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	02 2e       	mov	r0, r18
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <DIO_u8SetPinVal+0x8a>
 2c6:	88 0f       	add	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	0a 94       	dec	r0
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <DIO_u8SetPinVal+0x86>
 2ce:	80 95       	com	r24
 2d0:	84 23       	and	r24, r20
 2d2:	8c 93       	st	X, r24
 2d4:	b5 c0       	rjmp	.+362    	; 0x440 <DIO_u8SetPinVal+0x200>
								}
								else if(u8_PinState == u8_DIO_PIN_HIGH)
 2d6:	8c 81       	ldd	r24, Y+4	; 0x04
 2d8:	81 30       	cpi	r24, 0x01	; 1
 2da:	a1 f4       	brne	.+40     	; 0x304 <DIO_u8SetPinVal+0xc4>
								{
									SET_BIT(Ru8_PORTA,u8_PinNum) ;
 2dc:	ab e3       	ldi	r26, 0x3B	; 59
 2de:	b0 e0       	ldi	r27, 0x00	; 0
 2e0:	eb e3       	ldi	r30, 0x3B	; 59
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	80 81       	ld	r24, Z
 2e6:	48 2f       	mov	r20, r24
 2e8:	8b 81       	ldd	r24, Y+3	; 0x03
 2ea:	28 2f       	mov	r18, r24
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	02 2e       	mov	r0, r18
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <DIO_u8SetPinVal+0xba>
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	0a 94       	dec	r0
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <DIO_u8SetPinVal+0xb6>
 2fe:	84 2b       	or	r24, r20
 300:	8c 93       	st	X, r24
 302:	9e c0       	rjmp	.+316    	; 0x440 <DIO_u8SetPinVal+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
 304:	83 e0       	ldi	r24, 0x03	; 3
 306:	89 83       	std	Y+1, r24	; 0x01
 308:	9b c0       	rjmp	.+310    	; 0x440 <DIO_u8SetPinVal+0x200>
								}

							   break;
							   
			case u8_DIO_PORTB:	if(u8_PinState == u8_DIO_PIN_LOW)
 30a:	8c 81       	ldd	r24, Y+4	; 0x04
 30c:	88 23       	and	r24, r24
 30e:	a9 f4       	brne	.+42     	; 0x33a <DIO_u8SetPinVal+0xfa>
								{
									CLR_BIT(Ru8_PORTB,u8_PinNum) ;
 310:	a8 e3       	ldi	r26, 0x38	; 56
 312:	b0 e0       	ldi	r27, 0x00	; 0
 314:	e8 e3       	ldi	r30, 0x38	; 56
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	80 81       	ld	r24, Z
 31a:	48 2f       	mov	r20, r24
 31c:	8b 81       	ldd	r24, Y+3	; 0x03
 31e:	28 2f       	mov	r18, r24
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	02 2e       	mov	r0, r18
 328:	02 c0       	rjmp	.+4      	; 0x32e <DIO_u8SetPinVal+0xee>
 32a:	88 0f       	add	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	0a 94       	dec	r0
 330:	e2 f7       	brpl	.-8      	; 0x32a <DIO_u8SetPinVal+0xea>
 332:	80 95       	com	r24
 334:	84 23       	and	r24, r20
 336:	8c 93       	st	X, r24
 338:	83 c0       	rjmp	.+262    	; 0x440 <DIO_u8SetPinVal+0x200>
								}
								else if(u8_PinState == u8_DIO_PIN_HIGH)
 33a:	8c 81       	ldd	r24, Y+4	; 0x04
 33c:	81 30       	cpi	r24, 0x01	; 1
 33e:	a1 f4       	brne	.+40     	; 0x368 <DIO_u8SetPinVal+0x128>
								{
									SET_BIT(Ru8_PORTB,u8_PinNum) ;
 340:	a8 e3       	ldi	r26, 0x38	; 56
 342:	b0 e0       	ldi	r27, 0x00	; 0
 344:	e8 e3       	ldi	r30, 0x38	; 56
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	80 81       	ld	r24, Z
 34a:	48 2f       	mov	r20, r24
 34c:	8b 81       	ldd	r24, Y+3	; 0x03
 34e:	28 2f       	mov	r18, r24
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	02 2e       	mov	r0, r18
 358:	02 c0       	rjmp	.+4      	; 0x35e <DIO_u8SetPinVal+0x11e>
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	0a 94       	dec	r0
 360:	e2 f7       	brpl	.-8      	; 0x35a <DIO_u8SetPinVal+0x11a>
 362:	84 2b       	or	r24, r20
 364:	8c 93       	st	X, r24
 366:	6c c0       	rjmp	.+216    	; 0x440 <DIO_u8SetPinVal+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
 368:	83 e0       	ldi	r24, 0x03	; 3
 36a:	89 83       	std	Y+1, r24	; 0x01
 36c:	69 c0       	rjmp	.+210    	; 0x440 <DIO_u8SetPinVal+0x200>
								}
							   break;
							   
			case u8_DIO_PORTC:  if(u8_PinState == u8_DIO_PIN_LOW)
 36e:	8c 81       	ldd	r24, Y+4	; 0x04
 370:	88 23       	and	r24, r24
 372:	a9 f4       	brne	.+42     	; 0x39e <DIO_u8SetPinVal+0x15e>
								{
									CLR_BIT(Ru8_PORTC,u8_PinNum) ;
 374:	a5 e3       	ldi	r26, 0x35	; 53
 376:	b0 e0       	ldi	r27, 0x00	; 0
 378:	e5 e3       	ldi	r30, 0x35	; 53
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	80 81       	ld	r24, Z
 37e:	48 2f       	mov	r20, r24
 380:	8b 81       	ldd	r24, Y+3	; 0x03
 382:	28 2f       	mov	r18, r24
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	02 2e       	mov	r0, r18
 38c:	02 c0       	rjmp	.+4      	; 0x392 <DIO_u8SetPinVal+0x152>
 38e:	88 0f       	add	r24, r24
 390:	99 1f       	adc	r25, r25
 392:	0a 94       	dec	r0
 394:	e2 f7       	brpl	.-8      	; 0x38e <DIO_u8SetPinVal+0x14e>
 396:	80 95       	com	r24
 398:	84 23       	and	r24, r20
 39a:	8c 93       	st	X, r24
 39c:	51 c0       	rjmp	.+162    	; 0x440 <DIO_u8SetPinVal+0x200>
								}
								else if(u8_PinState == u8_DIO_PIN_HIGH)
 39e:	8c 81       	ldd	r24, Y+4	; 0x04
 3a0:	81 30       	cpi	r24, 0x01	; 1
 3a2:	a1 f4       	brne	.+40     	; 0x3cc <DIO_u8SetPinVal+0x18c>
								{
									SET_BIT(Ru8_PORTC,u8_PinNum) ;
 3a4:	a5 e3       	ldi	r26, 0x35	; 53
 3a6:	b0 e0       	ldi	r27, 0x00	; 0
 3a8:	e5 e3       	ldi	r30, 0x35	; 53
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	80 81       	ld	r24, Z
 3ae:	48 2f       	mov	r20, r24
 3b0:	8b 81       	ldd	r24, Y+3	; 0x03
 3b2:	28 2f       	mov	r18, r24
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	02 2e       	mov	r0, r18
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_u8SetPinVal+0x182>
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	0a 94       	dec	r0
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_u8SetPinVal+0x17e>
 3c6:	84 2b       	or	r24, r20
 3c8:	8c 93       	st	X, r24
 3ca:	3a c0       	rjmp	.+116    	; 0x440 <DIO_u8SetPinVal+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
 3cc:	83 e0       	ldi	r24, 0x03	; 3
 3ce:	89 83       	std	Y+1, r24	; 0x01
 3d0:	37 c0       	rjmp	.+110    	; 0x440 <DIO_u8SetPinVal+0x200>
								}

								break;
								
			case u8_DIO_PORTD: if(u8_PinState == u8_DIO_PIN_LOW)
 3d2:	8c 81       	ldd	r24, Y+4	; 0x04
 3d4:	88 23       	and	r24, r24
 3d6:	a9 f4       	brne	.+42     	; 0x402 <DIO_u8SetPinVal+0x1c2>
							   {
									CLR_BIT(Ru8_PORTD,u8_PinNum) ;
 3d8:	a2 e3       	ldi	r26, 0x32	; 50
 3da:	b0 e0       	ldi	r27, 0x00	; 0
 3dc:	e2 e3       	ldi	r30, 0x32	; 50
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	80 81       	ld	r24, Z
 3e2:	48 2f       	mov	r20, r24
 3e4:	8b 81       	ldd	r24, Y+3	; 0x03
 3e6:	28 2f       	mov	r18, r24
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	02 2e       	mov	r0, r18
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <DIO_u8SetPinVal+0x1b6>
 3f2:	88 0f       	add	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	0a 94       	dec	r0
 3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <DIO_u8SetPinVal+0x1b2>
 3fa:	80 95       	com	r24
 3fc:	84 23       	and	r24, r20
 3fe:	8c 93       	st	X, r24
 400:	1f c0       	rjmp	.+62     	; 0x440 <DIO_u8SetPinVal+0x200>
							   }
							   else if(u8_PinState == u8_DIO_PIN_HIGH)
 402:	8c 81       	ldd	r24, Y+4	; 0x04
 404:	81 30       	cpi	r24, 0x01	; 1
 406:	a1 f4       	brne	.+40     	; 0x430 <DIO_u8SetPinVal+0x1f0>
							   {
									SET_BIT(Ru8_PORTD,u8_PinNum) ;
 408:	a2 e3       	ldi	r26, 0x32	; 50
 40a:	b0 e0       	ldi	r27, 0x00	; 0
 40c:	e2 e3       	ldi	r30, 0x32	; 50
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	80 81       	ld	r24, Z
 412:	48 2f       	mov	r20, r24
 414:	8b 81       	ldd	r24, Y+3	; 0x03
 416:	28 2f       	mov	r18, r24
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	02 2e       	mov	r0, r18
 420:	02 c0       	rjmp	.+4      	; 0x426 <DIO_u8SetPinVal+0x1e6>
 422:	88 0f       	add	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	0a 94       	dec	r0
 428:	e2 f7       	brpl	.-8      	; 0x422 <DIO_u8SetPinVal+0x1e2>
 42a:	84 2b       	or	r24, r20
 42c:	8c 93       	st	X, r24
 42e:	08 c0       	rjmp	.+16     	; 0x440 <DIO_u8SetPinVal+0x200>
							   }
							   else 
							   {
									u8_ErrorState = u8_DIO_NOK ; 
 430:	83 e0       	ldi	r24, 0x03	; 3
 432:	89 83       	std	Y+1, r24	; 0x01
 434:	05 c0       	rjmp	.+10     	; 0x440 <DIO_u8SetPinVal+0x200>
							   }
								break;
								
			default          : u8_ErrorState = u8_DIO_NOK ; 
 436:	83 e0       	ldi	r24, 0x03	; 3
 438:	89 83       	std	Y+1, r24	; 0x01
 43a:	02 c0       	rjmp	.+4      	; 0x440 <DIO_u8SetPinVal+0x200>
								break ; 
		}
	}
	else 
	{
		u8_ErrorState = u8_DIO_NOK ; 
 43c:	83 e0       	ldi	r24, 0x03	; 3
 43e:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_ErrorState  ; 
 440:	89 81       	ldd	r24, Y+1	; 0x01
}
 442:	26 96       	adiw	r28, 0x06	; 6
 444:	0f b6       	in	r0, 0x3f	; 63
 446:	f8 94       	cli
 448:	de bf       	out	0x3e, r29	; 62
 44a:	0f be       	out	0x3f, r0	; 63
 44c:	cd bf       	out	0x3d, r28	; 61
 44e:	cf 91       	pop	r28
 450:	df 91       	pop	r29
 452:	08 95       	ret

00000454 <DIO_u8SetPinDir>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8SetPinDir(uint8_t u8_PortNum,uint8_t u8_PinNum,uint8_t u8_PinDir)      
{
 454:	df 93       	push	r29
 456:	cf 93       	push	r28
 458:	00 d0       	rcall	.+0      	; 0x45a <DIO_u8SetPinDir+0x6>
 45a:	00 d0       	rcall	.+0      	; 0x45c <DIO_u8SetPinDir+0x8>
 45c:	00 d0       	rcall	.+0      	; 0x45e <DIO_u8SetPinDir+0xa>
 45e:	cd b7       	in	r28, 0x3d	; 61
 460:	de b7       	in	r29, 0x3e	; 62
 462:	8a 83       	std	Y+2, r24	; 0x02
 464:	6b 83       	std	Y+3, r22	; 0x03
 466:	4c 83       	std	Y+4, r20	; 0x04
	
	uint8_t u8_ErrorState = u8_DIO_OK;
 468:	82 e0       	ldi	r24, 0x02	; 2
 46a:	89 83       	std	Y+1, r24	; 0x01
	if(u8_PinNum>=u8_DIO_PIN0 && u8_PinNum<=u8_DIO_PIN7)
 46c:	8b 81       	ldd	r24, Y+3	; 0x03
 46e:	88 30       	cpi	r24, 0x08	; 8
 470:	08 f0       	brcs	.+2      	; 0x474 <DIO_u8SetPinDir+0x20>
 472:	ee c0       	rjmp	.+476    	; 0x650 <DIO_u8SetPinDir+0x1fc>
	{
		switch(u8_PortNum)
 474:	8a 81       	ldd	r24, Y+2	; 0x02
 476:	28 2f       	mov	r18, r24
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	3e 83       	std	Y+6, r19	; 0x06
 47c:	2d 83       	std	Y+5, r18	; 0x05
 47e:	8d 81       	ldd	r24, Y+5	; 0x05
 480:	9e 81       	ldd	r25, Y+6	; 0x06
 482:	89 30       	cpi	r24, 0x09	; 9
 484:	91 05       	cpc	r25, r1
 486:	09 f4       	brne	.+2      	; 0x48a <DIO_u8SetPinDir+0x36>
 488:	4a c0       	rjmp	.+148    	; 0x51e <DIO_u8SetPinDir+0xca>
 48a:	2d 81       	ldd	r18, Y+5	; 0x05
 48c:	3e 81       	ldd	r19, Y+6	; 0x06
 48e:	2a 30       	cpi	r18, 0x0A	; 10
 490:	31 05       	cpc	r19, r1
 492:	34 f4       	brge	.+12     	; 0x4a0 <DIO_u8SetPinDir+0x4c>
 494:	8d 81       	ldd	r24, Y+5	; 0x05
 496:	9e 81       	ldd	r25, Y+6	; 0x06
 498:	88 30       	cpi	r24, 0x08	; 8
 49a:	91 05       	cpc	r25, r1
 49c:	71 f0       	breq	.+28     	; 0x4ba <DIO_u8SetPinDir+0x66>
 49e:	d5 c0       	rjmp	.+426    	; 0x64a <DIO_u8SetPinDir+0x1f6>
 4a0:	2d 81       	ldd	r18, Y+5	; 0x05
 4a2:	3e 81       	ldd	r19, Y+6	; 0x06
 4a4:	2a 30       	cpi	r18, 0x0A	; 10
 4a6:	31 05       	cpc	r19, r1
 4a8:	09 f4       	brne	.+2      	; 0x4ac <DIO_u8SetPinDir+0x58>
 4aa:	6b c0       	rjmp	.+214    	; 0x582 <DIO_u8SetPinDir+0x12e>
 4ac:	8d 81       	ldd	r24, Y+5	; 0x05
 4ae:	9e 81       	ldd	r25, Y+6	; 0x06
 4b0:	8b 30       	cpi	r24, 0x0B	; 11
 4b2:	91 05       	cpc	r25, r1
 4b4:	09 f4       	brne	.+2      	; 0x4b8 <DIO_u8SetPinDir+0x64>
 4b6:	97 c0       	rjmp	.+302    	; 0x5e6 <DIO_u8SetPinDir+0x192>
 4b8:	c8 c0       	rjmp	.+400    	; 0x64a <DIO_u8SetPinDir+0x1f6>
		{
			case u8_DIO_PORTA: if(u8_PinDir ==u8_DIO_OUTPUT_PIN)
 4ba:	8c 81       	ldd	r24, Y+4	; 0x04
 4bc:	81 30       	cpi	r24, 0x01	; 1
 4be:	a1 f4       	brne	.+40     	; 0x4e8 <DIO_u8SetPinDir+0x94>
							   {
									SET_BIT(Ru8_DDRA,u8_PinNum) ;
 4c0:	aa e3       	ldi	r26, 0x3A	; 58
 4c2:	b0 e0       	ldi	r27, 0x00	; 0
 4c4:	ea e3       	ldi	r30, 0x3A	; 58
 4c6:	f0 e0       	ldi	r31, 0x00	; 0
 4c8:	80 81       	ld	r24, Z
 4ca:	48 2f       	mov	r20, r24
 4cc:	8b 81       	ldd	r24, Y+3	; 0x03
 4ce:	28 2f       	mov	r18, r24
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	02 2e       	mov	r0, r18
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <DIO_u8SetPinDir+0x8a>
 4da:	88 0f       	add	r24, r24
 4dc:	99 1f       	adc	r25, r25
 4de:	0a 94       	dec	r0
 4e0:	e2 f7       	brpl	.-8      	; 0x4da <DIO_u8SetPinDir+0x86>
 4e2:	84 2b       	or	r24, r20
 4e4:	8c 93       	st	X, r24
 4e6:	b6 c0       	rjmp	.+364    	; 0x654 <DIO_u8SetPinDir+0x200>
							   }
							   else if(u8_PinDir ==u8_DIO_INPUT_PIN)
 4e8:	8c 81       	ldd	r24, Y+4	; 0x04
 4ea:	88 23       	and	r24, r24
 4ec:	a9 f4       	brne	.+42     	; 0x518 <DIO_u8SetPinDir+0xc4>
							   {
									CLR_BIT(Ru8_DDRA,u8_PinNum) ;
 4ee:	aa e3       	ldi	r26, 0x3A	; 58
 4f0:	b0 e0       	ldi	r27, 0x00	; 0
 4f2:	ea e3       	ldi	r30, 0x3A	; 58
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	80 81       	ld	r24, Z
 4f8:	48 2f       	mov	r20, r24
 4fa:	8b 81       	ldd	r24, Y+3	; 0x03
 4fc:	28 2f       	mov	r18, r24
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	02 2e       	mov	r0, r18
 506:	02 c0       	rjmp	.+4      	; 0x50c <DIO_u8SetPinDir+0xb8>
 508:	88 0f       	add	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	0a 94       	dec	r0
 50e:	e2 f7       	brpl	.-8      	; 0x508 <DIO_u8SetPinDir+0xb4>
 510:	80 95       	com	r24
 512:	84 23       	and	r24, r20
 514:	8c 93       	st	X, r24
 516:	9e c0       	rjmp	.+316    	; 0x654 <DIO_u8SetPinDir+0x200>
							   }
							   else 
							   {
									u8_ErrorState = u8_DIO_NOK ; 
 518:	83 e0       	ldi	r24, 0x03	; 3
 51a:	89 83       	std	Y+1, r24	; 0x01
 51c:	9b c0       	rjmp	.+310    	; 0x654 <DIO_u8SetPinDir+0x200>
							   }
							   break;
	
			case u8_DIO_PORTB: if(u8_PinDir ==u8_DIO_OUTPUT_PIN)
 51e:	8c 81       	ldd	r24, Y+4	; 0x04
 520:	81 30       	cpi	r24, 0x01	; 1
 522:	a1 f4       	brne	.+40     	; 0x54c <DIO_u8SetPinDir+0xf8>
							   {
									SET_BIT(Ru8_DDRB,u8_PinNum) ;
 524:	a7 e3       	ldi	r26, 0x37	; 55
 526:	b0 e0       	ldi	r27, 0x00	; 0
 528:	e7 e3       	ldi	r30, 0x37	; 55
 52a:	f0 e0       	ldi	r31, 0x00	; 0
 52c:	80 81       	ld	r24, Z
 52e:	48 2f       	mov	r20, r24
 530:	8b 81       	ldd	r24, Y+3	; 0x03
 532:	28 2f       	mov	r18, r24
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	02 2e       	mov	r0, r18
 53c:	02 c0       	rjmp	.+4      	; 0x542 <DIO_u8SetPinDir+0xee>
 53e:	88 0f       	add	r24, r24
 540:	99 1f       	adc	r25, r25
 542:	0a 94       	dec	r0
 544:	e2 f7       	brpl	.-8      	; 0x53e <DIO_u8SetPinDir+0xea>
 546:	84 2b       	or	r24, r20
 548:	8c 93       	st	X, r24
 54a:	84 c0       	rjmp	.+264    	; 0x654 <DIO_u8SetPinDir+0x200>
							   }
							   else if(u8_PinDir ==u8_DIO_INPUT_PIN)
 54c:	8c 81       	ldd	r24, Y+4	; 0x04
 54e:	88 23       	and	r24, r24
 550:	a9 f4       	brne	.+42     	; 0x57c <DIO_u8SetPinDir+0x128>
							   {
									CLR_BIT(Ru8_DDRB,u8_PinNum) ;
 552:	a7 e3       	ldi	r26, 0x37	; 55
 554:	b0 e0       	ldi	r27, 0x00	; 0
 556:	e7 e3       	ldi	r30, 0x37	; 55
 558:	f0 e0       	ldi	r31, 0x00	; 0
 55a:	80 81       	ld	r24, Z
 55c:	48 2f       	mov	r20, r24
 55e:	8b 81       	ldd	r24, Y+3	; 0x03
 560:	28 2f       	mov	r18, r24
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	02 2e       	mov	r0, r18
 56a:	02 c0       	rjmp	.+4      	; 0x570 <DIO_u8SetPinDir+0x11c>
 56c:	88 0f       	add	r24, r24
 56e:	99 1f       	adc	r25, r25
 570:	0a 94       	dec	r0
 572:	e2 f7       	brpl	.-8      	; 0x56c <DIO_u8SetPinDir+0x118>
 574:	80 95       	com	r24
 576:	84 23       	and	r24, r20
 578:	8c 93       	st	X, r24
 57a:	6c c0       	rjmp	.+216    	; 0x654 <DIO_u8SetPinDir+0x200>
							   }
							   else 
							   {
									u8_ErrorState = u8_DIO_NOK ; 
 57c:	83 e0       	ldi	r24, 0x03	; 3
 57e:	89 83       	std	Y+1, r24	; 0x01
 580:	69 c0       	rjmp	.+210    	; 0x654 <DIO_u8SetPinDir+0x200>
							   }
							   break;
							   
			case u8_DIO_PORTC:  if(u8_PinDir ==u8_DIO_OUTPUT_PIN)
 582:	8c 81       	ldd	r24, Y+4	; 0x04
 584:	81 30       	cpi	r24, 0x01	; 1
 586:	a1 f4       	brne	.+40     	; 0x5b0 <DIO_u8SetPinDir+0x15c>
							    {
									SET_BIT(Ru8_DDRC,u8_PinNum) ;
 588:	a4 e3       	ldi	r26, 0x34	; 52
 58a:	b0 e0       	ldi	r27, 0x00	; 0
 58c:	e4 e3       	ldi	r30, 0x34	; 52
 58e:	f0 e0       	ldi	r31, 0x00	; 0
 590:	80 81       	ld	r24, Z
 592:	48 2f       	mov	r20, r24
 594:	8b 81       	ldd	r24, Y+3	; 0x03
 596:	28 2f       	mov	r18, r24
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	02 2e       	mov	r0, r18
 5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <DIO_u8SetPinDir+0x152>
 5a2:	88 0f       	add	r24, r24
 5a4:	99 1f       	adc	r25, r25
 5a6:	0a 94       	dec	r0
 5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <DIO_u8SetPinDir+0x14e>
 5aa:	84 2b       	or	r24, r20
 5ac:	8c 93       	st	X, r24
 5ae:	52 c0       	rjmp	.+164    	; 0x654 <DIO_u8SetPinDir+0x200>
								}
								else if(u8_PinDir ==u8_DIO_INPUT_PIN)
 5b0:	8c 81       	ldd	r24, Y+4	; 0x04
 5b2:	88 23       	and	r24, r24
 5b4:	a9 f4       	brne	.+42     	; 0x5e0 <DIO_u8SetPinDir+0x18c>
								{
									CLR_BIT(Ru8_DDRC,u8_PinNum) ;
 5b6:	a4 e3       	ldi	r26, 0x34	; 52
 5b8:	b0 e0       	ldi	r27, 0x00	; 0
 5ba:	e4 e3       	ldi	r30, 0x34	; 52
 5bc:	f0 e0       	ldi	r31, 0x00	; 0
 5be:	80 81       	ld	r24, Z
 5c0:	48 2f       	mov	r20, r24
 5c2:	8b 81       	ldd	r24, Y+3	; 0x03
 5c4:	28 2f       	mov	r18, r24
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	02 2e       	mov	r0, r18
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <DIO_u8SetPinDir+0x180>
 5d0:	88 0f       	add	r24, r24
 5d2:	99 1f       	adc	r25, r25
 5d4:	0a 94       	dec	r0
 5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <DIO_u8SetPinDir+0x17c>
 5d8:	80 95       	com	r24
 5da:	84 23       	and	r24, r20
 5dc:	8c 93       	st	X, r24
 5de:	3a c0       	rjmp	.+116    	; 0x654 <DIO_u8SetPinDir+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
 5e0:	83 e0       	ldi	r24, 0x03	; 3
 5e2:	89 83       	std	Y+1, r24	; 0x01
 5e4:	37 c0       	rjmp	.+110    	; 0x654 <DIO_u8SetPinDir+0x200>
								}
								break;
		
			case u8_DIO_PORTD: if(u8_PinDir ==u8_DIO_OUTPUT_PIN)
 5e6:	8c 81       	ldd	r24, Y+4	; 0x04
 5e8:	81 30       	cpi	r24, 0x01	; 1
 5ea:	a1 f4       	brne	.+40     	; 0x614 <DIO_u8SetPinDir+0x1c0>
							    {
									SET_BIT(Ru8_DDRD,u8_PinNum) ;
 5ec:	a1 e3       	ldi	r26, 0x31	; 49
 5ee:	b0 e0       	ldi	r27, 0x00	; 0
 5f0:	e1 e3       	ldi	r30, 0x31	; 49
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	80 81       	ld	r24, Z
 5f6:	48 2f       	mov	r20, r24
 5f8:	8b 81       	ldd	r24, Y+3	; 0x03
 5fa:	28 2f       	mov	r18, r24
 5fc:	30 e0       	ldi	r19, 0x00	; 0
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	02 2e       	mov	r0, r18
 604:	02 c0       	rjmp	.+4      	; 0x60a <DIO_u8SetPinDir+0x1b6>
 606:	88 0f       	add	r24, r24
 608:	99 1f       	adc	r25, r25
 60a:	0a 94       	dec	r0
 60c:	e2 f7       	brpl	.-8      	; 0x606 <DIO_u8SetPinDir+0x1b2>
 60e:	84 2b       	or	r24, r20
 610:	8c 93       	st	X, r24
 612:	20 c0       	rjmp	.+64     	; 0x654 <DIO_u8SetPinDir+0x200>
								}
								else if(u8_PinDir ==u8_DIO_INPUT_PIN)
 614:	8c 81       	ldd	r24, Y+4	; 0x04
 616:	88 23       	and	r24, r24
 618:	a9 f4       	brne	.+42     	; 0x644 <DIO_u8SetPinDir+0x1f0>
								{
									CLR_BIT(Ru8_DDRD,u8_PinNum) ;
 61a:	a1 e3       	ldi	r26, 0x31	; 49
 61c:	b0 e0       	ldi	r27, 0x00	; 0
 61e:	e1 e3       	ldi	r30, 0x31	; 49
 620:	f0 e0       	ldi	r31, 0x00	; 0
 622:	80 81       	ld	r24, Z
 624:	48 2f       	mov	r20, r24
 626:	8b 81       	ldd	r24, Y+3	; 0x03
 628:	28 2f       	mov	r18, r24
 62a:	30 e0       	ldi	r19, 0x00	; 0
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	02 2e       	mov	r0, r18
 632:	02 c0       	rjmp	.+4      	; 0x638 <DIO_u8SetPinDir+0x1e4>
 634:	88 0f       	add	r24, r24
 636:	99 1f       	adc	r25, r25
 638:	0a 94       	dec	r0
 63a:	e2 f7       	brpl	.-8      	; 0x634 <DIO_u8SetPinDir+0x1e0>
 63c:	80 95       	com	r24
 63e:	84 23       	and	r24, r20
 640:	8c 93       	st	X, r24
 642:	08 c0       	rjmp	.+16     	; 0x654 <DIO_u8SetPinDir+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
 644:	83 e0       	ldi	r24, 0x03	; 3
 646:	89 83       	std	Y+1, r24	; 0x01
 648:	05 c0       	rjmp	.+10     	; 0x654 <DIO_u8SetPinDir+0x200>
								}
								break;
			
			default          : u8_ErrorState = u8_DIO_NOK ; 
 64a:	83 e0       	ldi	r24, 0x03	; 3
 64c:	89 83       	std	Y+1, r24	; 0x01
 64e:	02 c0       	rjmp	.+4      	; 0x654 <DIO_u8SetPinDir+0x200>
								break ; 
		}
	}
	else 
	{
		u8_ErrorState = u8_DIO_NOK ; 
 650:	83 e0       	ldi	r24, 0x03	; 3
 652:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_ErrorState  ; 
 654:	89 81       	ldd	r24, Y+1	; 0x01
}
 656:	26 96       	adiw	r28, 0x06	; 6
 658:	0f b6       	in	r0, 0x3f	; 63
 65a:	f8 94       	cli
 65c:	de bf       	out	0x3e, r29	; 62
 65e:	0f be       	out	0x3f, r0	; 63
 660:	cd bf       	out	0x3d, r28	; 61
 662:	cf 91       	pop	r28
 664:	df 91       	pop	r29
 666:	08 95       	ret

00000668 <DIO_u8SetPortVal>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8SetPortVal(uint8_t u8_PortNum,uint8_t u8_PortState)
{
 668:	df 93       	push	r29
 66a:	cf 93       	push	r28
 66c:	00 d0       	rcall	.+0      	; 0x66e <DIO_u8SetPortVal+0x6>
 66e:	00 d0       	rcall	.+0      	; 0x670 <DIO_u8SetPortVal+0x8>
 670:	0f 92       	push	r0
 672:	cd b7       	in	r28, 0x3d	; 61
 674:	de b7       	in	r29, 0x3e	; 62
 676:	8a 83       	std	Y+2, r24	; 0x02
 678:	6b 83       	std	Y+3, r22	; 0x03
		uint8_t u8_ErrorState = u8_DIO_OK;
 67a:	82 e0       	ldi	r24, 0x02	; 2
 67c:	89 83       	std	Y+1, r24	; 0x01

		switch(u8_PortNum)
 67e:	8a 81       	ldd	r24, Y+2	; 0x02
 680:	28 2f       	mov	r18, r24
 682:	30 e0       	ldi	r19, 0x00	; 0
 684:	3d 83       	std	Y+5, r19	; 0x05
 686:	2c 83       	std	Y+4, r18	; 0x04
 688:	8c 81       	ldd	r24, Y+4	; 0x04
 68a:	9d 81       	ldd	r25, Y+5	; 0x05
 68c:	89 30       	cpi	r24, 0x09	; 9
 68e:	91 05       	cpc	r25, r1
 690:	d9 f0       	breq	.+54     	; 0x6c8 <DIO_u8SetPortVal+0x60>
 692:	2c 81       	ldd	r18, Y+4	; 0x04
 694:	3d 81       	ldd	r19, Y+5	; 0x05
 696:	2a 30       	cpi	r18, 0x0A	; 10
 698:	31 05       	cpc	r19, r1
 69a:	34 f4       	brge	.+12     	; 0x6a8 <DIO_u8SetPortVal+0x40>
 69c:	8c 81       	ldd	r24, Y+4	; 0x04
 69e:	9d 81       	ldd	r25, Y+5	; 0x05
 6a0:	88 30       	cpi	r24, 0x08	; 8
 6a2:	91 05       	cpc	r25, r1
 6a4:	61 f0       	breq	.+24     	; 0x6be <DIO_u8SetPortVal+0x56>
 6a6:	1f c0       	rjmp	.+62     	; 0x6e6 <DIO_u8SetPortVal+0x7e>
 6a8:	2c 81       	ldd	r18, Y+4	; 0x04
 6aa:	3d 81       	ldd	r19, Y+5	; 0x05
 6ac:	2a 30       	cpi	r18, 0x0A	; 10
 6ae:	31 05       	cpc	r19, r1
 6b0:	81 f0       	breq	.+32     	; 0x6d2 <DIO_u8SetPortVal+0x6a>
 6b2:	8c 81       	ldd	r24, Y+4	; 0x04
 6b4:	9d 81       	ldd	r25, Y+5	; 0x05
 6b6:	8b 30       	cpi	r24, 0x0B	; 11
 6b8:	91 05       	cpc	r25, r1
 6ba:	81 f0       	breq	.+32     	; 0x6dc <DIO_u8SetPortVal+0x74>
 6bc:	14 c0       	rjmp	.+40     	; 0x6e6 <DIO_u8SetPortVal+0x7e>
		{
			case u8_DIO_PORTA: Ru8_PORTA = u8_PortState ;  break ;			   
 6be:	eb e3       	ldi	r30, 0x3B	; 59
 6c0:	f0 e0       	ldi	r31, 0x00	; 0
 6c2:	8b 81       	ldd	r24, Y+3	; 0x03
 6c4:	80 83       	st	Z, r24
 6c6:	11 c0       	rjmp	.+34     	; 0x6ea <DIO_u8SetPortVal+0x82>
			case u8_DIO_PORTB: Ru8_PORTB = u8_PortState ;  break ;	
 6c8:	e8 e3       	ldi	r30, 0x38	; 56
 6ca:	f0 e0       	ldi	r31, 0x00	; 0
 6cc:	8b 81       	ldd	r24, Y+3	; 0x03
 6ce:	80 83       	st	Z, r24
 6d0:	0c c0       	rjmp	.+24     	; 0x6ea <DIO_u8SetPortVal+0x82>
			case u8_DIO_PORTC: Ru8_PORTC = u8_PortState ;  break ;	
 6d2:	e5 e3       	ldi	r30, 0x35	; 53
 6d4:	f0 e0       	ldi	r31, 0x00	; 0
 6d6:	8b 81       	ldd	r24, Y+3	; 0x03
 6d8:	80 83       	st	Z, r24
 6da:	07 c0       	rjmp	.+14     	; 0x6ea <DIO_u8SetPortVal+0x82>
			case u8_DIO_PORTD: Ru8_PORTD = u8_PortState ;  break ;	
 6dc:	e2 e3       	ldi	r30, 0x32	; 50
 6de:	f0 e0       	ldi	r31, 0x00	; 0
 6e0:	8b 81       	ldd	r24, Y+3	; 0x03
 6e2:	80 83       	st	Z, r24
 6e4:	02 c0       	rjmp	.+4      	; 0x6ea <DIO_u8SetPortVal+0x82>
			default          : u8_ErrorState = u8_DIO_NOK; break ; 
 6e6:	83 e0       	ldi	r24, 0x03	; 3
 6e8:	89 83       	std	Y+1, r24	; 0x01
		}
		
	return u8_ErrorState  ; 
 6ea:	89 81       	ldd	r24, Y+1	; 0x01
}
 6ec:	0f 90       	pop	r0
 6ee:	0f 90       	pop	r0
 6f0:	0f 90       	pop	r0
 6f2:	0f 90       	pop	r0
 6f4:	0f 90       	pop	r0
 6f6:	cf 91       	pop	r28
 6f8:	df 91       	pop	r29
 6fa:	08 95       	ret

000006fc <DIO_u8SetPortDir>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8SetPortDir(uint8_t u8_PortNum,uint8_t u8_PortDir)
{
 6fc:	df 93       	push	r29
 6fe:	cf 93       	push	r28
 700:	00 d0       	rcall	.+0      	; 0x702 <DIO_u8SetPortDir+0x6>
 702:	00 d0       	rcall	.+0      	; 0x704 <DIO_u8SetPortDir+0x8>
 704:	0f 92       	push	r0
 706:	cd b7       	in	r28, 0x3d	; 61
 708:	de b7       	in	r29, 0x3e	; 62
 70a:	8a 83       	std	Y+2, r24	; 0x02
 70c:	6b 83       	std	Y+3, r22	; 0x03
		uint8_t u8_ErrorState = u8_DIO_OK;
 70e:	82 e0       	ldi	r24, 0x02	; 2
 710:	89 83       	std	Y+1, r24	; 0x01
		switch(u8_PortNum)
 712:	8a 81       	ldd	r24, Y+2	; 0x02
 714:	28 2f       	mov	r18, r24
 716:	30 e0       	ldi	r19, 0x00	; 0
 718:	3d 83       	std	Y+5, r19	; 0x05
 71a:	2c 83       	std	Y+4, r18	; 0x04
 71c:	8c 81       	ldd	r24, Y+4	; 0x04
 71e:	9d 81       	ldd	r25, Y+5	; 0x05
 720:	89 30       	cpi	r24, 0x09	; 9
 722:	91 05       	cpc	r25, r1
 724:	d9 f0       	breq	.+54     	; 0x75c <DIO_u8SetPortDir+0x60>
 726:	2c 81       	ldd	r18, Y+4	; 0x04
 728:	3d 81       	ldd	r19, Y+5	; 0x05
 72a:	2a 30       	cpi	r18, 0x0A	; 10
 72c:	31 05       	cpc	r19, r1
 72e:	34 f4       	brge	.+12     	; 0x73c <DIO_u8SetPortDir+0x40>
 730:	8c 81       	ldd	r24, Y+4	; 0x04
 732:	9d 81       	ldd	r25, Y+5	; 0x05
 734:	88 30       	cpi	r24, 0x08	; 8
 736:	91 05       	cpc	r25, r1
 738:	61 f0       	breq	.+24     	; 0x752 <DIO_u8SetPortDir+0x56>
 73a:	1f c0       	rjmp	.+62     	; 0x77a <DIO_u8SetPortDir+0x7e>
 73c:	2c 81       	ldd	r18, Y+4	; 0x04
 73e:	3d 81       	ldd	r19, Y+5	; 0x05
 740:	2a 30       	cpi	r18, 0x0A	; 10
 742:	31 05       	cpc	r19, r1
 744:	81 f0       	breq	.+32     	; 0x766 <DIO_u8SetPortDir+0x6a>
 746:	8c 81       	ldd	r24, Y+4	; 0x04
 748:	9d 81       	ldd	r25, Y+5	; 0x05
 74a:	8b 30       	cpi	r24, 0x0B	; 11
 74c:	91 05       	cpc	r25, r1
 74e:	81 f0       	breq	.+32     	; 0x770 <DIO_u8SetPortDir+0x74>
 750:	14 c0       	rjmp	.+40     	; 0x77a <DIO_u8SetPortDir+0x7e>
		{
			case u8_DIO_PORTA: Ru8_DDRA = u8_PortDir ;     break ;			   
 752:	ea e3       	ldi	r30, 0x3A	; 58
 754:	f0 e0       	ldi	r31, 0x00	; 0
 756:	8b 81       	ldd	r24, Y+3	; 0x03
 758:	80 83       	st	Z, r24
 75a:	11 c0       	rjmp	.+34     	; 0x77e <DIO_u8SetPortDir+0x82>
			case u8_DIO_PORTB: Ru8_DDRB = u8_PortDir ;     break ;	
 75c:	e7 e3       	ldi	r30, 0x37	; 55
 75e:	f0 e0       	ldi	r31, 0x00	; 0
 760:	8b 81       	ldd	r24, Y+3	; 0x03
 762:	80 83       	st	Z, r24
 764:	0c c0       	rjmp	.+24     	; 0x77e <DIO_u8SetPortDir+0x82>
			case u8_DIO_PORTC: Ru8_DDRC = u8_PortDir ;     break ;	
 766:	e4 e3       	ldi	r30, 0x34	; 52
 768:	f0 e0       	ldi	r31, 0x00	; 0
 76a:	8b 81       	ldd	r24, Y+3	; 0x03
 76c:	80 83       	st	Z, r24
 76e:	07 c0       	rjmp	.+14     	; 0x77e <DIO_u8SetPortDir+0x82>
			case u8_DIO_PORTD: Ru8_DDRD = u8_PortDir ;     break ;	
 770:	e1 e3       	ldi	r30, 0x31	; 49
 772:	f0 e0       	ldi	r31, 0x00	; 0
 774:	8b 81       	ldd	r24, Y+3	; 0x03
 776:	80 83       	st	Z, r24
 778:	02 c0       	rjmp	.+4      	; 0x77e <DIO_u8SetPortDir+0x82>
			default          : u8_ErrorState = u8_DIO_NOK; break ; 
 77a:	83 e0       	ldi	r24, 0x03	; 3
 77c:	89 83       	std	Y+1, r24	; 0x01
		}
		
	return u8_ErrorState  ; 
 77e:	89 81       	ldd	r24, Y+1	; 0x01
}
 780:	0f 90       	pop	r0
 782:	0f 90       	pop	r0
 784:	0f 90       	pop	r0
 786:	0f 90       	pop	r0
 788:	0f 90       	pop	r0
 78a:	cf 91       	pop	r28
 78c:	df 91       	pop	r29
 78e:	08 95       	ret

00000790 <DIO_u8GetPinVal>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8GetPinVal(uint8_t u8_PortNum,uint8_t u8_PinNum,uint8_t* pu8_ReturnedPinVal)      
{
 790:	df 93       	push	r29
 792:	cf 93       	push	r28
 794:	cd b7       	in	r28, 0x3d	; 61
 796:	de b7       	in	r29, 0x3e	; 62
 798:	27 97       	sbiw	r28, 0x07	; 7
 79a:	0f b6       	in	r0, 0x3f	; 63
 79c:	f8 94       	cli
 79e:	de bf       	out	0x3e, r29	; 62
 7a0:	0f be       	out	0x3f, r0	; 63
 7a2:	cd bf       	out	0x3d, r28	; 61
 7a4:	8a 83       	std	Y+2, r24	; 0x02
 7a6:	6b 83       	std	Y+3, r22	; 0x03
 7a8:	5d 83       	std	Y+5, r21	; 0x05
 7aa:	4c 83       	std	Y+4, r20	; 0x04
		uint8_t u8_ErrorState = u8_DIO_OK;
 7ac:	82 e0       	ldi	r24, 0x02	; 2
 7ae:	89 83       	std	Y+1, r24	; 0x01
		if(u8_PinNum>=u8_DIO_PIN0 && u8_PinNum<=u8_DIO_PIN7)
 7b0:	8b 81       	ldd	r24, Y+3	; 0x03
 7b2:	88 30       	cpi	r24, 0x08	; 8
 7b4:	08 f0       	brcs	.+2      	; 0x7b8 <DIO_u8GetPinVal+0x28>
 7b6:	74 c0       	rjmp	.+232    	; 0x8a0 <__stack+0x41>
		{
			switch(u8_PortNum)
 7b8:	8a 81       	ldd	r24, Y+2	; 0x02
 7ba:	28 2f       	mov	r18, r24
 7bc:	30 e0       	ldi	r19, 0x00	; 0
 7be:	3f 83       	std	Y+7, r19	; 0x07
 7c0:	2e 83       	std	Y+6, r18	; 0x06
 7c2:	4e 81       	ldd	r20, Y+6	; 0x06
 7c4:	5f 81       	ldd	r21, Y+7	; 0x07
 7c6:	49 30       	cpi	r20, 0x09	; 9
 7c8:	51 05       	cpc	r21, r1
 7ca:	59 f1       	breq	.+86     	; 0x822 <DIO_u8GetPinVal+0x92>
 7cc:	8e 81       	ldd	r24, Y+6	; 0x06
 7ce:	9f 81       	ldd	r25, Y+7	; 0x07
 7d0:	8a 30       	cpi	r24, 0x0A	; 10
 7d2:	91 05       	cpc	r25, r1
 7d4:	34 f4       	brge	.+12     	; 0x7e2 <DIO_u8GetPinVal+0x52>
 7d6:	2e 81       	ldd	r18, Y+6	; 0x06
 7d8:	3f 81       	ldd	r19, Y+7	; 0x07
 7da:	28 30       	cpi	r18, 0x08	; 8
 7dc:	31 05       	cpc	r19, r1
 7de:	69 f0       	breq	.+26     	; 0x7fa <DIO_u8GetPinVal+0x6a>
 7e0:	5c c0       	rjmp	.+184    	; 0x89a <__stack+0x3b>
 7e2:	4e 81       	ldd	r20, Y+6	; 0x06
 7e4:	5f 81       	ldd	r21, Y+7	; 0x07
 7e6:	4a 30       	cpi	r20, 0x0A	; 10
 7e8:	51 05       	cpc	r21, r1
 7ea:	79 f1       	breq	.+94     	; 0x84a <DIO_u8GetPinVal+0xba>
 7ec:	8e 81       	ldd	r24, Y+6	; 0x06
 7ee:	9f 81       	ldd	r25, Y+7	; 0x07
 7f0:	8b 30       	cpi	r24, 0x0B	; 11
 7f2:	91 05       	cpc	r25, r1
 7f4:	09 f4       	brne	.+2      	; 0x7f8 <DIO_u8GetPinVal+0x68>
 7f6:	3d c0       	rjmp	.+122    	; 0x872 <__stack+0x13>
 7f8:	50 c0       	rjmp	.+160    	; 0x89a <__stack+0x3b>
			{
				case u8_DIO_PORTA: (*pu8_ReturnedPinVal) = GET_BIT(Ru8_PINA,u8_PinNum)  ; break ;
 7fa:	e9 e3       	ldi	r30, 0x39	; 57
 7fc:	f0 e0       	ldi	r31, 0x00	; 0
 7fe:	80 81       	ld	r24, Z
 800:	28 2f       	mov	r18, r24
 802:	30 e0       	ldi	r19, 0x00	; 0
 804:	8b 81       	ldd	r24, Y+3	; 0x03
 806:	88 2f       	mov	r24, r24
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	a9 01       	movw	r20, r18
 80c:	02 c0       	rjmp	.+4      	; 0x812 <DIO_u8GetPinVal+0x82>
 80e:	55 95       	asr	r21
 810:	47 95       	ror	r20
 812:	8a 95       	dec	r24
 814:	e2 f7       	brpl	.-8      	; 0x80e <DIO_u8GetPinVal+0x7e>
 816:	ca 01       	movw	r24, r20
 818:	81 70       	andi	r24, 0x01	; 1
 81a:	ec 81       	ldd	r30, Y+4	; 0x04
 81c:	fd 81       	ldd	r31, Y+5	; 0x05
 81e:	80 83       	st	Z, r24
 820:	41 c0       	rjmp	.+130    	; 0x8a4 <__stack+0x45>
				case u8_DIO_PORTB: (*pu8_ReturnedPinVal) = GET_BIT(Ru8_PINB,u8_PinNum)  ; break ;
 822:	e6 e3       	ldi	r30, 0x36	; 54
 824:	f0 e0       	ldi	r31, 0x00	; 0
 826:	80 81       	ld	r24, Z
 828:	28 2f       	mov	r18, r24
 82a:	30 e0       	ldi	r19, 0x00	; 0
 82c:	8b 81       	ldd	r24, Y+3	; 0x03
 82e:	88 2f       	mov	r24, r24
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	a9 01       	movw	r20, r18
 834:	02 c0       	rjmp	.+4      	; 0x83a <DIO_u8GetPinVal+0xaa>
 836:	55 95       	asr	r21
 838:	47 95       	ror	r20
 83a:	8a 95       	dec	r24
 83c:	e2 f7       	brpl	.-8      	; 0x836 <DIO_u8GetPinVal+0xa6>
 83e:	ca 01       	movw	r24, r20
 840:	81 70       	andi	r24, 0x01	; 1
 842:	ec 81       	ldd	r30, Y+4	; 0x04
 844:	fd 81       	ldd	r31, Y+5	; 0x05
 846:	80 83       	st	Z, r24
 848:	2d c0       	rjmp	.+90     	; 0x8a4 <__stack+0x45>
				case u8_DIO_PORTC: (*pu8_ReturnedPinVal) = GET_BIT(Ru8_PINC,u8_PinNum)  ; break ;
 84a:	e3 e3       	ldi	r30, 0x33	; 51
 84c:	f0 e0       	ldi	r31, 0x00	; 0
 84e:	80 81       	ld	r24, Z
 850:	28 2f       	mov	r18, r24
 852:	30 e0       	ldi	r19, 0x00	; 0
 854:	8b 81       	ldd	r24, Y+3	; 0x03
 856:	88 2f       	mov	r24, r24
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	a9 01       	movw	r20, r18
 85c:	02 c0       	rjmp	.+4      	; 0x862 <__stack+0x3>
 85e:	55 95       	asr	r21
 860:	47 95       	ror	r20
 862:	8a 95       	dec	r24
 864:	e2 f7       	brpl	.-8      	; 0x85e <DIO_u8GetPinVal+0xce>
 866:	ca 01       	movw	r24, r20
 868:	81 70       	andi	r24, 0x01	; 1
 86a:	ec 81       	ldd	r30, Y+4	; 0x04
 86c:	fd 81       	ldd	r31, Y+5	; 0x05
 86e:	80 83       	st	Z, r24
 870:	19 c0       	rjmp	.+50     	; 0x8a4 <__stack+0x45>
				case u8_DIO_PORTD: (*pu8_ReturnedPinVal) = GET_BIT(Ru8_PIND,u8_PinNum)  ; break ;
 872:	e0 e3       	ldi	r30, 0x30	; 48
 874:	f0 e0       	ldi	r31, 0x00	; 0
 876:	80 81       	ld	r24, Z
 878:	28 2f       	mov	r18, r24
 87a:	30 e0       	ldi	r19, 0x00	; 0
 87c:	8b 81       	ldd	r24, Y+3	; 0x03
 87e:	88 2f       	mov	r24, r24
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	a9 01       	movw	r20, r18
 884:	02 c0       	rjmp	.+4      	; 0x88a <__stack+0x2b>
 886:	55 95       	asr	r21
 888:	47 95       	ror	r20
 88a:	8a 95       	dec	r24
 88c:	e2 f7       	brpl	.-8      	; 0x886 <__stack+0x27>
 88e:	ca 01       	movw	r24, r20
 890:	81 70       	andi	r24, 0x01	; 1
 892:	ec 81       	ldd	r30, Y+4	; 0x04
 894:	fd 81       	ldd	r31, Y+5	; 0x05
 896:	80 83       	st	Z, r24
 898:	05 c0       	rjmp	.+10     	; 0x8a4 <__stack+0x45>
				default          : u8_ErrorState = u8_DIO_NOK; 							 break ; 
 89a:	83 e0       	ldi	r24, 0x03	; 3
 89c:	89 83       	std	Y+1, r24	; 0x01
 89e:	02 c0       	rjmp	.+4      	; 0x8a4 <__stack+0x45>
			}
		}
		else 
		{
			u8_ErrorState = u8_DIO_NOK;
 8a0:	83 e0       	ldi	r24, 0x03	; 3
 8a2:	89 83       	std	Y+1, r24	; 0x01
		}
	return u8_ErrorState  ; 
 8a4:	89 81       	ldd	r24, Y+1	; 0x01
}
 8a6:	27 96       	adiw	r28, 0x07	; 7
 8a8:	0f b6       	in	r0, 0x3f	; 63
 8aa:	f8 94       	cli
 8ac:	de bf       	out	0x3e, r29	; 62
 8ae:	0f be       	out	0x3f, r0	; 63
 8b0:	cd bf       	out	0x3d, r28	; 61
 8b2:	cf 91       	pop	r28
 8b4:	df 91       	pop	r29
 8b6:	08 95       	ret

000008b8 <DIO_u8GetPortVal>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8GetPortVal(uint8_t u8_PortNum,uint8_t* pu8_ReturnedPortVal)           
{
 8b8:	df 93       	push	r29
 8ba:	cf 93       	push	r28
 8bc:	00 d0       	rcall	.+0      	; 0x8be <DIO_u8GetPortVal+0x6>
 8be:	00 d0       	rcall	.+0      	; 0x8c0 <DIO_u8GetPortVal+0x8>
 8c0:	00 d0       	rcall	.+0      	; 0x8c2 <DIO_u8GetPortVal+0xa>
 8c2:	cd b7       	in	r28, 0x3d	; 61
 8c4:	de b7       	in	r29, 0x3e	; 62
 8c6:	8a 83       	std	Y+2, r24	; 0x02
 8c8:	7c 83       	std	Y+4, r23	; 0x04
 8ca:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8_ErrorState = u8_DIO_OK;
 8cc:	82 e0       	ldi	r24, 0x02	; 2
 8ce:	89 83       	std	Y+1, r24	; 0x01

	switch(u8_PortNum)
 8d0:	8a 81       	ldd	r24, Y+2	; 0x02
 8d2:	28 2f       	mov	r18, r24
 8d4:	30 e0       	ldi	r19, 0x00	; 0
 8d6:	3e 83       	std	Y+6, r19	; 0x06
 8d8:	2d 83       	std	Y+5, r18	; 0x05
 8da:	8d 81       	ldd	r24, Y+5	; 0x05
 8dc:	9e 81       	ldd	r25, Y+6	; 0x06
 8de:	89 30       	cpi	r24, 0x09	; 9
 8e0:	91 05       	cpc	r25, r1
 8e2:	e9 f0       	breq	.+58     	; 0x91e <DIO_u8GetPortVal+0x66>
 8e4:	2d 81       	ldd	r18, Y+5	; 0x05
 8e6:	3e 81       	ldd	r19, Y+6	; 0x06
 8e8:	2a 30       	cpi	r18, 0x0A	; 10
 8ea:	31 05       	cpc	r19, r1
 8ec:	34 f4       	brge	.+12     	; 0x8fa <DIO_u8GetPortVal+0x42>
 8ee:	8d 81       	ldd	r24, Y+5	; 0x05
 8f0:	9e 81       	ldd	r25, Y+6	; 0x06
 8f2:	88 30       	cpi	r24, 0x08	; 8
 8f4:	91 05       	cpc	r25, r1
 8f6:	61 f0       	breq	.+24     	; 0x910 <DIO_u8GetPortVal+0x58>
 8f8:	27 c0       	rjmp	.+78     	; 0x948 <DIO_u8GetPortVal+0x90>
 8fa:	2d 81       	ldd	r18, Y+5	; 0x05
 8fc:	3e 81       	ldd	r19, Y+6	; 0x06
 8fe:	2a 30       	cpi	r18, 0x0A	; 10
 900:	31 05       	cpc	r19, r1
 902:	a1 f0       	breq	.+40     	; 0x92c <DIO_u8GetPortVal+0x74>
 904:	8d 81       	ldd	r24, Y+5	; 0x05
 906:	9e 81       	ldd	r25, Y+6	; 0x06
 908:	8b 30       	cpi	r24, 0x0B	; 11
 90a:	91 05       	cpc	r25, r1
 90c:	b1 f0       	breq	.+44     	; 0x93a <DIO_u8GetPortVal+0x82>
 90e:	1c c0       	rjmp	.+56     	; 0x948 <DIO_u8GetPortVal+0x90>
	{
		case u8_DIO_PORTA: (*pu8_ReturnedPortVal) = Ru8_PINA ;  break ;
 910:	e9 e3       	ldi	r30, 0x39	; 57
 912:	f0 e0       	ldi	r31, 0x00	; 0
 914:	80 81       	ld	r24, Z
 916:	eb 81       	ldd	r30, Y+3	; 0x03
 918:	fc 81       	ldd	r31, Y+4	; 0x04
 91a:	80 83       	st	Z, r24
 91c:	17 c0       	rjmp	.+46     	; 0x94c <DIO_u8GetPortVal+0x94>
		case u8_DIO_PORTB: (*pu8_ReturnedPortVal) = Ru8_PINB ;  break ;
 91e:	e6 e3       	ldi	r30, 0x36	; 54
 920:	f0 e0       	ldi	r31, 0x00	; 0
 922:	80 81       	ld	r24, Z
 924:	eb 81       	ldd	r30, Y+3	; 0x03
 926:	fc 81       	ldd	r31, Y+4	; 0x04
 928:	80 83       	st	Z, r24
 92a:	10 c0       	rjmp	.+32     	; 0x94c <DIO_u8GetPortVal+0x94>
		case u8_DIO_PORTC: (*pu8_ReturnedPortVal) = Ru8_PINC ;  break ;
 92c:	e3 e3       	ldi	r30, 0x33	; 51
 92e:	f0 e0       	ldi	r31, 0x00	; 0
 930:	80 81       	ld	r24, Z
 932:	eb 81       	ldd	r30, Y+3	; 0x03
 934:	fc 81       	ldd	r31, Y+4	; 0x04
 936:	80 83       	st	Z, r24
 938:	09 c0       	rjmp	.+18     	; 0x94c <DIO_u8GetPortVal+0x94>
		case u8_DIO_PORTD: (*pu8_ReturnedPortVal) = Ru8_PIND ;  break ;
 93a:	e0 e3       	ldi	r30, 0x30	; 48
 93c:	f0 e0       	ldi	r31, 0x00	; 0
 93e:	80 81       	ld	r24, Z
 940:	eb 81       	ldd	r30, Y+3	; 0x03
 942:	fc 81       	ldd	r31, Y+4	; 0x04
 944:	80 83       	st	Z, r24
 946:	02 c0       	rjmp	.+4      	; 0x94c <DIO_u8GetPortVal+0x94>
		default          :  u8_ErrorState = u8_DIO_NOK; 	    break ;
 948:	83 e0       	ldi	r24, 0x03	; 3
 94a:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8_ErrorState  ; 
 94c:	89 81       	ldd	r24, Y+1	; 0x01
}
 94e:	26 96       	adiw	r28, 0x06	; 6
 950:	0f b6       	in	r0, 0x3f	; 63
 952:	f8 94       	cli
 954:	de bf       	out	0x3e, r29	; 62
 956:	0f be       	out	0x3f, r0	; 63
 958:	cd bf       	out	0x3d, r28	; 61
 95a:	cf 91       	pop	r28
 95c:	df 91       	pop	r29
 95e:	08 95       	ret

00000960 <DIO_u8TogPinVal>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8TogPinVal(uint8_t u8_PortNum,uint8_t u8_PinNum)           
{
 960:	df 93       	push	r29
 962:	cf 93       	push	r28
 964:	00 d0       	rcall	.+0      	; 0x966 <DIO_u8TogPinVal+0x6>
 966:	00 d0       	rcall	.+0      	; 0x968 <DIO_u8TogPinVal+0x8>
 968:	0f 92       	push	r0
 96a:	cd b7       	in	r28, 0x3d	; 61
 96c:	de b7       	in	r29, 0x3e	; 62
 96e:	8a 83       	std	Y+2, r24	; 0x02
 970:	6b 83       	std	Y+3, r22	; 0x03
		uint8_t u8_ErrorState = u8_DIO_OK;
 972:	82 e0       	ldi	r24, 0x02	; 2
 974:	89 83       	std	Y+1, r24	; 0x01
		if(u8_PinNum>=u8_DIO_PIN0 && u8_PinNum<=u8_DIO_PIN7)
 976:	8b 81       	ldd	r24, Y+3	; 0x03
 978:	88 30       	cpi	r24, 0x08	; 8
 97a:	08 f0       	brcs	.+2      	; 0x97e <DIO_u8TogPinVal+0x1e>
 97c:	73 c0       	rjmp	.+230    	; 0xa64 <DIO_u8TogPinVal+0x104>
		{
			switch(u8_PortNum)
 97e:	8a 81       	ldd	r24, Y+2	; 0x02
 980:	28 2f       	mov	r18, r24
 982:	30 e0       	ldi	r19, 0x00	; 0
 984:	3d 83       	std	Y+5, r19	; 0x05
 986:	2c 83       	std	Y+4, r18	; 0x04
 988:	8c 81       	ldd	r24, Y+4	; 0x04
 98a:	9d 81       	ldd	r25, Y+5	; 0x05
 98c:	89 30       	cpi	r24, 0x09	; 9
 98e:	91 05       	cpc	r25, r1
 990:	51 f1       	breq	.+84     	; 0x9e6 <DIO_u8TogPinVal+0x86>
 992:	2c 81       	ldd	r18, Y+4	; 0x04
 994:	3d 81       	ldd	r19, Y+5	; 0x05
 996:	2a 30       	cpi	r18, 0x0A	; 10
 998:	31 05       	cpc	r19, r1
 99a:	34 f4       	brge	.+12     	; 0x9a8 <DIO_u8TogPinVal+0x48>
 99c:	8c 81       	ldd	r24, Y+4	; 0x04
 99e:	9d 81       	ldd	r25, Y+5	; 0x05
 9a0:	88 30       	cpi	r24, 0x08	; 8
 9a2:	91 05       	cpc	r25, r1
 9a4:	61 f0       	breq	.+24     	; 0x9be <DIO_u8TogPinVal+0x5e>
 9a6:	5b c0       	rjmp	.+182    	; 0xa5e <DIO_u8TogPinVal+0xfe>
 9a8:	2c 81       	ldd	r18, Y+4	; 0x04
 9aa:	3d 81       	ldd	r19, Y+5	; 0x05
 9ac:	2a 30       	cpi	r18, 0x0A	; 10
 9ae:	31 05       	cpc	r19, r1
 9b0:	71 f1       	breq	.+92     	; 0xa0e <DIO_u8TogPinVal+0xae>
 9b2:	8c 81       	ldd	r24, Y+4	; 0x04
 9b4:	9d 81       	ldd	r25, Y+5	; 0x05
 9b6:	8b 30       	cpi	r24, 0x0B	; 11
 9b8:	91 05       	cpc	r25, r1
 9ba:	e9 f1       	breq	.+122    	; 0xa36 <DIO_u8TogPinVal+0xd6>
 9bc:	50 c0       	rjmp	.+160    	; 0xa5e <DIO_u8TogPinVal+0xfe>
			{
				case u8_DIO_PORTA: TOG_BIT(Ru8_PORTA,u8_PinNum) ;  break ;
 9be:	ab e3       	ldi	r26, 0x3B	; 59
 9c0:	b0 e0       	ldi	r27, 0x00	; 0
 9c2:	eb e3       	ldi	r30, 0x3B	; 59
 9c4:	f0 e0       	ldi	r31, 0x00	; 0
 9c6:	80 81       	ld	r24, Z
 9c8:	48 2f       	mov	r20, r24
 9ca:	8b 81       	ldd	r24, Y+3	; 0x03
 9cc:	28 2f       	mov	r18, r24
 9ce:	30 e0       	ldi	r19, 0x00	; 0
 9d0:	81 e0       	ldi	r24, 0x01	; 1
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	02 2e       	mov	r0, r18
 9d6:	02 c0       	rjmp	.+4      	; 0x9dc <DIO_u8TogPinVal+0x7c>
 9d8:	88 0f       	add	r24, r24
 9da:	99 1f       	adc	r25, r25
 9dc:	0a 94       	dec	r0
 9de:	e2 f7       	brpl	.-8      	; 0x9d8 <DIO_u8TogPinVal+0x78>
 9e0:	84 27       	eor	r24, r20
 9e2:	8c 93       	st	X, r24
 9e4:	41 c0       	rjmp	.+130    	; 0xa68 <DIO_u8TogPinVal+0x108>
				case u8_DIO_PORTB: TOG_BIT(Ru8_PORTB,u8_PinNum) ;  break ;
 9e6:	a8 e3       	ldi	r26, 0x38	; 56
 9e8:	b0 e0       	ldi	r27, 0x00	; 0
 9ea:	e8 e3       	ldi	r30, 0x38	; 56
 9ec:	f0 e0       	ldi	r31, 0x00	; 0
 9ee:	80 81       	ld	r24, Z
 9f0:	48 2f       	mov	r20, r24
 9f2:	8b 81       	ldd	r24, Y+3	; 0x03
 9f4:	28 2f       	mov	r18, r24
 9f6:	30 e0       	ldi	r19, 0x00	; 0
 9f8:	81 e0       	ldi	r24, 0x01	; 1
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	02 2e       	mov	r0, r18
 9fe:	02 c0       	rjmp	.+4      	; 0xa04 <DIO_u8TogPinVal+0xa4>
 a00:	88 0f       	add	r24, r24
 a02:	99 1f       	adc	r25, r25
 a04:	0a 94       	dec	r0
 a06:	e2 f7       	brpl	.-8      	; 0xa00 <DIO_u8TogPinVal+0xa0>
 a08:	84 27       	eor	r24, r20
 a0a:	8c 93       	st	X, r24
 a0c:	2d c0       	rjmp	.+90     	; 0xa68 <DIO_u8TogPinVal+0x108>
				case u8_DIO_PORTC: TOG_BIT(Ru8_PORTC,u8_PinNum) ;  break ;
 a0e:	a5 e3       	ldi	r26, 0x35	; 53
 a10:	b0 e0       	ldi	r27, 0x00	; 0
 a12:	e5 e3       	ldi	r30, 0x35	; 53
 a14:	f0 e0       	ldi	r31, 0x00	; 0
 a16:	80 81       	ld	r24, Z
 a18:	48 2f       	mov	r20, r24
 a1a:	8b 81       	ldd	r24, Y+3	; 0x03
 a1c:	28 2f       	mov	r18, r24
 a1e:	30 e0       	ldi	r19, 0x00	; 0
 a20:	81 e0       	ldi	r24, 0x01	; 1
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	02 2e       	mov	r0, r18
 a26:	02 c0       	rjmp	.+4      	; 0xa2c <DIO_u8TogPinVal+0xcc>
 a28:	88 0f       	add	r24, r24
 a2a:	99 1f       	adc	r25, r25
 a2c:	0a 94       	dec	r0
 a2e:	e2 f7       	brpl	.-8      	; 0xa28 <DIO_u8TogPinVal+0xc8>
 a30:	84 27       	eor	r24, r20
 a32:	8c 93       	st	X, r24
 a34:	19 c0       	rjmp	.+50     	; 0xa68 <DIO_u8TogPinVal+0x108>
				case u8_DIO_PORTD: TOG_BIT(Ru8_PORTD,u8_PinNum) ;  break ;
 a36:	a2 e3       	ldi	r26, 0x32	; 50
 a38:	b0 e0       	ldi	r27, 0x00	; 0
 a3a:	e2 e3       	ldi	r30, 0x32	; 50
 a3c:	f0 e0       	ldi	r31, 0x00	; 0
 a3e:	80 81       	ld	r24, Z
 a40:	48 2f       	mov	r20, r24
 a42:	8b 81       	ldd	r24, Y+3	; 0x03
 a44:	28 2f       	mov	r18, r24
 a46:	30 e0       	ldi	r19, 0x00	; 0
 a48:	81 e0       	ldi	r24, 0x01	; 1
 a4a:	90 e0       	ldi	r25, 0x00	; 0
 a4c:	02 2e       	mov	r0, r18
 a4e:	02 c0       	rjmp	.+4      	; 0xa54 <DIO_u8TogPinVal+0xf4>
 a50:	88 0f       	add	r24, r24
 a52:	99 1f       	adc	r25, r25
 a54:	0a 94       	dec	r0
 a56:	e2 f7       	brpl	.-8      	; 0xa50 <DIO_u8TogPinVal+0xf0>
 a58:	84 27       	eor	r24, r20
 a5a:	8c 93       	st	X, r24
 a5c:	05 c0       	rjmp	.+10     	; 0xa68 <DIO_u8TogPinVal+0x108>
				default          :  u8_ErrorState = u8_DIO_NOK;   break ; 
 a5e:	83 e0       	ldi	r24, 0x03	; 3
 a60:	89 83       	std	Y+1, r24	; 0x01
 a62:	02 c0       	rjmp	.+4      	; 0xa68 <DIO_u8TogPinVal+0x108>
			}
		}
		else 
		{
			u8_ErrorState = u8_DIO_NOK;
 a64:	83 e0       	ldi	r24, 0x03	; 3
 a66:	89 83       	std	Y+1, r24	; 0x01
		}
	return u8_ErrorState  ; 
 a68:	89 81       	ldd	r24, Y+1	; 0x01
}
 a6a:	0f 90       	pop	r0
 a6c:	0f 90       	pop	r0
 a6e:	0f 90       	pop	r0
 a70:	0f 90       	pop	r0
 a72:	0f 90       	pop	r0
 a74:	cf 91       	pop	r28
 a76:	df 91       	pop	r29
 a78:	08 95       	ret

00000a7a <DIO_voidDisablePullUps>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void DIO_voidDisablePullUps(void)   
{
 a7a:	df 93       	push	r29
 a7c:	cf 93       	push	r28
 a7e:	cd b7       	in	r28, 0x3d	; 61
 a80:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(Ru8_SFIOR,u8_PUD) ;
 a82:	a0 e5       	ldi	r26, 0x50	; 80
 a84:	b0 e0       	ldi	r27, 0x00	; 0
 a86:	e0 e5       	ldi	r30, 0x50	; 80
 a88:	f0 e0       	ldi	r31, 0x00	; 0
 a8a:	80 81       	ld	r24, Z
 a8c:	84 60       	ori	r24, 0x04	; 4
 a8e:	8c 93       	st	X, r24
}
 a90:	cf 91       	pop	r28
 a92:	df 91       	pop	r29
 a94:	08 95       	ret

00000a96 <DIO_voidEnablePullUps>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void DIO_voidEnablePullUps(void)  
{
 a96:	df 93       	push	r29
 a98:	cf 93       	push	r28
 a9a:	cd b7       	in	r28, 0x3d	; 61
 a9c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(Ru8_SFIOR,u8_PUD) ;
 a9e:	a0 e5       	ldi	r26, 0x50	; 80
 aa0:	b0 e0       	ldi	r27, 0x00	; 0
 aa2:	e0 e5       	ldi	r30, 0x50	; 80
 aa4:	f0 e0       	ldi	r31, 0x00	; 0
 aa6:	80 81       	ld	r24, Z
 aa8:	8b 7f       	andi	r24, 0xFB	; 251
 aaa:	8c 93       	st	X, r24
}
 aac:	cf 91       	pop	r28
 aae:	df 91       	pop	r29
 ab0:	08 95       	ret

00000ab2 <main>:




int main(void)
{
 ab2:	df 93       	push	r29
 ab4:	cf 93       	push	r28
 ab6:	00 d0       	rcall	.+0      	; 0xab8 <main+0x6>
 ab8:	cd b7       	in	r28, 0x3d	; 61
 aba:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_receiveData ,u8_dummy ;
	SPI_voidInit() ;
 abc:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_voidInit>
	//receive data and send dummy byte
	u8_receiveData = SPI_voidTransever(u8_dummy) ;
 ac0:	89 81       	ldd	r24, Y+1	; 0x01
 ac2:	0e 94 91 00 	call	0x122	; 0x122 <SPI_voidTransever>
 ac6:	8a 83       	std	Y+2, r24	; 0x02
	//make DIO port A output port
	DIO_u8SetPortDir(u8_DIO_PORTA,u8_DIO_OUTPUT_PORT) ;
 ac8:	88 e0       	ldi	r24, 0x08	; 8
 aca:	6f ef       	ldi	r22, 0xFF	; 255
 acc:	0e 94 7e 03 	call	0x6fc	; 0x6fc <DIO_u8SetPortDir>
	//Set the received value on slave port A
	DIO_u8SetPortVal(u8_DIO_PORTA,u8_receiveData) ;
 ad0:	88 e0       	ldi	r24, 0x08	; 8
 ad2:	6a 81       	ldd	r22, Y+2	; 0x02
 ad4:	0e 94 34 03 	call	0x668	; 0x668 <DIO_u8SetPortVal>
 ad8:	ff cf       	rjmp	.-2      	; 0xad8 <main+0x26>

00000ada <_exit>:
 ada:	f8 94       	cli

00000adc <__stop_program>:
 adc:	ff cf       	rjmp	.-2      	; 0xadc <__stop_program>
