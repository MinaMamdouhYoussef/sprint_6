
uart_echo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000019e6  00001a7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800062  00800062  00001a7c  2**0
                  ALLOC
  3 .stab         00001f8c  00000000  00000000  00001a7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d3a  00000000  00000000  00003a08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <__vector_10>
      2c:	0c 94 8a 04 	jmp	0x914	; 0x914 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ee       	ldi	r30, 0xE6	; 230
      68:	f9 e1       	ldi	r31, 0x19	; 25
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 36       	cpi	r26, 0x62	; 98
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e6       	ldi	r26, 0x62	; 98
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 36       	cpi	r26, 0x6E	; 110
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cf 0c 	call	0x199e	; 0x199e <main>
      8a:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <USART_voidInit>:

extern uint8_t gu8_FinishIntWaitFlag ;  


void USART_voidInit(void) 
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	TIMERS_voidInit();
      9a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <TIMERS_voidInit>
	CLR_BIT(Ru8_UCSRA,u8_USART_UDRE);
      9e:	ab e2       	ldi	r26, 0x2B	; 43
      a0:	b0 e0       	ldi	r27, 0x00	; 0
      a2:	eb e2       	ldi	r30, 0x2B	; 43
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	8f 7d       	andi	r24, 0xDF	; 223
      aa:	8c 93       	st	X, r24
	CLR_BIT(Ru8_UCSRA,u8_USART_FE);
      ac:	ab e2       	ldi	r26, 0x2B	; 43
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	eb e2       	ldi	r30, 0x2B	; 43
      b2:	f0 e0       	ldi	r31, 0x00	; 0
      b4:	80 81       	ld	r24, Z
      b6:	8f 7e       	andi	r24, 0xEF	; 239
      b8:	8c 93       	st	X, r24
	CLR_BIT(Ru8_UCSRA,u8_USART_DOR);
      ba:	ab e2       	ldi	r26, 0x2B	; 43
      bc:	b0 e0       	ldi	r27, 0x00	; 0
      be:	eb e2       	ldi	r30, 0x2B	; 43
      c0:	f0 e0       	ldi	r31, 0x00	; 0
      c2:	80 81       	ld	r24, Z
      c4:	87 7f       	andi	r24, 0xF7	; 247
      c6:	8c 93       	st	X, r24
	CLR_BIT(Ru8_UCSRA,u8_USART_PE);
      c8:	ab e2       	ldi	r26, 0x2B	; 43
      ca:	b0 e0       	ldi	r27, 0x00	; 0
      cc:	eb e2       	ldi	r30, 0x2B	; 43
      ce:	f0 e0       	ldi	r31, 0x00	; 0
      d0:	80 81       	ld	r24, Z
      d2:	8b 7f       	andi	r24, 0xFB	; 251
      d4:	8c 93       	st	X, r24

	//U2X is disabled 
	CLR_BIT(Ru8_UCSRA,u8_USART_U2X);
      d6:	ab e2       	ldi	r26, 0x2B	; 43
      d8:	b0 e0       	ldi	r27, 0x00	; 0
      da:	eb e2       	ldi	r30, 0x2B	; 43
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	80 81       	ld	r24, Z
      e0:	8d 7f       	andi	r24, 0xFD	; 253
      e2:	8c 93       	st	X, r24
	//multiprocessor (Master-Slave) disabled
	CLR_BIT(Ru8_UCSRA,u8_USART_MPCM);
      e4:	ab e2       	ldi	r26, 0x2B	; 43
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	eb e2       	ldi	r30, 0x2B	; 43
      ea:	f0 e0       	ldi	r31, 0x00	; 0
      ec:	80 81       	ld	r24, Z
      ee:	8e 7f       	andi	r24, 0xFE	; 254
      f0:	8c 93       	st	X, r24
	

    DIO_u8SetPinDir(u8_USART_PORT,u8_USART_RX_PIN,u8_DIO_INPUT_PIN);
      f2:	8b e0       	ldi	r24, 0x0B	; 11
      f4:	60 e0       	ldi	r22, 0x00	; 0
      f6:	40 e0       	ldi	r20, 0x00	; 0
      f8:	0e 94 a0 09 	call	0x1340	; 0x1340 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(u8_USART_PORT,u8_USART_TX_PIN,u8_DIO_OUTPUT_PIN);
      fc:	8b e0       	ldi	r24, 0x0B	; 11
      fe:	61 e0       	ldi	r22, 0x01	; 1
     100:	41 e0       	ldi	r20, 0x01	; 1
     102:	0e 94 a0 09 	call	0x1340	; 0x1340 <DIO_u8SetPinDir>
	
	//DIO_u8SetPinVal(u8_USART_PORT,u8_USART_RX_PIN,u8_DIO_PIN_HIGH);
	DIO_u8SetPinVal(u8_USART_PORT,u8_USART_TX_PIN,u8_DIO_PIN_HIGH);
     106:	8b e0       	ldi	r24, 0x0B	; 11
     108:	61 e0       	ldi	r22, 0x01	; 1
     10a:	41 e0       	ldi	r20, 0x01	; 1
     10c:	0e 94 96 08 	call	0x112c	; 0x112c <DIO_u8SetPinVal>
	
	#if u8_USART_RX_COMP_INT_STATE==u8_USART_ENABLE
		SET_BIT(Ru8_UCSRB,u8_USART_RXCIE) ; 
	#elif u8_USART_RX_COMP_INT_STATE==u8_USART_DISABLE
		CLR_BIT(Ru8_UCSRB,u8_USART_RXCIE) ; 
     110:	aa e2       	ldi	r26, 0x2A	; 42
     112:	b0 e0       	ldi	r27, 0x00	; 0
     114:	ea e2       	ldi	r30, 0x2A	; 42
     116:	f0 e0       	ldi	r31, 0x00	; 0
     118:	80 81       	ld	r24, Z
     11a:	8f 77       	andi	r24, 0x7F	; 127
     11c:	8c 93       	st	X, r24
	
	
	#if u8_USART_TX_COMP_INT_STATE==u8_USART_ENABLE
		SET_BIT(Ru8_UCSRB,u8_USART_TXCIE) ; 
	#elif u8_USART_TX_COMP_INT_STATE==u8_USART_DISABLE
		CLR_BIT(Ru8_UCSRB,u8_USART_TXCIE) ; 
     11e:	aa e2       	ldi	r26, 0x2A	; 42
     120:	b0 e0       	ldi	r27, 0x00	; 0
     122:	ea e2       	ldi	r30, 0x2A	; 42
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	80 81       	ld	r24, Z
     128:	8f 7b       	andi	r24, 0xBF	; 191
     12a:	8c 93       	st	X, r24
	
	
	#if u8_USART_DATA_REG_EMPTY_INT_STATE==u8_USART_ENABLE
		SET_BIT(Ru8_UCSRB,u8_USART_UDRIE) ; 
	#elif u8_USART_DATA_REG_EMPTY_INT_STATE== u8_USART_DISABLE
		CLR_BIT(Ru8_UCSRB,u8_USART_UDRIE) ; 
     12c:	aa e2       	ldi	r26, 0x2A	; 42
     12e:	b0 e0       	ldi	r27, 0x00	; 0
     130:	ea e2       	ldi	r30, 0x2A	; 42
     132:	f0 e0       	ldi	r31, 0x00	; 0
     134:	80 81       	ld	r24, Z
     136:	8f 7d       	andi	r24, 0xDF	; 223
     138:	8c 93       	st	X, r24
		#error "Pre-build config error in set Data Reg Empty int state"
	#endif
	
	
	#if u8_USART_TRANS_STATE==u8_USART_ENABLE 
		SET_BIT(Ru8_UCSRB,u8_USART_TXEN) ; 
     13a:	aa e2       	ldi	r26, 0x2A	; 42
     13c:	b0 e0       	ldi	r27, 0x00	; 0
     13e:	ea e2       	ldi	r30, 0x2A	; 42
     140:	f0 e0       	ldi	r31, 0x00	; 0
     142:	80 81       	ld	r24, Z
     144:	88 60       	ori	r24, 0x08	; 8
     146:	8c 93       	st	X, r24
	#endif
	
	
	
	#if u8_USART_RECEIVE_STATE==u8_USART_ENABLE
		SET_BIT(Ru8_UCSRB,u8_USART_RXEN) ; 
     148:	aa e2       	ldi	r26, 0x2A	; 42
     14a:	b0 e0       	ldi	r27, 0x00	; 0
     14c:	ea e2       	ldi	r30, 0x2A	; 42
     14e:	f0 e0       	ldi	r31, 0x00	; 0
     150:	80 81       	ld	r24, Z
     152:	80 61       	ori	r24, 0x10	; 16
     154:	8c 93       	st	X, r24
		#else 
			#error "Pre-build config error in set Parity Config"
		#endif
	#elif u8_USART_USEFULL_DATA_IN_FRAME==u8_USART_8BITS_TO_TRANS
		#if u8_USART_PARITY_CONFIG==u8_USART_PARITY_DISABLE
			Ru8_UBRRH_UCSRC = ((u8_USART_SET<<u8_USART_URSEL)
     156:	e0 e4       	ldi	r30, 0x40	; 64
     158:	f0 e0       	ldi	r31, 0x00	; 0
     15a:	86 e8       	ldi	r24, 0x86	; 134
     15c:	80 83       	st	Z, r24
							  |(u8_USART_SET<<u8_USART_UCSZ1) |(u8_USART_SET<<u8_USART_UCSZ0)) ; 
			CLR_BIT(Ru8_UCSRB,u8_USART_UCSZ2) ; 
     15e:	aa e2       	ldi	r26, 0x2A	; 42
     160:	b0 e0       	ldi	r27, 0x00	; 0
     162:	ea e2       	ldi	r30, 0x2A	; 42
     164:	f0 e0       	ldi	r31, 0x00	; 0
     166:	80 81       	ld	r24, Z
     168:	8b 7f       	andi	r24, 0xFB	; 251
     16a:	8c 93       	st	X, r24
	#else 
		#error "Pre-build config error in set Trans usefull data size "
	#endif 
	
		
	Ru8_UBRRL = u8_USART_BAUD_RATE_9600;
     16c:	e9 e2       	ldi	r30, 0x29	; 41
     16e:	f0 e0       	ldi	r31, 0x00	; 0
     170:	83 e3       	ldi	r24, 0x33	; 51
     172:	80 83       	st	Z, r24

}
     174:	cf 91       	pop	r28
     176:	df 91       	pop	r29
     178:	08 95       	ret

0000017a <USART_u8TransData>:

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//function that transmit data sent in argument to another usart device
uint8_t USART_u8TransData(uint8_t u8_DataSent)
{
     17a:	df 93       	push	r29
     17c:	cf 93       	push	r28
     17e:	00 d0       	rcall	.+0      	; 0x180 <USART_u8TransData+0x6>
     180:	cd b7       	in	r28, 0x3d	; 61
     182:	de b7       	in	r29, 0x3e	; 62
     184:	8a 83       	std	Y+2, r24	; 0x02
	//the state of the data if sent of not
	uint8_t u8_DataState = u8_USART_DATA_NOT_SENT ;
     186:	82 e8       	ldi	r24, 0x82	; 130
     188:	89 83       	std	Y+1, r24	; 0x01
	//make timer0 compare on match interrupt enable to config the time out
	TIMERS_u8IntModesEn(u8_TIMER0_COMPARE_ON_MATCH) ;
     18a:	82 e1       	ldi	r24, 0x12	; 18
     18c:	0e 94 81 03 	call	0x702	; 0x702 <TIMERS_u8IntModesEn>
	//config the interrupt time as the user want
	TIMER0_u8InterruptWait(u8_MAX_WAIT_IN_MS) ;
     190:	60 ee       	ldi	r22, 0xE0	; 224
     192:	7e e2       	ldi	r23, 0x2E	; 46
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	0e 94 05 07 	call	0xe0a	; 0xe0a <TIMER0_u8InterruptWait>
     19c:	1a c0       	rjmp	.+52     	; 0x1d2 <USART_u8TransData+0x58>
	//time out pulling to make sure if the function reached this time, return to main
	while(gu8_FinishIntWaitFlag!=u8_FINISH_INTERRUPT_WAITING)
	{
		//check if the transmit reg is empty or not and, if so,send the wanted data
		if(GET_BIT(Ru8_UCSRA,u8_USART_UDRE)==u8_USART_DATA_REG_EMPTY)
     19e:	eb e2       	ldi	r30, 0x2B	; 43
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
     1a2:	80 81       	ld	r24, Z
     1a4:	82 95       	swap	r24
     1a6:	86 95       	lsr	r24
     1a8:	87 70       	andi	r24, 0x07	; 7
     1aa:	88 2f       	mov	r24, r24
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	81 70       	andi	r24, 0x01	; 1
     1b0:	90 70       	andi	r25, 0x00	; 0
     1b2:	88 23       	and	r24, r24
     1b4:	71 f0       	breq	.+28     	; 0x1d2 <USART_u8TransData+0x58>
		{
			Ru8_UDR = u8_DataSent ;
     1b6:	ec e2       	ldi	r30, 0x2C	; 44
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	8a 81       	ldd	r24, Y+2	; 0x02
     1bc:	80 83       	st	Z, r24
			SET_BIT(Ru8_UCSRA,u8_USART_TXC) ;
     1be:	ab e2       	ldi	r26, 0x2B	; 43
     1c0:	b0 e0       	ldi	r27, 0x00	; 0
     1c2:	eb e2       	ldi	r30, 0x2B	; 43
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
     1c6:	80 81       	ld	r24, Z
     1c8:	80 64       	ori	r24, 0x40	; 64
     1ca:	8c 93       	st	X, r24
			u8_DataState = u8_USART_DATA_SENT ;
     1cc:	83 e8       	ldi	r24, 0x83	; 131
     1ce:	89 83       	std	Y+1, r24	; 0x01
     1d0:	04 c0       	rjmp	.+8      	; 0x1da <USART_u8TransData+0x60>
	//make timer0 compare on match interrupt enable to config the time out
	TIMERS_u8IntModesEn(u8_TIMER0_COMPARE_ON_MATCH) ;
	//config the interrupt time as the user want
	TIMER0_u8InterruptWait(u8_MAX_WAIT_IN_MS) ;
	//time out pulling to make sure if the function reached this time, return to main
	while(gu8_FinishIntWaitFlag!=u8_FINISH_INTERRUPT_WAITING)
     1d2:	80 91 60 00 	lds	r24, 0x0060
     1d6:	86 31       	cpi	r24, 0x16	; 22
     1d8:	11 f7       	brne	.-60     	; 0x19e <USART_u8TransData+0x24>
			break ;
		}

	}
	//disable the interrupt
	TIMERS_u8IntModesDis(u8_TIMER0_COMPARE_ON_MATCH) ;
     1da:	82 e1       	ldi	r24, 0x12	; 18
     1dc:	0e 94 c1 03 	call	0x782	; 0x782 <TIMERS_u8IntModesDis>
	//return the received data
	return  u8_DataState ; 
     1e0:	89 81       	ldd	r24, Y+1	; 0x01
}
     1e2:	0f 90       	pop	r0
     1e4:	0f 90       	pop	r0
     1e6:	cf 91       	pop	r28
     1e8:	df 91       	pop	r29
     1ea:	08 95       	ret

000001ec <USART_u8ReceiveData>:

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//receive data from another usart device
uint8_t USART_u8ReceiveData(uint8_t* pu8_DataReceive)
{
     1ec:	df 93       	push	r29
     1ee:	cf 93       	push	r28
     1f0:	00 d0       	rcall	.+0      	; 0x1f2 <USART_u8ReceiveData+0x6>
     1f2:	00 d0       	rcall	.+0      	; 0x1f4 <USART_u8ReceiveData+0x8>
     1f4:	cd b7       	in	r28, 0x3d	; 61
     1f6:	de b7       	in	r29, 0x3e	; 62
     1f8:	9b 83       	std	Y+3, r25	; 0x03
     1fa:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_ReturnReciveState = u8_USART_NOT_RECEIVED ;   
     1fc:	8f e8       	ldi	r24, 0x8F	; 143
     1fe:	89 83       	std	Y+1, r24	; 0x01
	if(pu8_DataReceive!=NULL_POINTER)
     200:	8a 81       	ldd	r24, Y+2	; 0x02
     202:	9b 81       	ldd	r25, Y+3	; 0x03
     204:	00 97       	sbiw	r24, 0x00	; 0
     206:	09 f4       	brne	.+2      	; 0x20a <USART_u8ReceiveData+0x1e>
     208:	43 c0       	rjmp	.+134    	; 0x290 <USART_u8ReceiveData+0xa4>
	{
		//config timer to enable interrupt and config time out for receiving
		TIMERS_u8IntModesEn(u8_TIMER0_COMPARE_ON_MATCH) ;
     20a:	82 e1       	ldi	r24, 0x12	; 18
     20c:	0e 94 81 03 	call	0x702	; 0x702 <TIMERS_u8IntModesEn>
		TIMER0_u8InterruptWait(u8_MAX_WAIT_IN_MS) ;
     210:	60 ee       	ldi	r22, 0xE0	; 224
     212:	7e e2       	ldi	r23, 0x2E	; 46
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	0e 94 05 07 	call	0xe0a	; 0xe0a <TIMER0_u8InterruptWait>
     21c:	31 c0       	rjmp	.+98     	; 0x280 <USART_u8ReceiveData+0x94>
		while(gu8_FinishIntWaitFlag!=u8_FINISH_INTERRUPT_WAITING)
		{
			// when the REG receive data , the flag will set, so we will check the data received and return the state of the data
			if(GET_BIT(Ru8_UCSRA,u8_USART_RXC)==u8_USART_FLAG_SET)
     21e:	eb e2       	ldi	r30, 0x2B	; 43
     220:	f0 e0       	ldi	r31, 0x00	; 0
     222:	80 81       	ld	r24, Z
     224:	88 1f       	adc	r24, r24
     226:	88 27       	eor	r24, r24
     228:	88 1f       	adc	r24, r24
     22a:	81 30       	cpi	r24, 0x01	; 1
     22c:	49 f5       	brne	.+82     	; 0x280 <USART_u8ReceiveData+0x94>
			{
				if(GET_BIT(Ru8_UCSRA,u8_USART_FE)==u8_USART_FLAG_SET)
     22e:	eb e2       	ldi	r30, 0x2B	; 43
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	80 81       	ld	r24, Z
     234:	82 95       	swap	r24
     236:	8f 70       	andi	r24, 0x0F	; 15
     238:	88 2f       	mov	r24, r24
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	81 70       	andi	r24, 0x01	; 1
     23e:	90 70       	andi	r25, 0x00	; 0
     240:	88 23       	and	r24, r24
     242:	19 f0       	breq	.+6      	; 0x24a <USART_u8ReceiveData+0x5e>
				{
					u8_ReturnReciveState = u8_USART_FRAME_ERROR ; 
     244:	8d e8       	ldi	r24, 0x8D	; 141
     246:	89 83       	std	Y+1, r24	; 0x01
     248:	14 c0       	rjmp	.+40     	; 0x272 <USART_u8ReceiveData+0x86>
				}
				else if((GET_BIT(Ru8_UCSRA,u8_USART_DOR)==u8_USART_FLAG_SET))
     24a:	eb e2       	ldi	r30, 0x2B	; 43
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	80 81       	ld	r24, Z
     250:	86 95       	lsr	r24
     252:	86 95       	lsr	r24
     254:	86 95       	lsr	r24
     256:	88 2f       	mov	r24, r24
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	81 70       	andi	r24, 0x01	; 1
     25c:	90 70       	andi	r25, 0x00	; 0
     25e:	88 23       	and	r24, r24
     260:	19 f0       	breq	.+6      	; 0x268 <USART_u8ReceiveData+0x7c>
				{
					u8_ReturnReciveState = u8_USART_DATA_OVER_RUN ; 
     262:	8c e8       	ldi	r24, 0x8C	; 140
     264:	89 83       	std	Y+1, r24	; 0x01
     266:	05 c0       	rjmp	.+10     	; 0x272 <USART_u8ReceiveData+0x86>
				}
				else if((GET_BIT(Ru8_UCSRA,u8_USART_PE)==u8_USART_FLAG_SET) && (u8_USART_PARITY_CONFIG != u8_USART_PARITY_DISABLE))
     268:	eb e2       	ldi	r30, 0x2B	; 43
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
				{
					u8_ReturnReciveState = u8_USART_PARITY_ERROR ; 
				}
				else 
				{
					u8_ReturnReciveState = u8_USART_RECEIVED_CORRECT ; 
     26e:	81 e9       	ldi	r24, 0x91	; 145
     270:	89 83       	std	Y+1, r24	; 0x01
				}
				//return the data received
				*pu8_DataReceive = Ru8_UDR ;
     272:	ec e2       	ldi	r30, 0x2C	; 44
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	80 81       	ld	r24, Z
     278:	ea 81       	ldd	r30, Y+2	; 0x02
     27a:	fb 81       	ldd	r31, Y+3	; 0x03
     27c:	80 83       	st	Z, r24
     27e:	04 c0       	rjmp	.+8      	; 0x288 <USART_u8ReceiveData+0x9c>
	if(pu8_DataReceive!=NULL_POINTER)
	{
		//config timer to enable interrupt and config time out for receiving
		TIMERS_u8IntModesEn(u8_TIMER0_COMPARE_ON_MATCH) ;
		TIMER0_u8InterruptWait(u8_MAX_WAIT_IN_MS) ;
		while(gu8_FinishIntWaitFlag!=u8_FINISH_INTERRUPT_WAITING)
     280:	80 91 60 00 	lds	r24, 0x0060
     284:	86 31       	cpi	r24, 0x16	; 22
     286:	59 f6       	brne	.-106    	; 0x21e <USART_u8ReceiveData+0x32>
				//return the data received
				*pu8_DataReceive = Ru8_UDR ;
				break ;
			}
		}
		TIMERS_u8IntModesDis(u8_TIMER0_COMPARE_ON_MATCH) ;
     288:	82 e1       	ldi	r24, 0x12	; 18
     28a:	0e 94 c1 03 	call	0x782	; 0x782 <TIMERS_u8IntModesDis>
     28e:	02 c0       	rjmp	.+4      	; 0x294 <USART_u8ReceiveData+0xa8>
	}
	else
	{
		u8_ReturnReciveState = u8_USART_RECEIVED_NULL_PTR_ARG ;  
     290:	80 e9       	ldi	r24, 0x90	; 144
     292:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_ReturnReciveState ;
     294:	89 81       	ldd	r24, Y+1	; 0x01
}
     296:	0f 90       	pop	r0
     298:	0f 90       	pop	r0
     29a:	0f 90       	pop	r0
     29c:	0f 90       	pop	r0
     29e:	cf 91       	pop	r28
     2a0:	df 91       	pop	r29
     2a2:	08 95       	ret

000002a4 <USART_u8TransStr>:

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//function the use USART_u8TransData function to transmit string
uint8_t USART_u8TransStr(uint8_t* pu8_StrSent)
{
     2a4:	df 93       	push	r29
     2a6:	cf 93       	push	r28
     2a8:	00 d0       	rcall	.+0      	; 0x2aa <USART_u8TransStr+0x6>
     2aa:	00 d0       	rcall	.+0      	; 0x2ac <USART_u8TransStr+0x8>
     2ac:	cd b7       	in	r28, 0x3d	; 61
     2ae:	de b7       	in	r29, 0x3e	; 62
     2b0:	9c 83       	std	Y+4, r25	; 0x04
     2b2:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8_ReturnTransState = u8_USART_DATA_SENT , u8_indexArr = u8_INTIAL_COUNTER_VAL;
     2b4:	83 e8       	ldi	r24, 0x83	; 131
     2b6:	8a 83       	std	Y+2, r24	; 0x02
     2b8:	19 82       	std	Y+1, r1	; 0x01

	if(pu8_StrSent != NULL_POINTER)
     2ba:	8b 81       	ldd	r24, Y+3	; 0x03
     2bc:	9c 81       	ldd	r25, Y+4	; 0x04
     2be:	00 97       	sbiw	r24, 0x00	; 0
     2c0:	f9 f0       	breq	.+62     	; 0x300 <USART_u8TransStr+0x5c>
     2c2:	0f c0       	rjmp	.+30     	; 0x2e2 <USART_u8TransStr+0x3e>
	{
		while(pu8_StrSent[u8_indexArr] !=NULL_CHAR && u8_ReturnTransState == u8_USART_DATA_SENT)
		{
			u8_ReturnTransState = USART_u8TransData(pu8_StrSent[u8_indexArr])  ;
     2c4:	89 81       	ldd	r24, Y+1	; 0x01
     2c6:	28 2f       	mov	r18, r24
     2c8:	30 e0       	ldi	r19, 0x00	; 0
     2ca:	8b 81       	ldd	r24, Y+3	; 0x03
     2cc:	9c 81       	ldd	r25, Y+4	; 0x04
     2ce:	fc 01       	movw	r30, r24
     2d0:	e2 0f       	add	r30, r18
     2d2:	f3 1f       	adc	r31, r19
     2d4:	80 81       	ld	r24, Z
     2d6:	0e 94 bd 00 	call	0x17a	; 0x17a <USART_u8TransData>
     2da:	8a 83       	std	Y+2, r24	; 0x02
			u8_indexArr++ ;
     2dc:	89 81       	ldd	r24, Y+1	; 0x01
     2de:	8f 5f       	subi	r24, 0xFF	; 255
     2e0:	89 83       	std	Y+1, r24	; 0x01
{
	uint8_t u8_ReturnTransState = u8_USART_DATA_SENT , u8_indexArr = u8_INTIAL_COUNTER_VAL;

	if(pu8_StrSent != NULL_POINTER)
	{
		while(pu8_StrSent[u8_indexArr] !=NULL_CHAR && u8_ReturnTransState == u8_USART_DATA_SENT)
     2e2:	89 81       	ldd	r24, Y+1	; 0x01
     2e4:	28 2f       	mov	r18, r24
     2e6:	30 e0       	ldi	r19, 0x00	; 0
     2e8:	8b 81       	ldd	r24, Y+3	; 0x03
     2ea:	9c 81       	ldd	r25, Y+4	; 0x04
     2ec:	fc 01       	movw	r30, r24
     2ee:	e2 0f       	add	r30, r18
     2f0:	f3 1f       	adc	r31, r19
     2f2:	80 81       	ld	r24, Z
     2f4:	88 23       	and	r24, r24
     2f6:	31 f0       	breq	.+12     	; 0x304 <USART_u8TransStr+0x60>
     2f8:	8a 81       	ldd	r24, Y+2	; 0x02
     2fa:	83 38       	cpi	r24, 0x83	; 131
     2fc:	19 f3       	breq	.-58     	; 0x2c4 <USART_u8TransStr+0x20>
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <USART_u8TransStr+0x60>
		}

	}
	else
	{
		u8_ReturnTransState = u8_USART_DATA_NOT_SENT ;
     300:	82 e8       	ldi	r24, 0x82	; 130
     302:	8a 83       	std	Y+2, r24	; 0x02
	}

	return  u8_ReturnTransState ;
     304:	8a 81       	ldd	r24, Y+2	; 0x02
}
     306:	0f 90       	pop	r0
     308:	0f 90       	pop	r0
     30a:	0f 90       	pop	r0
     30c:	0f 90       	pop	r0
     30e:	cf 91       	pop	r28
     310:	df 91       	pop	r29
     312:	08 95       	ret

00000314 <USART_u8ReceiveStr>:

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//function the use USART_u8ReceiveData function to receive string with fixed size and special char to terminate
uint8_t USART_u8ReceiveStr(uint8_t* pu8_StrReceive, uint8_t u8_strSize,uint8_t u8_terminator)
{
     314:	df 93       	push	r29
     316:	cf 93       	push	r28
     318:	00 d0       	rcall	.+0      	; 0x31a <USART_u8ReceiveStr+0x6>
     31a:	00 d0       	rcall	.+0      	; 0x31c <USART_u8ReceiveStr+0x8>
     31c:	00 d0       	rcall	.+0      	; 0x31e <USART_u8ReceiveStr+0xa>
     31e:	cd b7       	in	r28, 0x3d	; 61
     320:	de b7       	in	r29, 0x3e	; 62
     322:	9c 83       	std	Y+4, r25	; 0x04
     324:	8b 83       	std	Y+3, r24	; 0x03
     326:	6d 83       	std	Y+5, r22	; 0x05
     328:	4e 83       	std	Y+6, r20	; 0x06
	uint8_t u8_ReturnTransState = u8_USART_RECEIVED_CORRECT , u8_indexArr = u8_INTIAL_COUNTER_VAL;
     32a:	81 e9       	ldi	r24, 0x91	; 145
     32c:	8a 83       	std	Y+2, r24	; 0x02
     32e:	19 82       	std	Y+1, r1	; 0x01
	if(pu8_StrReceive != NULL_POINTER)
     330:	8b 81       	ldd	r24, Y+3	; 0x03
     332:	9c 81       	ldd	r25, Y+4	; 0x04
     334:	00 97       	sbiw	r24, 0x00	; 0
     336:	a1 f1       	breq	.+104    	; 0x3a0 <USART_u8ReceiveStr+0x8c>
	{
		do
		{
			if(u8_ReturnTransState==u8_USART_RECEIVED_CORRECT)
     338:	8a 81       	ldd	r24, Y+2	; 0x02
     33a:	81 39       	cpi	r24, 0x91	; 145
     33c:	e9 f4       	brne	.+58     	; 0x378 <USART_u8ReceiveStr+0x64>
			{
				u8_ReturnTransState = USART_u8ReceiveData(&(pu8_StrReceive[u8_indexArr]))  ;
     33e:	89 81       	ldd	r24, Y+1	; 0x01
     340:	28 2f       	mov	r18, r24
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	8b 81       	ldd	r24, Y+3	; 0x03
     346:	9c 81       	ldd	r25, Y+4	; 0x04
     348:	82 0f       	add	r24, r18
     34a:	93 1f       	adc	r25, r19
     34c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <USART_u8ReceiveData>
     350:	8a 83       	std	Y+2, r24	; 0x02
				u8_indexArr++ ;
     352:	89 81       	ldd	r24, Y+1	; 0x01
     354:	8f 5f       	subi	r24, 0xFF	; 255
     356:	89 83       	std	Y+1, r24	; 0x01
			else
			{
				u8_ReturnTransState = u8_USART_NOT_RECEIVED ;
 				break ;
			}
		}while(pu8_StrReceive[u8_indexArr-1] != u8_terminator && (u8_indexArr<u8_strSize)) ;
     358:	89 81       	ldd	r24, Y+1	; 0x01
     35a:	88 2f       	mov	r24, r24
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	9c 01       	movw	r18, r24
     360:	21 50       	subi	r18, 0x01	; 1
     362:	30 40       	sbci	r19, 0x00	; 0
     364:	8b 81       	ldd	r24, Y+3	; 0x03
     366:	9c 81       	ldd	r25, Y+4	; 0x04
     368:	fc 01       	movw	r30, r24
     36a:	e2 0f       	add	r30, r18
     36c:	f3 1f       	adc	r31, r19
     36e:	90 81       	ld	r25, Z
     370:	8e 81       	ldd	r24, Y+6	; 0x06
     372:	98 17       	cp	r25, r24
     374:	41 f0       	breq	.+16     	; 0x386 <USART_u8ReceiveStr+0x72>
     376:	03 c0       	rjmp	.+6      	; 0x37e <USART_u8ReceiveStr+0x6a>
				u8_ReturnTransState = USART_u8ReceiveData(&(pu8_StrReceive[u8_indexArr]))  ;
				u8_indexArr++ ;
			}
			else
			{
				u8_ReturnTransState = u8_USART_NOT_RECEIVED ;
     378:	8f e8       	ldi	r24, 0x8F	; 143
     37a:	8a 83       	std	Y+2, r24	; 0x02
     37c:	04 c0       	rjmp	.+8      	; 0x386 <USART_u8ReceiveStr+0x72>
 				break ;
			}
		}while(pu8_StrReceive[u8_indexArr-1] != u8_terminator && (u8_indexArr<u8_strSize)) ;
     37e:	99 81       	ldd	r25, Y+1	; 0x01
     380:	8d 81       	ldd	r24, Y+5	; 0x05
     382:	98 17       	cp	r25, r24
     384:	c8 f2       	brcs	.-78     	; 0x338 <USART_u8ReceiveStr+0x24>

		pu8_StrReceive[u8_indexArr-1] = NULL_CHAR ;
     386:	89 81       	ldd	r24, Y+1	; 0x01
     388:	88 2f       	mov	r24, r24
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	9c 01       	movw	r18, r24
     38e:	21 50       	subi	r18, 0x01	; 1
     390:	30 40       	sbci	r19, 0x00	; 0
     392:	8b 81       	ldd	r24, Y+3	; 0x03
     394:	9c 81       	ldd	r25, Y+4	; 0x04
     396:	fc 01       	movw	r30, r24
     398:	e2 0f       	add	r30, r18
     39a:	f3 1f       	adc	r31, r19
     39c:	10 82       	st	Z, r1
     39e:	02 c0       	rjmp	.+4      	; 0x3a4 <USART_u8ReceiveStr+0x90>
	}
	else
	{
		u8_ReturnTransState = u8_USART_RECEIVED_NULL_PTR_ARG ;
     3a0:	80 e9       	ldi	r24, 0x90	; 144
     3a2:	8a 83       	std	Y+2, r24	; 0x02
	}
	return u8_ReturnTransState ;
     3a4:	8a 81       	ldd	r24, Y+2	; 0x02
}
     3a6:	26 96       	adiw	r28, 0x06	; 6
     3a8:	0f b6       	in	r0, 0x3f	; 63
     3aa:	f8 94       	cli
     3ac:	de bf       	out	0x3e, r29	; 62
     3ae:	0f be       	out	0x3f, r0	; 63
     3b0:	cd bf       	out	0x3d, r28	; 61
     3b2:	cf 91       	pop	r28
     3b4:	df 91       	pop	r29
     3b6:	08 95       	ret

000003b8 <TIMERS_voidInit>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////


void TIMERS_voidInit(void)
{
     3b8:	df 93       	push	r29
     3ba:	cf 93       	push	r28
     3bc:	cd b7       	in	r28, 0x3d	; 61
     3be:	de b7       	in	r29, 0x3e	; 62
	#if	u8_TIMER0_MODE_CONFIG==u8_NORMAL_MODE
		CLR_BIT(Ru8_TCCR0,u8_WGM00_BIT) ;
     3c0:	a3 e5       	ldi	r26, 0x53	; 83
     3c2:	b0 e0       	ldi	r27, 0x00	; 0
     3c4:	e3 e5       	ldi	r30, 0x53	; 83
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	80 81       	ld	r24, Z
     3ca:	8f 7b       	andi	r24, 0xBF	; 191
     3cc:	8c 93       	st	X, r24
		CLR_BIT(Ru8_TCCR0,u8_WGM01_BIT) ;
     3ce:	a3 e5       	ldi	r26, 0x53	; 83
     3d0:	b0 e0       	ldi	r27, 0x00	; 0
     3d2:	e3 e5       	ldi	r30, 0x53	; 83
     3d4:	f0 e0       	ldi	r31, 0x00	; 0
     3d6:	80 81       	ld	r24, Z
     3d8:	87 7f       	andi	r24, 0xF7	; 247
     3da:	8c 93       	st	X, r24
		CLR_BIT(Ru8_TCCR0,u8_FOC0_BIT) ;
     3dc:	a3 e5       	ldi	r26, 0x53	; 83
     3de:	b0 e0       	ldi	r27, 0x00	; 0
     3e0:	e3 e5       	ldi	r30, 0x53	; 83
     3e2:	f0 e0       	ldi	r31, 0x00	; 0
     3e4:	80 81       	ld	r24, Z
     3e6:	8f 77       	andi	r24, 0x7F	; 127
     3e8:	8c 93       	st	X, r24
	
	
	
	#if	u8_TIMER0_MODE_CONFIG==u8_NORMAL_MODE||u8_TIMER0_MODE_CONFIG==u8_CTC_MODE
		#if u8_TIMER0_COMP_MATCH_NON_PWM_CONFIG==u8_OC0_DISCONNECTED
			CLR_BIT(Ru8_TCCR0,u8_COM00_BIT) ;
     3ea:	a3 e5       	ldi	r26, 0x53	; 83
     3ec:	b0 e0       	ldi	r27, 0x00	; 0
     3ee:	e3 e5       	ldi	r30, 0x53	; 83
     3f0:	f0 e0       	ldi	r31, 0x00	; 0
     3f2:	80 81       	ld	r24, Z
     3f4:	8f 7d       	andi	r24, 0xDF	; 223
     3f6:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_COM01_BIT) ;
     3f8:	a3 e5       	ldi	r26, 0x53	; 83
     3fa:	b0 e0       	ldi	r27, 0x00	; 0
     3fc:	e3 e5       	ldi	r30, 0x53	; 83
     3fe:	f0 e0       	ldi	r31, 0x00	; 0
     400:	80 81       	ld	r24, Z
     402:	8f 7e       	andi	r24, 0xEF	; 239
     404:	8c 93       	st	X, r24
	#elif u8_TIMER0_1_CLOCK_SELECT==u8_INTERNAL_CLK_NO_PRE
		CLR_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
		CLR_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
		SET_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
	#elif u8_TIMER0_1_CLOCK_SELECT==u8_INTERNAL_CLK_PRE_8
		CLR_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     406:	a3 e5       	ldi	r26, 0x53	; 83
     408:	b0 e0       	ldi	r27, 0x00	; 0
     40a:	e3 e5       	ldi	r30, 0x53	; 83
     40c:	f0 e0       	ldi	r31, 0x00	; 0
     40e:	80 81       	ld	r24, Z
     410:	8b 7f       	andi	r24, 0xFB	; 251
     412:	8c 93       	st	X, r24
		SET_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     414:	a3 e5       	ldi	r26, 0x53	; 83
     416:	b0 e0       	ldi	r27, 0x00	; 0
     418:	e3 e5       	ldi	r30, 0x53	; 83
     41a:	f0 e0       	ldi	r31, 0x00	; 0
     41c:	80 81       	ld	r24, Z
     41e:	82 60       	ori	r24, 0x02	; 2
     420:	8c 93       	st	X, r24
		CLR_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     422:	a3 e5       	ldi	r26, 0x53	; 83
     424:	b0 e0       	ldi	r27, 0x00	; 0
     426:	e3 e5       	ldi	r30, 0x53	; 83
     428:	f0 e0       	ldi	r31, 0x00	; 0
     42a:	80 81       	ld	r24, Z
     42c:	8e 7f       	andi	r24, 0xFE	; 254
     42e:	8c 93       	st	X, r24
		SET_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
	#else
		#error "wrong clock select config"
	#endif

}
     430:	cf 91       	pop	r28
     432:	df 91       	pop	r29
     434:	08 95       	ret

00000436 <TIMER0_u8StartWithclockAndPrescalerSelect>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMER0_u8StartWithclockAndPrescalerSelect(uint8_t u8_preScallerVal) 
{
     436:	df 93       	push	r29
     438:	cf 93       	push	r28
     43a:	00 d0       	rcall	.+0      	; 0x43c <TIMER0_u8StartWithclockAndPrescalerSelect+0x6>
     43c:	00 d0       	rcall	.+0      	; 0x43e <TIMER0_u8StartWithclockAndPrescalerSelect+0x8>
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
     442:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_ErrorFlag = u8_OK ; 
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_preScallerVal)
     448:	8a 81       	ldd	r24, Y+2	; 0x02
     44a:	28 2f       	mov	r18, r24
     44c:	30 e0       	ldi	r19, 0x00	; 0
     44e:	3c 83       	std	Y+4, r19	; 0x04
     450:	2b 83       	std	Y+3, r18	; 0x03
     452:	8b 81       	ldd	r24, Y+3	; 0x03
     454:	9c 81       	ldd	r25, Y+4	; 0x04
     456:	89 30       	cpi	r24, 0x09	; 9
     458:	91 05       	cpc	r25, r1
     45a:	09 f4       	brne	.+2      	; 0x45e <TIMER0_u8StartWithclockAndPrescalerSelect+0x28>
     45c:	6b c0       	rjmp	.+214    	; 0x534 <TIMER0_u8StartWithclockAndPrescalerSelect+0xfe>
     45e:	2b 81       	ldd	r18, Y+3	; 0x03
     460:	3c 81       	ldd	r19, Y+4	; 0x04
     462:	2a 30       	cpi	r18, 0x0A	; 10
     464:	31 05       	cpc	r19, r1
     466:	8c f4       	brge	.+34     	; 0x48a <TIMER0_u8StartWithclockAndPrescalerSelect+0x54>
     468:	8b 81       	ldd	r24, Y+3	; 0x03
     46a:	9c 81       	ldd	r25, Y+4	; 0x04
     46c:	87 30       	cpi	r24, 0x07	; 7
     46e:	91 05       	cpc	r25, r1
     470:	a9 f1       	breq	.+106    	; 0x4dc <TIMER0_u8StartWithclockAndPrescalerSelect+0xa6>
     472:	2b 81       	ldd	r18, Y+3	; 0x03
     474:	3c 81       	ldd	r19, Y+4	; 0x04
     476:	28 30       	cpi	r18, 0x08	; 8
     478:	31 05       	cpc	r19, r1
     47a:	0c f0       	brlt	.+2      	; 0x47e <TIMER0_u8StartWithclockAndPrescalerSelect+0x48>
     47c:	45 c0       	rjmp	.+138    	; 0x508 <TIMER0_u8StartWithclockAndPrescalerSelect+0xd2>
     47e:	8b 81       	ldd	r24, Y+3	; 0x03
     480:	9c 81       	ldd	r25, Y+4	; 0x04
     482:	86 30       	cpi	r24, 0x06	; 6
     484:	91 05       	cpc	r25, r1
     486:	a1 f0       	breq	.+40     	; 0x4b0 <TIMER0_u8StartWithclockAndPrescalerSelect+0x7a>
     488:	ad c0       	rjmp	.+346    	; 0x5e4 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1ae>
     48a:	2b 81       	ldd	r18, Y+3	; 0x03
     48c:	3c 81       	ldd	r19, Y+4	; 0x04
     48e:	2b 30       	cpi	r18, 0x0B	; 11
     490:	31 05       	cpc	r19, r1
     492:	09 f4       	brne	.+2      	; 0x496 <TIMER0_u8StartWithclockAndPrescalerSelect+0x60>
     494:	7b c0       	rjmp	.+246    	; 0x58c <TIMER0_u8StartWithclockAndPrescalerSelect+0x156>
     496:	8b 81       	ldd	r24, Y+3	; 0x03
     498:	9c 81       	ldd	r25, Y+4	; 0x04
     49a:	8b 30       	cpi	r24, 0x0B	; 11
     49c:	91 05       	cpc	r25, r1
     49e:	0c f4       	brge	.+2      	; 0x4a2 <TIMER0_u8StartWithclockAndPrescalerSelect+0x6c>
     4a0:	5f c0       	rjmp	.+190    	; 0x560 <TIMER0_u8StartWithclockAndPrescalerSelect+0x12a>
     4a2:	2b 81       	ldd	r18, Y+3	; 0x03
     4a4:	3c 81       	ldd	r19, Y+4	; 0x04
     4a6:	2c 30       	cpi	r18, 0x0C	; 12
     4a8:	31 05       	cpc	r19, r1
     4aa:	09 f4       	brne	.+2      	; 0x4ae <TIMER0_u8StartWithclockAndPrescalerSelect+0x78>
     4ac:	85 c0       	rjmp	.+266    	; 0x5b8 <TIMER0_u8StartWithclockAndPrescalerSelect+0x182>
     4ae:	9a c0       	rjmp	.+308    	; 0x5e4 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1ae>
	{
		case u8_INTERNAL_CLK_NO_PRE:
			CLR_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     4b0:	a3 e5       	ldi	r26, 0x53	; 83
     4b2:	b0 e0       	ldi	r27, 0x00	; 0
     4b4:	e3 e5       	ldi	r30, 0x53	; 83
     4b6:	f0 e0       	ldi	r31, 0x00	; 0
     4b8:	80 81       	ld	r24, Z
     4ba:	8b 7f       	andi	r24, 0xFB	; 251
     4bc:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     4be:	a3 e5       	ldi	r26, 0x53	; 83
     4c0:	b0 e0       	ldi	r27, 0x00	; 0
     4c2:	e3 e5       	ldi	r30, 0x53	; 83
     4c4:	f0 e0       	ldi	r31, 0x00	; 0
     4c6:	80 81       	ld	r24, Z
     4c8:	8d 7f       	andi	r24, 0xFD	; 253
     4ca:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     4cc:	a3 e5       	ldi	r26, 0x53	; 83
     4ce:	b0 e0       	ldi	r27, 0x00	; 0
     4d0:	e3 e5       	ldi	r30, 0x53	; 83
     4d2:	f0 e0       	ldi	r31, 0x00	; 0
     4d4:	80 81       	ld	r24, Z
     4d6:	81 60       	ori	r24, 0x01	; 1
     4d8:	8c 93       	st	X, r24
     4da:	85 c0       	rjmp	.+266    	; 0x5e6 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ; 
		case u8_INTERNAL_CLK_PRE_8:
			CLR_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     4dc:	a3 e5       	ldi	r26, 0x53	; 83
     4de:	b0 e0       	ldi	r27, 0x00	; 0
     4e0:	e3 e5       	ldi	r30, 0x53	; 83
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	80 81       	ld	r24, Z
     4e6:	8b 7f       	andi	r24, 0xFB	; 251
     4e8:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     4ea:	a3 e5       	ldi	r26, 0x53	; 83
     4ec:	b0 e0       	ldi	r27, 0x00	; 0
     4ee:	e3 e5       	ldi	r30, 0x53	; 83
     4f0:	f0 e0       	ldi	r31, 0x00	; 0
     4f2:	80 81       	ld	r24, Z
     4f4:	82 60       	ori	r24, 0x02	; 2
     4f6:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     4f8:	a3 e5       	ldi	r26, 0x53	; 83
     4fa:	b0 e0       	ldi	r27, 0x00	; 0
     4fc:	e3 e5       	ldi	r30, 0x53	; 83
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	80 81       	ld	r24, Z
     502:	8e 7f       	andi	r24, 0xFE	; 254
     504:	8c 93       	st	X, r24
     506:	6f c0       	rjmp	.+222    	; 0x5e6 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ; 
		case u8_INTERNAL_CLK_PRE_64:
			CLR_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     508:	a3 e5       	ldi	r26, 0x53	; 83
     50a:	b0 e0       	ldi	r27, 0x00	; 0
     50c:	e3 e5       	ldi	r30, 0x53	; 83
     50e:	f0 e0       	ldi	r31, 0x00	; 0
     510:	80 81       	ld	r24, Z
     512:	8b 7f       	andi	r24, 0xFB	; 251
     514:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     516:	a3 e5       	ldi	r26, 0x53	; 83
     518:	b0 e0       	ldi	r27, 0x00	; 0
     51a:	e3 e5       	ldi	r30, 0x53	; 83
     51c:	f0 e0       	ldi	r31, 0x00	; 0
     51e:	80 81       	ld	r24, Z
     520:	82 60       	ori	r24, 0x02	; 2
     522:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     524:	a3 e5       	ldi	r26, 0x53	; 83
     526:	b0 e0       	ldi	r27, 0x00	; 0
     528:	e3 e5       	ldi	r30, 0x53	; 83
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	80 81       	ld	r24, Z
     52e:	81 60       	ori	r24, 0x01	; 1
     530:	8c 93       	st	X, r24
     532:	59 c0       	rjmp	.+178    	; 0x5e6 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ;
		case u8_INTERNAL_CLK_PRE_256:
			SET_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     534:	a3 e5       	ldi	r26, 0x53	; 83
     536:	b0 e0       	ldi	r27, 0x00	; 0
     538:	e3 e5       	ldi	r30, 0x53	; 83
     53a:	f0 e0       	ldi	r31, 0x00	; 0
     53c:	80 81       	ld	r24, Z
     53e:	84 60       	ori	r24, 0x04	; 4
     540:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     542:	a3 e5       	ldi	r26, 0x53	; 83
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	e3 e5       	ldi	r30, 0x53	; 83
     548:	f0 e0       	ldi	r31, 0x00	; 0
     54a:	80 81       	ld	r24, Z
     54c:	8d 7f       	andi	r24, 0xFD	; 253
     54e:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     550:	a3 e5       	ldi	r26, 0x53	; 83
     552:	b0 e0       	ldi	r27, 0x00	; 0
     554:	e3 e5       	ldi	r30, 0x53	; 83
     556:	f0 e0       	ldi	r31, 0x00	; 0
     558:	80 81       	ld	r24, Z
     55a:	8e 7f       	andi	r24, 0xFE	; 254
     55c:	8c 93       	st	X, r24
     55e:	43 c0       	rjmp	.+134    	; 0x5e6 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ; 
		case u8_INTERNAL_CLK_PRE_1024:
			SET_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     560:	a3 e5       	ldi	r26, 0x53	; 83
     562:	b0 e0       	ldi	r27, 0x00	; 0
     564:	e3 e5       	ldi	r30, 0x53	; 83
     566:	f0 e0       	ldi	r31, 0x00	; 0
     568:	80 81       	ld	r24, Z
     56a:	84 60       	ori	r24, 0x04	; 4
     56c:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     56e:	a3 e5       	ldi	r26, 0x53	; 83
     570:	b0 e0       	ldi	r27, 0x00	; 0
     572:	e3 e5       	ldi	r30, 0x53	; 83
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	80 81       	ld	r24, Z
     578:	8d 7f       	andi	r24, 0xFD	; 253
     57a:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     57c:	a3 e5       	ldi	r26, 0x53	; 83
     57e:	b0 e0       	ldi	r27, 0x00	; 0
     580:	e3 e5       	ldi	r30, 0x53	; 83
     582:	f0 e0       	ldi	r31, 0x00	; 0
     584:	80 81       	ld	r24, Z
     586:	81 60       	ori	r24, 0x01	; 1
     588:	8c 93       	st	X, r24
     58a:	2d c0       	rjmp	.+90     	; 0x5e6 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ;
		case u8_EXTERNAL_CLK_FALLING : 
			SET_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     58c:	a3 e5       	ldi	r26, 0x53	; 83
     58e:	b0 e0       	ldi	r27, 0x00	; 0
     590:	e3 e5       	ldi	r30, 0x53	; 83
     592:	f0 e0       	ldi	r31, 0x00	; 0
     594:	80 81       	ld	r24, Z
     596:	84 60       	ori	r24, 0x04	; 4
     598:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     59a:	a3 e5       	ldi	r26, 0x53	; 83
     59c:	b0 e0       	ldi	r27, 0x00	; 0
     59e:	e3 e5       	ldi	r30, 0x53	; 83
     5a0:	f0 e0       	ldi	r31, 0x00	; 0
     5a2:	80 81       	ld	r24, Z
     5a4:	82 60       	ori	r24, 0x02	; 2
     5a6:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     5a8:	a3 e5       	ldi	r26, 0x53	; 83
     5aa:	b0 e0       	ldi	r27, 0x00	; 0
     5ac:	e3 e5       	ldi	r30, 0x53	; 83
     5ae:	f0 e0       	ldi	r31, 0x00	; 0
     5b0:	80 81       	ld	r24, Z
     5b2:	8e 7f       	andi	r24, 0xFE	; 254
     5b4:	8c 93       	st	X, r24
     5b6:	17 c0       	rjmp	.+46     	; 0x5e6 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ;
		case u8_EXTERNAL_CLK_RISING:
			SET_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     5b8:	a3 e5       	ldi	r26, 0x53	; 83
     5ba:	b0 e0       	ldi	r27, 0x00	; 0
     5bc:	e3 e5       	ldi	r30, 0x53	; 83
     5be:	f0 e0       	ldi	r31, 0x00	; 0
     5c0:	80 81       	ld	r24, Z
     5c2:	84 60       	ori	r24, 0x04	; 4
     5c4:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     5c6:	a3 e5       	ldi	r26, 0x53	; 83
     5c8:	b0 e0       	ldi	r27, 0x00	; 0
     5ca:	e3 e5       	ldi	r30, 0x53	; 83
     5cc:	f0 e0       	ldi	r31, 0x00	; 0
     5ce:	80 81       	ld	r24, Z
     5d0:	82 60       	ori	r24, 0x02	; 2
     5d2:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     5d4:	a3 e5       	ldi	r26, 0x53	; 83
     5d6:	b0 e0       	ldi	r27, 0x00	; 0
     5d8:	e3 e5       	ldi	r30, 0x53	; 83
     5da:	f0 e0       	ldi	r31, 0x00	; 0
     5dc:	80 81       	ld	r24, Z
     5de:	81 60       	ori	r24, 0x01	; 1
     5e0:	8c 93       	st	X, r24
     5e2:	01 c0       	rjmp	.+2      	; 0x5e6 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ; 
		
		default : u8_ErrorFlag = u8_NOK ; 
     5e4:	19 82       	std	Y+1, r1	; 0x01
		break ;
	}
	return u8_ErrorFlag ; 
     5e6:	89 81       	ldd	r24, Y+1	; 0x01
}
     5e8:	0f 90       	pop	r0
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	cf 91       	pop	r28
     5f2:	df 91       	pop	r29
     5f4:	08 95       	ret

000005f6 <TIMER0_voidstop>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void TIMER0_voidstop(void)
{
     5f6:	df 93       	push	r29
     5f8:	cf 93       	push	r28
     5fa:	cd b7       	in	r28, 0x3d	; 61
     5fc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     5fe:	a3 e5       	ldi	r26, 0x53	; 83
     600:	b0 e0       	ldi	r27, 0x00	; 0
     602:	e3 e5       	ldi	r30, 0x53	; 83
     604:	f0 e0       	ldi	r31, 0x00	; 0
     606:	80 81       	ld	r24, Z
     608:	8b 7f       	andi	r24, 0xFB	; 251
     60a:	8c 93       	st	X, r24
	CLR_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     60c:	a3 e5       	ldi	r26, 0x53	; 83
     60e:	b0 e0       	ldi	r27, 0x00	; 0
     610:	e3 e5       	ldi	r30, 0x53	; 83
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	80 81       	ld	r24, Z
     616:	8d 7f       	andi	r24, 0xFD	; 253
     618:	8c 93       	st	X, r24
	CLR_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     61a:	a3 e5       	ldi	r26, 0x53	; 83
     61c:	b0 e0       	ldi	r27, 0x00	; 0
     61e:	e3 e5       	ldi	r30, 0x53	; 83
     620:	f0 e0       	ldi	r31, 0x00	; 0
     622:	80 81       	ld	r24, Z
     624:	8e 7f       	andi	r24, 0xFE	; 254
     626:	8c 93       	st	X, r24
}
     628:	cf 91       	pop	r28
     62a:	df 91       	pop	r29
     62c:	08 95       	ret

0000062e <TIMERS_u8ClearIntFlag>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMERS_u8ClearIntFlag(uint8_t u8_wantedIntClearFlag)
{
     62e:	df 93       	push	r29
     630:	cf 93       	push	r28
     632:	00 d0       	rcall	.+0      	; 0x634 <TIMERS_u8ClearIntFlag+0x6>
     634:	00 d0       	rcall	.+0      	; 0x636 <TIMERS_u8ClearIntFlag+0x8>
     636:	cd b7       	in	r28, 0x3d	; 61
     638:	de b7       	in	r29, 0x3e	; 62
     63a:	8a 83       	std	Y+2, r24	; 0x02
		uint8_t u8_ErrorFlag = u8_OK ; 
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_wantedIntClearFlag)
     640:	8a 81       	ldd	r24, Y+2	; 0x02
     642:	28 2f       	mov	r18, r24
     644:	30 e0       	ldi	r19, 0x00	; 0
     646:	3c 83       	std	Y+4, r19	; 0x04
     648:	2b 83       	std	Y+3, r18	; 0x03
     64a:	8b 81       	ldd	r24, Y+3	; 0x03
     64c:	9c 81       	ldd	r25, Y+4	; 0x04
     64e:	81 31       	cpi	r24, 0x11	; 17
     650:	91 05       	cpc	r25, r1
     652:	31 f0       	breq	.+12     	; 0x660 <TIMERS_u8ClearIntFlag+0x32>
     654:	2b 81       	ldd	r18, Y+3	; 0x03
     656:	3c 81       	ldd	r19, Y+4	; 0x04
     658:	22 31       	cpi	r18, 0x12	; 18
     65a:	31 05       	cpc	r19, r1
     65c:	49 f0       	breq	.+18     	; 0x670 <TIMERS_u8ClearIntFlag+0x42>
     65e:	10 c0       	rjmp	.+32     	; 0x680 <TIMERS_u8ClearIntFlag+0x52>
	{
		case u8_TIMER0_OVER_FLOW			: SET_BIT(Ru8_TIFR,u8_TOV0_BIT) ;
     660:	a8 e5       	ldi	r26, 0x58	; 88
     662:	b0 e0       	ldi	r27, 0x00	; 0
     664:	e8 e5       	ldi	r30, 0x58	; 88
     666:	f0 e0       	ldi	r31, 0x00	; 0
     668:	80 81       	ld	r24, Z
     66a:	81 60       	ori	r24, 0x01	; 1
     66c:	8c 93       	st	X, r24
     66e:	09 c0       	rjmp	.+18     	; 0x682 <TIMERS_u8ClearIntFlag+0x54>
											  break ;
		case u8_TIMER0_COMPARE_ON_MATCH		: SET_BIT(Ru8_TIFR,u8_OCF0_BIT) ;
     670:	a8 e5       	ldi	r26, 0x58	; 88
     672:	b0 e0       	ldi	r27, 0x00	; 0
     674:	e8 e5       	ldi	r30, 0x58	; 88
     676:	f0 e0       	ldi	r31, 0x00	; 0
     678:	80 81       	ld	r24, Z
     67a:	82 60       	ori	r24, 0x02	; 2
     67c:	8c 93       	st	X, r24
     67e:	01 c0       	rjmp	.+2      	; 0x682 <TIMERS_u8ClearIntFlag+0x54>
											  break ;
		default								: u8_ErrorFlag = u8_NOK ;
     680:	19 82       	std	Y+1, r1	; 0x01
											  break ; 
	}
	return u8_ErrorFlag ; 
     682:	89 81       	ldd	r24, Y+1	; 0x01
}
     684:	0f 90       	pop	r0
     686:	0f 90       	pop	r0
     688:	0f 90       	pop	r0
     68a:	0f 90       	pop	r0
     68c:	cf 91       	pop	r28
     68e:	df 91       	pop	r29
     690:	08 95       	ret

00000692 <TIMERS_u8GetIntFlag>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMERS_u8GetIntFlag(uint8_t u8_wantedIntClearFlag,uint8_t* pu8_retturnIntFlag)
{
     692:	df 93       	push	r29
     694:	cf 93       	push	r28
     696:	00 d0       	rcall	.+0      	; 0x698 <TIMERS_u8GetIntFlag+0x6>
     698:	00 d0       	rcall	.+0      	; 0x69a <TIMERS_u8GetIntFlag+0x8>
     69a:	00 d0       	rcall	.+0      	; 0x69c <TIMERS_u8GetIntFlag+0xa>
     69c:	cd b7       	in	r28, 0x3d	; 61
     69e:	de b7       	in	r29, 0x3e	; 62
     6a0:	8a 83       	std	Y+2, r24	; 0x02
     6a2:	7c 83       	std	Y+4, r23	; 0x04
     6a4:	6b 83       	std	Y+3, r22	; 0x03
		uint8_t u8_ErrorFlag = u8_OK ; 
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_wantedIntClearFlag)
     6aa:	8a 81       	ldd	r24, Y+2	; 0x02
     6ac:	28 2f       	mov	r18, r24
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	3e 83       	std	Y+6, r19	; 0x06
     6b2:	2d 83       	std	Y+5, r18	; 0x05
     6b4:	8d 81       	ldd	r24, Y+5	; 0x05
     6b6:	9e 81       	ldd	r25, Y+6	; 0x06
     6b8:	81 31       	cpi	r24, 0x11	; 17
     6ba:	91 05       	cpc	r25, r1
     6bc:	31 f0       	breq	.+12     	; 0x6ca <TIMERS_u8GetIntFlag+0x38>
     6be:	2d 81       	ldd	r18, Y+5	; 0x05
     6c0:	3e 81       	ldd	r19, Y+6	; 0x06
     6c2:	22 31       	cpi	r18, 0x12	; 18
     6c4:	31 05       	cpc	r19, r1
     6c6:	49 f0       	breq	.+18     	; 0x6da <TIMERS_u8GetIntFlag+0x48>
     6c8:	11 c0       	rjmp	.+34     	; 0x6ec <TIMERS_u8GetIntFlag+0x5a>
	{
		case u8_TIMER0_OVER_FLOW			: (*pu8_retturnIntFlag) = GET_BIT(Ru8_TIFR,u8_TOV0_BIT) ;
     6ca:	e8 e5       	ldi	r30, 0x58	; 88
     6cc:	f0 e0       	ldi	r31, 0x00	; 0
     6ce:	80 81       	ld	r24, Z
     6d0:	81 70       	andi	r24, 0x01	; 1
     6d2:	eb 81       	ldd	r30, Y+3	; 0x03
     6d4:	fc 81       	ldd	r31, Y+4	; 0x04
     6d6:	80 83       	st	Z, r24
     6d8:	0a c0       	rjmp	.+20     	; 0x6ee <TIMERS_u8GetIntFlag+0x5c>
											  break ;
		case u8_TIMER0_COMPARE_ON_MATCH		: (*pu8_retturnIntFlag) = GET_BIT(Ru8_TIFR,u8_OCF0_BIT) ;
     6da:	e8 e5       	ldi	r30, 0x58	; 88
     6dc:	f0 e0       	ldi	r31, 0x00	; 0
     6de:	80 81       	ld	r24, Z
     6e0:	86 95       	lsr	r24
     6e2:	81 70       	andi	r24, 0x01	; 1
     6e4:	eb 81       	ldd	r30, Y+3	; 0x03
     6e6:	fc 81       	ldd	r31, Y+4	; 0x04
     6e8:	80 83       	st	Z, r24
     6ea:	01 c0       	rjmp	.+2      	; 0x6ee <TIMERS_u8GetIntFlag+0x5c>
											  break ;
		default								: u8_ErrorFlag = u8_NOK ;
     6ec:	19 82       	std	Y+1, r1	; 0x01
											  break ; 
	}
	return u8_ErrorFlag ; 
     6ee:	89 81       	ldd	r24, Y+1	; 0x01
}
     6f0:	26 96       	adiw	r28, 0x06	; 6
     6f2:	0f b6       	in	r0, 0x3f	; 63
     6f4:	f8 94       	cli
     6f6:	de bf       	out	0x3e, r29	; 62
     6f8:	0f be       	out	0x3f, r0	; 63
     6fa:	cd bf       	out	0x3d, r28	; 61
     6fc:	cf 91       	pop	r28
     6fe:	df 91       	pop	r29
     700:	08 95       	ret

00000702 <TIMERS_u8IntModesEn>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMERS_u8IntModesEn(uint8_t u8_wantedIntModeEn)
{
     702:	df 93       	push	r29
     704:	cf 93       	push	r28
     706:	00 d0       	rcall	.+0      	; 0x708 <TIMERS_u8IntModesEn+0x6>
     708:	00 d0       	rcall	.+0      	; 0x70a <TIMERS_u8IntModesEn+0x8>
     70a:	cd b7       	in	r28, 0x3d	; 61
     70c:	de b7       	in	r29, 0x3e	; 62
     70e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_ErrorFlag = u8_OK ; 
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_wantedIntModeEn)
     714:	8a 81       	ldd	r24, Y+2	; 0x02
     716:	28 2f       	mov	r18, r24
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	3c 83       	std	Y+4, r19	; 0x04
     71c:	2b 83       	std	Y+3, r18	; 0x03
     71e:	8b 81       	ldd	r24, Y+3	; 0x03
     720:	9c 81       	ldd	r25, Y+4	; 0x04
     722:	81 31       	cpi	r24, 0x11	; 17
     724:	91 05       	cpc	r25, r1
     726:	31 f0       	breq	.+12     	; 0x734 <TIMERS_u8IntModesEn+0x32>
     728:	2b 81       	ldd	r18, Y+3	; 0x03
     72a:	3c 81       	ldd	r19, Y+4	; 0x04
     72c:	22 31       	cpi	r18, 0x12	; 18
     72e:	31 05       	cpc	r19, r1
     730:	81 f0       	breq	.+32     	; 0x752 <TIMERS_u8IntModesEn+0x50>
     732:	1e c0       	rjmp	.+60     	; 0x770 <TIMERS_u8IntModesEn+0x6e>
	{
		case u8_TIMER0_OVER_FLOW			:  SET_BIT(Ru8_TIFR,u8_TOV0_BIT) ;
     734:	a8 e5       	ldi	r26, 0x58	; 88
     736:	b0 e0       	ldi	r27, 0x00	; 0
     738:	e8 e5       	ldi	r30, 0x58	; 88
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	80 81       	ld	r24, Z
     73e:	81 60       	ori	r24, 0x01	; 1
     740:	8c 93       	st	X, r24
											   SET_BIT(Ru8_TIMSK,u8_TOIE0_BIT);
     742:	a9 e5       	ldi	r26, 0x59	; 89
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e9 e5       	ldi	r30, 0x59	; 89
     748:	f0 e0       	ldi	r31, 0x00	; 0
     74a:	80 81       	ld	r24, Z
     74c:	81 60       	ori	r24, 0x01	; 1
     74e:	8c 93       	st	X, r24
     750:	10 c0       	rjmp	.+32     	; 0x772 <TIMERS_u8IntModesEn+0x70>
											   break ; 
		case u8_TIMER0_COMPARE_ON_MATCH		:  SET_BIT(Ru8_TIFR,u8_OCF0_BIT) ;
     752:	a8 e5       	ldi	r26, 0x58	; 88
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	e8 e5       	ldi	r30, 0x58	; 88
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	80 81       	ld	r24, Z
     75c:	82 60       	ori	r24, 0x02	; 2
     75e:	8c 93       	st	X, r24
											   SET_BIT(Ru8_TIMSK,u8_OCIE0_BIT);
     760:	a9 e5       	ldi	r26, 0x59	; 89
     762:	b0 e0       	ldi	r27, 0x00	; 0
     764:	e9 e5       	ldi	r30, 0x59	; 89
     766:	f0 e0       	ldi	r31, 0x00	; 0
     768:	80 81       	ld	r24, Z
     76a:	82 60       	ori	r24, 0x02	; 2
     76c:	8c 93       	st	X, r24
     76e:	01 c0       	rjmp	.+2      	; 0x772 <TIMERS_u8IntModesEn+0x70>
											   break ;
		default 							:  u8_ErrorFlag = u8_NOK ; 
     770:	19 82       	std	Y+1, r1	; 0x01
											   break ; 
	}
	return u8_ErrorFlag ; 
     772:	89 81       	ldd	r24, Y+1	; 0x01
}
     774:	0f 90       	pop	r0
     776:	0f 90       	pop	r0
     778:	0f 90       	pop	r0
     77a:	0f 90       	pop	r0
     77c:	cf 91       	pop	r28
     77e:	df 91       	pop	r29
     780:	08 95       	ret

00000782 <TIMERS_u8IntModesDis>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMERS_u8IntModesDis(uint8_t u8_wantedIntModeDis)
{
     782:	df 93       	push	r29
     784:	cf 93       	push	r28
     786:	00 d0       	rcall	.+0      	; 0x788 <TIMERS_u8IntModesDis+0x6>
     788:	00 d0       	rcall	.+0      	; 0x78a <TIMERS_u8IntModesDis+0x8>
     78a:	cd b7       	in	r28, 0x3d	; 61
     78c:	de b7       	in	r29, 0x3e	; 62
     78e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_ErrorFlag = u8_OK ; 
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_wantedIntModeDis)
     794:	8a 81       	ldd	r24, Y+2	; 0x02
     796:	28 2f       	mov	r18, r24
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	3c 83       	std	Y+4, r19	; 0x04
     79c:	2b 83       	std	Y+3, r18	; 0x03
     79e:	8b 81       	ldd	r24, Y+3	; 0x03
     7a0:	9c 81       	ldd	r25, Y+4	; 0x04
     7a2:	81 31       	cpi	r24, 0x11	; 17
     7a4:	91 05       	cpc	r25, r1
     7a6:	31 f0       	breq	.+12     	; 0x7b4 <TIMERS_u8IntModesDis+0x32>
     7a8:	2b 81       	ldd	r18, Y+3	; 0x03
     7aa:	3c 81       	ldd	r19, Y+4	; 0x04
     7ac:	22 31       	cpi	r18, 0x12	; 18
     7ae:	31 05       	cpc	r19, r1
     7b0:	49 f0       	breq	.+18     	; 0x7c4 <TIMERS_u8IntModesDis+0x42>
     7b2:	10 c0       	rjmp	.+32     	; 0x7d4 <TIMERS_u8IntModesDis+0x52>
	{
		case u8_TIMER0_OVER_FLOW			:  CLR_BIT(Ru8_TIMSK,u8_TOIE0_BIT);
     7b4:	a9 e5       	ldi	r26, 0x59	; 89
     7b6:	b0 e0       	ldi	r27, 0x00	; 0
     7b8:	e9 e5       	ldi	r30, 0x59	; 89
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	80 81       	ld	r24, Z
     7be:	8e 7f       	andi	r24, 0xFE	; 254
     7c0:	8c 93       	st	X, r24
     7c2:	09 c0       	rjmp	.+18     	; 0x7d6 <TIMERS_u8IntModesDis+0x54>
											   break ; 
		case u8_TIMER0_COMPARE_ON_MATCH		:  CLR_BIT(Ru8_TIMSK,u8_OCIE0_BIT);
     7c4:	a9 e5       	ldi	r26, 0x59	; 89
     7c6:	b0 e0       	ldi	r27, 0x00	; 0
     7c8:	e9 e5       	ldi	r30, 0x59	; 89
     7ca:	f0 e0       	ldi	r31, 0x00	; 0
     7cc:	80 81       	ld	r24, Z
     7ce:	8d 7f       	andi	r24, 0xFD	; 253
     7d0:	8c 93       	st	X, r24
     7d2:	01 c0       	rjmp	.+2      	; 0x7d6 <TIMERS_u8IntModesDis+0x54>
											   break ;
		default 							:  u8_ErrorFlag = u8_NOK ; 
     7d4:	19 82       	std	Y+1, r1	; 0x01
											   break ; 
	}
	return u8_ErrorFlag ; 
     7d6:	89 81       	ldd	r24, Y+1	; 0x01
}
     7d8:	0f 90       	pop	r0
     7da:	0f 90       	pop	r0
     7dc:	0f 90       	pop	r0
     7de:	0f 90       	pop	r0
     7e0:	cf 91       	pop	r28
     7e2:	df 91       	pop	r29
     7e4:	08 95       	ret

000007e6 <Timer0_u8setOverFlowRegTicksBeforeOV>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t Timer0_u8setOverFlowRegTicksBeforeOV(uint8_t u8_wantedTicksBeforeOV)
{
     7e6:	df 93       	push	r29
     7e8:	cf 93       	push	r28
     7ea:	00 d0       	rcall	.+0      	; 0x7ec <Timer0_u8setOverFlowRegTicksBeforeOV+0x6>
     7ec:	0f 92       	push	r0
     7ee:	cd b7       	in	r28, 0x3d	; 61
     7f0:	de b7       	in	r29, 0x3e	; 62
     7f2:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8_ErrorFlag = u8_OK ; 
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_SetTimer0CounterReg ; 
	if(u8_wantedTicksBeforeOV<=u8_MAX_8BIT_REG_HOLD)
	{
		u8_SetTimer0CounterReg = u8_MAX_8BIT_REG_HOLD-u8_wantedTicksBeforeOV ; 
     7f8:	8b 81       	ldd	r24, Y+3	; 0x03
     7fa:	80 95       	com	r24
     7fc:	89 83       	std	Y+1, r24	; 0x01
		Ru8_TCNT0=u8_SetTimer0CounterReg ;
     7fe:	e2 e5       	ldi	r30, 0x52	; 82
     800:	f0 e0       	ldi	r31, 0x00	; 0
     802:	89 81       	ldd	r24, Y+1	; 0x01
     804:	80 83       	st	Z, r24
	}
	else 
	{
		u8_ErrorFlag = u8_NOK ; 
	}
	return u8_ErrorFlag ; 
     806:	8a 81       	ldd	r24, Y+2	; 0x02
}
     808:	0f 90       	pop	r0
     80a:	0f 90       	pop	r0
     80c:	0f 90       	pop	r0
     80e:	cf 91       	pop	r28
     810:	df 91       	pop	r29
     812:	08 95       	ret

00000814 <Timer0_u8setCompareRegTicksBeforeOV>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t Timer0_u8setCompareRegTicksBeforeOV(uint8_t u8_wantedTicksToCompare)
{
     814:	df 93       	push	r29
     816:	cf 93       	push	r28
     818:	00 d0       	rcall	.+0      	; 0x81a <Timer0_u8setCompareRegTicksBeforeOV+0x6>
     81a:	cd b7       	in	r28, 0x3d	; 61
     81c:	de b7       	in	r29, 0x3e	; 62
     81e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_ErrorFlag = u8_OK ; 
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	89 83       	std	Y+1, r24	; 0x01
	if(u8_wantedTicksToCompare<=u8_MAX_8BIT_REG_HOLD)
	{
		Ru8_OCR0 = u8_wantedTicksToCompare ;
     824:	ec e5       	ldi	r30, 0x5C	; 92
     826:	f0 e0       	ldi	r31, 0x00	; 0
     828:	8a 81       	ldd	r24, Y+2	; 0x02
     82a:	80 83       	st	Z, r24
	}
	else 
	{
		u8_ErrorFlag = u8_NOK ; 
	}
	return u8_ErrorFlag ; 
     82c:	89 81       	ldd	r24, Y+1	; 0x01
}
     82e:	0f 90       	pop	r0
     830:	0f 90       	pop	r0
     832:	cf 91       	pop	r28
     834:	df 91       	pop	r29
     836:	08 95       	ret

00000838 <TIMER0_u8setCallBack>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMER0_u8setCallBack(uint8_t u8_wantedISRModeToSet,void(*ISRFuncToSet)(void)) 
{
     838:	df 93       	push	r29
     83a:	cf 93       	push	r28
     83c:	00 d0       	rcall	.+0      	; 0x83e <TIMER0_u8setCallBack+0x6>
     83e:	00 d0       	rcall	.+0      	; 0x840 <TIMER0_u8setCallBack+0x8>
     840:	00 d0       	rcall	.+0      	; 0x842 <TIMER0_u8setCallBack+0xa>
     842:	cd b7       	in	r28, 0x3d	; 61
     844:	de b7       	in	r29, 0x3e	; 62
     846:	8a 83       	std	Y+2, r24	; 0x02
     848:	7c 83       	std	Y+4, r23	; 0x04
     84a:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8_ErrorFlag = u8_OK ; 
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	89 83       	std	Y+1, r24	; 0x01
	if(ISRFuncToSet!=NULL_POINTER)
     850:	8b 81       	ldd	r24, Y+3	; 0x03
     852:	9c 81       	ldd	r25, Y+4	; 0x04
     854:	00 97       	sbiw	r24, 0x00	; 0
     856:	01 f1       	breq	.+64     	; 0x898 <__stack+0x39>
	{
		switch(u8_wantedISRModeToSet)
     858:	8a 81       	ldd	r24, Y+2	; 0x02
     85a:	28 2f       	mov	r18, r24
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	3e 83       	std	Y+6, r19	; 0x06
     860:	2d 83       	std	Y+5, r18	; 0x05
     862:	8d 81       	ldd	r24, Y+5	; 0x05
     864:	9e 81       	ldd	r25, Y+6	; 0x06
     866:	81 31       	cpi	r24, 0x11	; 17
     868:	91 05       	cpc	r25, r1
     86a:	31 f0       	breq	.+12     	; 0x878 <__stack+0x19>
     86c:	2d 81       	ldd	r18, Y+5	; 0x05
     86e:	3e 81       	ldd	r19, Y+6	; 0x06
     870:	22 31       	cpi	r18, 0x12	; 18
     872:	31 05       	cpc	r19, r1
     874:	41 f0       	breq	.+16     	; 0x886 <__stack+0x27>
     876:	0e c0       	rjmp	.+28     	; 0x894 <__stack+0x35>
		{
			case u8_TIMER0_OVER_FLOW			:  Timer0OverFlowSetCallBackISR = ISRFuncToSet ; 
     878:	8b 81       	ldd	r24, Y+3	; 0x03
     87a:	9c 81       	ldd	r25, Y+4	; 0x04
     87c:	90 93 65 00 	sts	0x0065, r25
     880:	80 93 64 00 	sts	0x0064, r24
     884:	0a c0       	rjmp	.+20     	; 0x89a <__stack+0x3b>
												   break ; 
			case u8_TIMER0_COMPARE_ON_MATCH		:  Timer0CompareMatchSetCallBackISR = ISRFuncToSet ; 
     886:	8b 81       	ldd	r24, Y+3	; 0x03
     888:	9c 81       	ldd	r25, Y+4	; 0x04
     88a:	90 93 63 00 	sts	0x0063, r25
     88e:	80 93 62 00 	sts	0x0062, r24
     892:	03 c0       	rjmp	.+6      	; 0x89a <__stack+0x3b>
											       break ;
			default 							:  u8_ErrorFlag = u8_NOK ; 
     894:	19 82       	std	Y+1, r1	; 0x01
     896:	01 c0       	rjmp	.+2      	; 0x89a <__stack+0x3b>
											       break ; 
		}
	}
	else 
	{
		u8_ErrorFlag = u8_NOK ; 
     898:	19 82       	std	Y+1, r1	; 0x01
	}
	return u8_ErrorFlag ; 
     89a:	89 81       	ldd	r24, Y+1	; 0x01
}
     89c:	26 96       	adiw	r28, 0x06	; 6
     89e:	0f b6       	in	r0, 0x3f	; 63
     8a0:	f8 94       	cli
     8a2:	de bf       	out	0x3e, r29	; 62
     8a4:	0f be       	out	0x3f, r0	; 63
     8a6:	cd bf       	out	0x3d, r28	; 61
     8a8:	cf 91       	pop	r28
     8aa:	df 91       	pop	r29
     8ac:	08 95       	ret

000008ae <__vector_10>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void __vector_10 (void)      __attribute__((signal));
void __vector_10 (void)
{
     8ae:	1f 92       	push	r1
     8b0:	0f 92       	push	r0
     8b2:	0f b6       	in	r0, 0x3f	; 63
     8b4:	0f 92       	push	r0
     8b6:	11 24       	eor	r1, r1
     8b8:	2f 93       	push	r18
     8ba:	3f 93       	push	r19
     8bc:	4f 93       	push	r20
     8be:	5f 93       	push	r21
     8c0:	6f 93       	push	r22
     8c2:	7f 93       	push	r23
     8c4:	8f 93       	push	r24
     8c6:	9f 93       	push	r25
     8c8:	af 93       	push	r26
     8ca:	bf 93       	push	r27
     8cc:	ef 93       	push	r30
     8ce:	ff 93       	push	r31
     8d0:	df 93       	push	r29
     8d2:	cf 93       	push	r28
     8d4:	cd b7       	in	r28, 0x3d	; 61
     8d6:	de b7       	in	r29, 0x3e	; 62
	if(Timer0CompareMatchSetCallBackISR!=NULL_POINTER)
     8d8:	80 91 62 00 	lds	r24, 0x0062
     8dc:	90 91 63 00 	lds	r25, 0x0063
     8e0:	00 97       	sbiw	r24, 0x00	; 0
     8e2:	29 f0       	breq	.+10     	; 0x8ee <__vector_10+0x40>
	{
		Timer0CompareMatchSetCallBackISR();
     8e4:	e0 91 62 00 	lds	r30, 0x0062
     8e8:	f0 91 63 00 	lds	r31, 0x0063
     8ec:	09 95       	icall
	}
	else 
	{
		//do nothing
	}
}
     8ee:	cf 91       	pop	r28
     8f0:	df 91       	pop	r29
     8f2:	ff 91       	pop	r31
     8f4:	ef 91       	pop	r30
     8f6:	bf 91       	pop	r27
     8f8:	af 91       	pop	r26
     8fa:	9f 91       	pop	r25
     8fc:	8f 91       	pop	r24
     8fe:	7f 91       	pop	r23
     900:	6f 91       	pop	r22
     902:	5f 91       	pop	r21
     904:	4f 91       	pop	r20
     906:	3f 91       	pop	r19
     908:	2f 91       	pop	r18
     90a:	0f 90       	pop	r0
     90c:	0f be       	out	0x3f, r0	; 63
     90e:	0f 90       	pop	r0
     910:	1f 90       	pop	r1
     912:	18 95       	reti

00000914 <__vector_11>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void __vector_11 (void)      __attribute__((signal));
void __vector_11 (void)
{
     914:	1f 92       	push	r1
     916:	0f 92       	push	r0
     918:	0f b6       	in	r0, 0x3f	; 63
     91a:	0f 92       	push	r0
     91c:	11 24       	eor	r1, r1
     91e:	2f 93       	push	r18
     920:	3f 93       	push	r19
     922:	4f 93       	push	r20
     924:	5f 93       	push	r21
     926:	6f 93       	push	r22
     928:	7f 93       	push	r23
     92a:	8f 93       	push	r24
     92c:	9f 93       	push	r25
     92e:	af 93       	push	r26
     930:	bf 93       	push	r27
     932:	ef 93       	push	r30
     934:	ff 93       	push	r31
     936:	df 93       	push	r29
     938:	cf 93       	push	r28
     93a:	cd b7       	in	r28, 0x3d	; 61
     93c:	de b7       	in	r29, 0x3e	; 62
	if(Timer0OverFlowSetCallBackISR!=NULL_POINTER)
     93e:	80 91 64 00 	lds	r24, 0x0064
     942:	90 91 65 00 	lds	r25, 0x0065
     946:	00 97       	sbiw	r24, 0x00	; 0
     948:	29 f0       	breq	.+10     	; 0x954 <__vector_11+0x40>
	{
		Timer0OverFlowSetCallBackISR() ;
     94a:	e0 91 64 00 	lds	r30, 0x0064
     94e:	f0 91 65 00 	lds	r31, 0x0065
     952:	09 95       	icall
	}
	else 
	{
		//do nothing
	}
}
     954:	cf 91       	pop	r28
     956:	df 91       	pop	r29
     958:	ff 91       	pop	r31
     95a:	ef 91       	pop	r30
     95c:	bf 91       	pop	r27
     95e:	af 91       	pop	r26
     960:	9f 91       	pop	r25
     962:	8f 91       	pop	r24
     964:	7f 91       	pop	r23
     966:	6f 91       	pop	r22
     968:	5f 91       	pop	r21
     96a:	4f 91       	pop	r20
     96c:	3f 91       	pop	r19
     96e:	2f 91       	pop	r18
     970:	0f 90       	pop	r0
     972:	0f be       	out	0x3f, r0	; 63
     974:	0f 90       	pop	r0
     976:	1f 90       	pop	r1
     978:	18 95       	reti

0000097a <TIMER0_u8BusyWaitMS>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//busy wait with prescaller 8
uint8_t TIMER0_u8BusyWaitMS(uint32_t u32_BusyTimeInMilliSec)
{
     97a:	0f 93       	push	r16
     97c:	1f 93       	push	r17
     97e:	df 93       	push	r29
     980:	cf 93       	push	r28
     982:	cd b7       	in	r28, 0x3d	; 61
     984:	de b7       	in	r29, 0x3e	; 62
     986:	c9 54       	subi	r28, 0x49	; 73
     988:	d0 40       	sbci	r29, 0x00	; 0
     98a:	0f b6       	in	r0, 0x3f	; 63
     98c:	f8 94       	cli
     98e:	de bf       	out	0x3e, r29	; 62
     990:	0f be       	out	0x3f, r0	; 63
     992:	cd bf       	out	0x3d, r28	; 61
     994:	6b 87       	std	Y+11, r22	; 0x0b
     996:	7c 87       	std	Y+12, r23	; 0x0c
     998:	8d 87       	std	Y+13, r24	; 0x0d
     99a:	9e 87       	std	Y+14, r25	; 0x0e
	uint8_t u8_Timer0FlagIfUsed = u8_TIMER0_FLAG_NOT_USED ;
     99c:	83 e1       	ldi	r24, 0x13	; 19
     99e:	89 83       	std	Y+1, r24	; 0x01
	if(gu8_FlagIfTimer0Used== u8_TIMER0_FLAG_NOT_USED)
     9a0:	80 91 61 00 	lds	r24, 0x0061
     9a4:	83 31       	cpi	r24, 0x13	; 19
     9a6:	09 f0       	breq	.+2      	; 0x9aa <TIMER0_u8BusyWaitMS+0x30>
     9a8:	c4 c1       	rjmp	.+904    	; 0xd32 <TIMER0_u8BusyWaitMS+0x3b8>
	{
		volatile uint64_t u64_BusyWaitcounter = u8_INTIAL_COUNTER_VAL ;
     9aa:	1a 82       	std	Y+2, r1	; 0x02
     9ac:	1b 82       	std	Y+3, r1	; 0x03
     9ae:	1c 82       	std	Y+4, r1	; 0x04
     9b0:	1d 82       	std	Y+5, r1	; 0x05
     9b2:	1e 82       	std	Y+6, r1	; 0x06
     9b4:	1f 82       	std	Y+7, r1	; 0x07
     9b6:	18 86       	std	Y+8, r1	; 0x08
     9b8:	19 86       	std	Y+9, r1	; 0x09
		volatile uint8_t u8_CheckCompareFlag ;
		TIMERS_u8IntModesDis(u8_TIMER0_OVER_FLOW) ;
     9ba:	81 e1       	ldi	r24, 0x11	; 17
     9bc:	0e 94 c1 03 	call	0x782	; 0x782 <TIMERS_u8IntModesDis>
		TIMERS_u8IntModesDis(u8_TIMER0_COMPARE_ON_MATCH) ;
     9c0:	82 e1       	ldi	r24, 0x12	; 18
     9c2:	0e 94 c1 03 	call	0x782	; 0x782 <TIMERS_u8IntModesDis>
		TIMER0_u8StartWithclockAndPrescalerSelect(u8_INTERNAL_CLK_PRE_8) ;
     9c6:	87 e0       	ldi	r24, 0x07	; 7
     9c8:	0e 94 1b 02 	call	0x436	; 0x436 <TIMER0_u8StartWithclockAndPrescalerSelect>
		TIMERS_u8ClearIntFlag(u8_TIMER0_COMPARE_ON_MATCH) ;
     9cc:	82 e1       	ldi	r24, 0x12	; 18
     9ce:	0e 94 17 03 	call	0x62e	; 0x62e <TIMERS_u8ClearIntFlag>
		Timer0_u8setCompareRegTicksBeforeOV(u8_NUM_OF_COUNTS_FOR_250_uS_with_8_pre) ;
     9d2:	8a ef       	ldi	r24, 0xFA	; 250
     9d4:	0e 94 0a 04 	call	0x814	; 0x814 <Timer0_u8setCompareRegTicksBeforeOV>
		Timer0_u8setOverFlowRegTicksBeforeOV(u8_MAX_TIMER0_COUNTS) ;
     9d8:	8f ef       	ldi	r24, 0xFF	; 255
     9da:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <Timer0_u8setOverFlowRegTicksBeforeOV>
     9de:	3a c1       	rjmp	.+628    	; 0xc54 <TIMER0_u8BusyWaitMS+0x2da>
		while(u64_BusyWaitcounter <=(uint64_t)(u32_BusyTimeInMilliSec*u8_NUMBER_OF_COUNTS_TO_COMP_1mS_with_8_pre))
		{
			TIMERS_u8GetIntFlag(u8_TIMER0_COMPARE_ON_MATCH,(&u8_CheckCompareFlag)) ;
     9e0:	9e 01       	movw	r18, r28
     9e2:	26 5f       	subi	r18, 0xF6	; 246
     9e4:	3f 4f       	sbci	r19, 0xFF	; 255
     9e6:	82 e1       	ldi	r24, 0x12	; 18
     9e8:	b9 01       	movw	r22, r18
     9ea:	0e 94 49 03 	call	0x692	; 0x692 <TIMERS_u8GetIntFlag>
			if(u8_CheckCompareFlag == u8_Flag_RAISED )
     9ee:	8a 85       	ldd	r24, Y+10	; 0x0a
     9f0:	81 30       	cpi	r24, 0x01	; 1
     9f2:	09 f0       	breq	.+2      	; 0x9f6 <TIMER0_u8BusyWaitMS+0x7c>
     9f4:	2f c1       	rjmp	.+606    	; 0xc54 <TIMER0_u8BusyWaitMS+0x2da>
			{
				TIMERS_u8ClearIntFlag(u8_TIMER0_COMPARE_ON_MATCH) ;
     9f6:	82 e1       	ldi	r24, 0x12	; 18
     9f8:	0e 94 17 03 	call	0x62e	; 0x62e <TIMERS_u8ClearIntFlag>
				u64_BusyWaitcounter++ ;
     9fc:	0a 81       	ldd	r16, Y+2	; 0x02
     9fe:	0f 8f       	std	Y+31, r16	; 0x1f
     a00:	1b 81       	ldd	r17, Y+3	; 0x03
     a02:	18 a3       	std	Y+32, r17	; 0x20
     a04:	2c 81       	ldd	r18, Y+4	; 0x04
     a06:	29 a3       	std	Y+33, r18	; 0x21
     a08:	3d 81       	ldd	r19, Y+5	; 0x05
     a0a:	3a a3       	std	Y+34, r19	; 0x22
     a0c:	4e 81       	ldd	r20, Y+6	; 0x06
     a0e:	4b a3       	std	Y+35, r20	; 0x23
     a10:	5f 81       	ldd	r21, Y+7	; 0x07
     a12:	5c a3       	std	Y+36, r21	; 0x24
     a14:	68 85       	ldd	r22, Y+8	; 0x08
     a16:	6d a3       	std	Y+37, r22	; 0x25
     a18:	79 85       	ldd	r23, Y+9	; 0x09
     a1a:	7e a3       	std	Y+38, r23	; 0x26
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	8f a3       	std	Y+39, r24	; 0x27
     a20:	18 a6       	std	Y+40, r1	; 0x28
     a22:	19 a6       	std	Y+41, r1	; 0x29
     a24:	1a a6       	std	Y+42, r1	; 0x2a
     a26:	1b a6       	std	Y+43, r1	; 0x2b
     a28:	1c a6       	std	Y+44, r1	; 0x2c
     a2a:	1d a6       	std	Y+45, r1	; 0x2d
     a2c:	1e a6       	std	Y+46, r1	; 0x2e
     a2e:	9f 8d       	ldd	r25, Y+31	; 0x1f
     a30:	0f a1       	ldd	r16, Y+39	; 0x27
     a32:	90 0f       	add	r25, r16
     a34:	9f a7       	std	Y+47, r25	; 0x2f
     a36:	11 e0       	ldi	r17, 0x01	; 1
     a38:	1f ab       	std	Y+55, r17	; 0x37
     a3a:	2f a5       	ldd	r18, Y+47	; 0x2f
     a3c:	3f 8d       	ldd	r19, Y+31	; 0x1f
     a3e:	23 17       	cp	r18, r19
     a40:	08 f0       	brcs	.+2      	; 0xa44 <TIMER0_u8BusyWaitMS+0xca>
     a42:	1f aa       	std	Y+55, r1	; 0x37
     a44:	48 a1       	ldd	r20, Y+32	; 0x20
     a46:	58 a5       	ldd	r21, Y+40	; 0x28
     a48:	45 0f       	add	r20, r21
     a4a:	48 ab       	std	Y+48, r20	; 0x30
     a4c:	61 e0       	ldi	r22, 0x01	; 1
     a4e:	68 af       	std	Y+56, r22	; 0x38
     a50:	78 a9       	ldd	r23, Y+48	; 0x30
     a52:	88 a1       	ldd	r24, Y+32	; 0x20
     a54:	78 17       	cp	r23, r24
     a56:	08 f0       	brcs	.+2      	; 0xa5a <TIMER0_u8BusyWaitMS+0xe0>
     a58:	18 ae       	std	Y+56, r1	; 0x38
     a5a:	9f a9       	ldd	r25, Y+55	; 0x37
     a5c:	08 a9       	ldd	r16, Y+48	; 0x30
     a5e:	90 0f       	add	r25, r16
     a60:	99 af       	std	Y+57, r25	; 0x39
     a62:	11 e0       	ldi	r17, 0x01	; 1
     a64:	1a af       	std	Y+58, r17	; 0x3a
     a66:	29 ad       	ldd	r18, Y+57	; 0x39
     a68:	38 a9       	ldd	r19, Y+48	; 0x30
     a6a:	23 17       	cp	r18, r19
     a6c:	08 f0       	brcs	.+2      	; 0xa70 <TIMER0_u8BusyWaitMS+0xf6>
     a6e:	1a ae       	std	Y+58, r1	; 0x3a
     a70:	48 ad       	ldd	r20, Y+56	; 0x38
     a72:	5a ad       	ldd	r21, Y+58	; 0x3a
     a74:	45 2b       	or	r20, r21
     a76:	48 af       	std	Y+56, r20	; 0x38
     a78:	69 ad       	ldd	r22, Y+57	; 0x39
     a7a:	68 ab       	std	Y+48, r22	; 0x30
     a7c:	79 a1       	ldd	r23, Y+33	; 0x21
     a7e:	89 a5       	ldd	r24, Y+41	; 0x29
     a80:	78 0f       	add	r23, r24
     a82:	79 ab       	std	Y+49, r23	; 0x31
     a84:	91 e0       	ldi	r25, 0x01	; 1
     a86:	9b af       	std	Y+59, r25	; 0x3b
     a88:	09 a9       	ldd	r16, Y+49	; 0x31
     a8a:	19 a1       	ldd	r17, Y+33	; 0x21
     a8c:	01 17       	cp	r16, r17
     a8e:	08 f0       	brcs	.+2      	; 0xa92 <TIMER0_u8BusyWaitMS+0x118>
     a90:	1b ae       	std	Y+59, r1	; 0x3b
     a92:	28 ad       	ldd	r18, Y+56	; 0x38
     a94:	39 a9       	ldd	r19, Y+49	; 0x31
     a96:	23 0f       	add	r18, r19
     a98:	2c af       	std	Y+60, r18	; 0x3c
     a9a:	41 e0       	ldi	r20, 0x01	; 1
     a9c:	4d af       	std	Y+61, r20	; 0x3d
     a9e:	5c ad       	ldd	r21, Y+60	; 0x3c
     aa0:	69 a9       	ldd	r22, Y+49	; 0x31
     aa2:	56 17       	cp	r21, r22
     aa4:	08 f0       	brcs	.+2      	; 0xaa8 <TIMER0_u8BusyWaitMS+0x12e>
     aa6:	1d ae       	std	Y+61, r1	; 0x3d
     aa8:	7b ad       	ldd	r23, Y+59	; 0x3b
     aaa:	8d ad       	ldd	r24, Y+61	; 0x3d
     aac:	78 2b       	or	r23, r24
     aae:	7b af       	std	Y+59, r23	; 0x3b
     ab0:	9c ad       	ldd	r25, Y+60	; 0x3c
     ab2:	99 ab       	std	Y+49, r25	; 0x31
     ab4:	0a a1       	ldd	r16, Y+34	; 0x22
     ab6:	1a a5       	ldd	r17, Y+42	; 0x2a
     ab8:	01 0f       	add	r16, r17
     aba:	0a ab       	std	Y+50, r16	; 0x32
     abc:	21 e0       	ldi	r18, 0x01	; 1
     abe:	2e af       	std	Y+62, r18	; 0x3e
     ac0:	3a a9       	ldd	r19, Y+50	; 0x32
     ac2:	4a a1       	ldd	r20, Y+34	; 0x22
     ac4:	34 17       	cp	r19, r20
     ac6:	08 f0       	brcs	.+2      	; 0xaca <TIMER0_u8BusyWaitMS+0x150>
     ac8:	1e ae       	std	Y+62, r1	; 0x3e
     aca:	5b ad       	ldd	r21, Y+59	; 0x3b
     acc:	6a a9       	ldd	r22, Y+50	; 0x32
     ace:	56 0f       	add	r21, r22
     ad0:	5f af       	std	Y+63, r21	; 0x3f
     ad2:	71 e0       	ldi	r23, 0x01	; 1
     ad4:	21 96       	adiw	r28, 0x01	; 1
     ad6:	7f af       	std	Y+63, r23	; 0x3f
     ad8:	21 97       	sbiw	r28, 0x01	; 1
     ada:	8f ad       	ldd	r24, Y+63	; 0x3f
     adc:	9a a9       	ldd	r25, Y+50	; 0x32
     ade:	89 17       	cp	r24, r25
     ae0:	18 f0       	brcs	.+6      	; 0xae8 <TIMER0_u8BusyWaitMS+0x16e>
     ae2:	21 96       	adiw	r28, 0x01	; 1
     ae4:	1f ae       	std	Y+63, r1	; 0x3f
     ae6:	21 97       	sbiw	r28, 0x01	; 1
     ae8:	0e ad       	ldd	r16, Y+62	; 0x3e
     aea:	21 96       	adiw	r28, 0x01	; 1
     aec:	1f ad       	ldd	r17, Y+63	; 0x3f
     aee:	21 97       	sbiw	r28, 0x01	; 1
     af0:	01 2b       	or	r16, r17
     af2:	0e af       	std	Y+62, r16	; 0x3e
     af4:	2f ad       	ldd	r18, Y+63	; 0x3f
     af6:	2a ab       	std	Y+50, r18	; 0x32
     af8:	3b a1       	ldd	r19, Y+35	; 0x23
     afa:	4b a5       	ldd	r20, Y+43	; 0x2b
     afc:	34 0f       	add	r19, r20
     afe:	3b ab       	std	Y+51, r19	; 0x33
     b00:	51 e0       	ldi	r21, 0x01	; 1
     b02:	22 96       	adiw	r28, 0x02	; 2
     b04:	5f af       	std	Y+63, r21	; 0x3f
     b06:	22 97       	sbiw	r28, 0x02	; 2
     b08:	6b a9       	ldd	r22, Y+51	; 0x33
     b0a:	7b a1       	ldd	r23, Y+35	; 0x23
     b0c:	67 17       	cp	r22, r23
     b0e:	18 f0       	brcs	.+6      	; 0xb16 <TIMER0_u8BusyWaitMS+0x19c>
     b10:	22 96       	adiw	r28, 0x02	; 2
     b12:	1f ae       	std	Y+63, r1	; 0x3f
     b14:	22 97       	sbiw	r28, 0x02	; 2
     b16:	8e ad       	ldd	r24, Y+62	; 0x3e
     b18:	9b a9       	ldd	r25, Y+51	; 0x33
     b1a:	89 0f       	add	r24, r25
     b1c:	23 96       	adiw	r28, 0x03	; 3
     b1e:	8f af       	std	Y+63, r24	; 0x3f
     b20:	23 97       	sbiw	r28, 0x03	; 3
     b22:	01 e0       	ldi	r16, 0x01	; 1
     b24:	24 96       	adiw	r28, 0x04	; 4
     b26:	0f af       	std	Y+63, r16	; 0x3f
     b28:	24 97       	sbiw	r28, 0x04	; 4
     b2a:	23 96       	adiw	r28, 0x03	; 3
     b2c:	1f ad       	ldd	r17, Y+63	; 0x3f
     b2e:	23 97       	sbiw	r28, 0x03	; 3
     b30:	2b a9       	ldd	r18, Y+51	; 0x33
     b32:	12 17       	cp	r17, r18
     b34:	18 f0       	brcs	.+6      	; 0xb3c <TIMER0_u8BusyWaitMS+0x1c2>
     b36:	24 96       	adiw	r28, 0x04	; 4
     b38:	1f ae       	std	Y+63, r1	; 0x3f
     b3a:	24 97       	sbiw	r28, 0x04	; 4
     b3c:	22 96       	adiw	r28, 0x02	; 2
     b3e:	3f ad       	ldd	r19, Y+63	; 0x3f
     b40:	22 97       	sbiw	r28, 0x02	; 2
     b42:	24 96       	adiw	r28, 0x04	; 4
     b44:	4f ad       	ldd	r20, Y+63	; 0x3f
     b46:	24 97       	sbiw	r28, 0x04	; 4
     b48:	34 2b       	or	r19, r20
     b4a:	22 96       	adiw	r28, 0x02	; 2
     b4c:	3f af       	std	Y+63, r19	; 0x3f
     b4e:	22 97       	sbiw	r28, 0x02	; 2
     b50:	23 96       	adiw	r28, 0x03	; 3
     b52:	5f ad       	ldd	r21, Y+63	; 0x3f
     b54:	23 97       	sbiw	r28, 0x03	; 3
     b56:	5b ab       	std	Y+51, r21	; 0x33
     b58:	6c a1       	ldd	r22, Y+36	; 0x24
     b5a:	7c a5       	ldd	r23, Y+44	; 0x2c
     b5c:	67 0f       	add	r22, r23
     b5e:	6c ab       	std	Y+52, r22	; 0x34
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	25 96       	adiw	r28, 0x05	; 5
     b64:	8f af       	std	Y+63, r24	; 0x3f
     b66:	25 97       	sbiw	r28, 0x05	; 5
     b68:	9c a9       	ldd	r25, Y+52	; 0x34
     b6a:	0c a1       	ldd	r16, Y+36	; 0x24
     b6c:	90 17       	cp	r25, r16
     b6e:	18 f0       	brcs	.+6      	; 0xb76 <TIMER0_u8BusyWaitMS+0x1fc>
     b70:	25 96       	adiw	r28, 0x05	; 5
     b72:	1f ae       	std	Y+63, r1	; 0x3f
     b74:	25 97       	sbiw	r28, 0x05	; 5
     b76:	22 96       	adiw	r28, 0x02	; 2
     b78:	1f ad       	ldd	r17, Y+63	; 0x3f
     b7a:	22 97       	sbiw	r28, 0x02	; 2
     b7c:	2c a9       	ldd	r18, Y+52	; 0x34
     b7e:	12 0f       	add	r17, r18
     b80:	26 96       	adiw	r28, 0x06	; 6
     b82:	1f af       	std	Y+63, r17	; 0x3f
     b84:	26 97       	sbiw	r28, 0x06	; 6
     b86:	31 e0       	ldi	r19, 0x01	; 1
     b88:	27 96       	adiw	r28, 0x07	; 7
     b8a:	3f af       	std	Y+63, r19	; 0x3f
     b8c:	27 97       	sbiw	r28, 0x07	; 7
     b8e:	26 96       	adiw	r28, 0x06	; 6
     b90:	4f ad       	ldd	r20, Y+63	; 0x3f
     b92:	26 97       	sbiw	r28, 0x06	; 6
     b94:	5c a9       	ldd	r21, Y+52	; 0x34
     b96:	45 17       	cp	r20, r21
     b98:	18 f0       	brcs	.+6      	; 0xba0 <TIMER0_u8BusyWaitMS+0x226>
     b9a:	27 96       	adiw	r28, 0x07	; 7
     b9c:	1f ae       	std	Y+63, r1	; 0x3f
     b9e:	27 97       	sbiw	r28, 0x07	; 7
     ba0:	25 96       	adiw	r28, 0x05	; 5
     ba2:	6f ad       	ldd	r22, Y+63	; 0x3f
     ba4:	25 97       	sbiw	r28, 0x05	; 5
     ba6:	27 96       	adiw	r28, 0x07	; 7
     ba8:	7f ad       	ldd	r23, Y+63	; 0x3f
     baa:	27 97       	sbiw	r28, 0x07	; 7
     bac:	67 2b       	or	r22, r23
     bae:	25 96       	adiw	r28, 0x05	; 5
     bb0:	6f af       	std	Y+63, r22	; 0x3f
     bb2:	25 97       	sbiw	r28, 0x05	; 5
     bb4:	26 96       	adiw	r28, 0x06	; 6
     bb6:	8f ad       	ldd	r24, Y+63	; 0x3f
     bb8:	26 97       	sbiw	r28, 0x06	; 6
     bba:	8c ab       	std	Y+52, r24	; 0x34
     bbc:	9d a1       	ldd	r25, Y+37	; 0x25
     bbe:	0d a5       	ldd	r16, Y+45	; 0x2d
     bc0:	90 0f       	add	r25, r16
     bc2:	9d ab       	std	Y+53, r25	; 0x35
     bc4:	11 e0       	ldi	r17, 0x01	; 1
     bc6:	28 96       	adiw	r28, 0x08	; 8
     bc8:	1f af       	std	Y+63, r17	; 0x3f
     bca:	28 97       	sbiw	r28, 0x08	; 8
     bcc:	2d a9       	ldd	r18, Y+53	; 0x35
     bce:	3d a1       	ldd	r19, Y+37	; 0x25
     bd0:	23 17       	cp	r18, r19
     bd2:	18 f0       	brcs	.+6      	; 0xbda <TIMER0_u8BusyWaitMS+0x260>
     bd4:	28 96       	adiw	r28, 0x08	; 8
     bd6:	1f ae       	std	Y+63, r1	; 0x3f
     bd8:	28 97       	sbiw	r28, 0x08	; 8
     bda:	25 96       	adiw	r28, 0x05	; 5
     bdc:	4f ad       	ldd	r20, Y+63	; 0x3f
     bde:	25 97       	sbiw	r28, 0x05	; 5
     be0:	5d a9       	ldd	r21, Y+53	; 0x35
     be2:	45 0f       	add	r20, r21
     be4:	29 96       	adiw	r28, 0x09	; 9
     be6:	4f af       	std	Y+63, r20	; 0x3f
     be8:	29 97       	sbiw	r28, 0x09	; 9
     bea:	61 e0       	ldi	r22, 0x01	; 1
     bec:	2a 96       	adiw	r28, 0x0a	; 10
     bee:	6f af       	std	Y+63, r22	; 0x3f
     bf0:	2a 97       	sbiw	r28, 0x0a	; 10
     bf2:	29 96       	adiw	r28, 0x09	; 9
     bf4:	7f ad       	ldd	r23, Y+63	; 0x3f
     bf6:	29 97       	sbiw	r28, 0x09	; 9
     bf8:	8d a9       	ldd	r24, Y+53	; 0x35
     bfa:	78 17       	cp	r23, r24
     bfc:	18 f0       	brcs	.+6      	; 0xc04 <TIMER0_u8BusyWaitMS+0x28a>
     bfe:	2a 96       	adiw	r28, 0x0a	; 10
     c00:	1f ae       	std	Y+63, r1	; 0x3f
     c02:	2a 97       	sbiw	r28, 0x0a	; 10
     c04:	28 96       	adiw	r28, 0x08	; 8
     c06:	9f ad       	ldd	r25, Y+63	; 0x3f
     c08:	28 97       	sbiw	r28, 0x08	; 8
     c0a:	2a 96       	adiw	r28, 0x0a	; 10
     c0c:	0f ad       	ldd	r16, Y+63	; 0x3f
     c0e:	2a 97       	sbiw	r28, 0x0a	; 10
     c10:	90 2b       	or	r25, r16
     c12:	28 96       	adiw	r28, 0x08	; 8
     c14:	9f af       	std	Y+63, r25	; 0x3f
     c16:	28 97       	sbiw	r28, 0x08	; 8
     c18:	29 96       	adiw	r28, 0x09	; 9
     c1a:	1f ad       	ldd	r17, Y+63	; 0x3f
     c1c:	29 97       	sbiw	r28, 0x09	; 9
     c1e:	1d ab       	std	Y+53, r17	; 0x35
     c20:	2e a1       	ldd	r18, Y+38	; 0x26
     c22:	3e a5       	ldd	r19, Y+46	; 0x2e
     c24:	23 0f       	add	r18, r19
     c26:	2e ab       	std	Y+54, r18	; 0x36
     c28:	28 96       	adiw	r28, 0x08	; 8
     c2a:	8f ad       	ldd	r24, Y+63	; 0x3f
     c2c:	28 97       	sbiw	r28, 0x08	; 8
     c2e:	4e a9       	ldd	r20, Y+54	; 0x36
     c30:	84 0f       	add	r24, r20
     c32:	8e ab       	std	Y+54, r24	; 0x36
     c34:	2f a5       	ldd	r18, Y+47	; 0x2f
     c36:	38 a9       	ldd	r19, Y+48	; 0x30
     c38:	49 a9       	ldd	r20, Y+49	; 0x31
     c3a:	5a a9       	ldd	r21, Y+50	; 0x32
     c3c:	6b a9       	ldd	r22, Y+51	; 0x33
     c3e:	7c a9       	ldd	r23, Y+52	; 0x34
     c40:	8d a9       	ldd	r24, Y+53	; 0x35
     c42:	9e a9       	ldd	r25, Y+54	; 0x36
     c44:	2a 83       	std	Y+2, r18	; 0x02
     c46:	3b 83       	std	Y+3, r19	; 0x03
     c48:	4c 83       	std	Y+4, r20	; 0x04
     c4a:	5d 83       	std	Y+5, r21	; 0x05
     c4c:	6e 83       	std	Y+6, r22	; 0x06
     c4e:	7f 83       	std	Y+7, r23	; 0x07
     c50:	88 87       	std	Y+8, r24	; 0x08
     c52:	99 87       	std	Y+9, r25	; 0x09
		TIMERS_u8IntModesDis(u8_TIMER0_COMPARE_ON_MATCH) ;
		TIMER0_u8StartWithclockAndPrescalerSelect(u8_INTERNAL_CLK_PRE_8) ;
		TIMERS_u8ClearIntFlag(u8_TIMER0_COMPARE_ON_MATCH) ;
		Timer0_u8setCompareRegTicksBeforeOV(u8_NUM_OF_COUNTS_FOR_250_uS_with_8_pre) ;
		Timer0_u8setOverFlowRegTicksBeforeOV(u8_MAX_TIMER0_COUNTS) ;
		while(u64_BusyWaitcounter <=(uint64_t)(u32_BusyTimeInMilliSec*u8_NUMBER_OF_COUNTS_TO_COMP_1mS_with_8_pre))
     c54:	8b 85       	ldd	r24, Y+11	; 0x0b
     c56:	9c 85       	ldd	r25, Y+12	; 0x0c
     c58:	ad 85       	ldd	r26, Y+13	; 0x0d
     c5a:	be 85       	ldd	r27, Y+14	; 0x0e
     c5c:	88 0f       	add	r24, r24
     c5e:	99 1f       	adc	r25, r25
     c60:	aa 1f       	adc	r26, r26
     c62:	bb 1f       	adc	r27, r27
     c64:	88 0f       	add	r24, r24
     c66:	99 1f       	adc	r25, r25
     c68:	aa 1f       	adc	r26, r26
     c6a:	bb 1f       	adc	r27, r27
     c6c:	8c 01       	movw	r16, r24
     c6e:	9d 01       	movw	r18, r26
     c70:	40 e0       	ldi	r20, 0x00	; 0
     c72:	50 e0       	ldi	r21, 0x00	; 0
     c74:	60 e0       	ldi	r22, 0x00	; 0
     c76:	70 e0       	ldi	r23, 0x00	; 0
     c78:	0f 8b       	std	Y+23, r16	; 0x17
     c7a:	18 8f       	std	Y+24, r17	; 0x18
     c7c:	29 8f       	std	Y+25, r18	; 0x19
     c7e:	3a 8f       	std	Y+26, r19	; 0x1a
     c80:	4b 8f       	std	Y+27, r20	; 0x1b
     c82:	5c 8f       	std	Y+28, r21	; 0x1c
     c84:	6d 8f       	std	Y+29, r22	; 0x1d
     c86:	7e 8f       	std	Y+30, r23	; 0x1e
     c88:	1a 81       	ldd	r17, Y+2	; 0x02
     c8a:	1f 87       	std	Y+15, r17	; 0x0f
     c8c:	2b 81       	ldd	r18, Y+3	; 0x03
     c8e:	28 8b       	std	Y+16, r18	; 0x10
     c90:	3c 81       	ldd	r19, Y+4	; 0x04
     c92:	39 8b       	std	Y+17, r19	; 0x11
     c94:	4d 81       	ldd	r20, Y+5	; 0x05
     c96:	4a 8b       	std	Y+18, r20	; 0x12
     c98:	5e 81       	ldd	r21, Y+6	; 0x06
     c9a:	5b 8b       	std	Y+19, r21	; 0x13
     c9c:	6f 81       	ldd	r22, Y+7	; 0x07
     c9e:	6c 8b       	std	Y+20, r22	; 0x14
     ca0:	78 85       	ldd	r23, Y+8	; 0x08
     ca2:	7d 8b       	std	Y+21, r23	; 0x15
     ca4:	89 85       	ldd	r24, Y+9	; 0x09
     ca6:	8e 8b       	std	Y+22, r24	; 0x16
     ca8:	9e 89       	ldd	r25, Y+22	; 0x16
     caa:	0e 8d       	ldd	r16, Y+30	; 0x1e
     cac:	09 17       	cp	r16, r25
     cae:	08 f4       	brcc	.+2      	; 0xcb2 <TIMER0_u8BusyWaitMS+0x338>
     cb0:	42 c0       	rjmp	.+132    	; 0xd36 <TIMER0_u8BusyWaitMS+0x3bc>
     cb2:	1e 89       	ldd	r17, Y+22	; 0x16
     cb4:	2e 8d       	ldd	r18, Y+30	; 0x1e
     cb6:	12 17       	cp	r17, r18
     cb8:	09 f0       	breq	.+2      	; 0xcbc <TIMER0_u8BusyWaitMS+0x342>
     cba:	92 ce       	rjmp	.-732    	; 0x9e0 <TIMER0_u8BusyWaitMS+0x66>
     cbc:	3d 89       	ldd	r19, Y+21	; 0x15
     cbe:	4d 8d       	ldd	r20, Y+29	; 0x1d
     cc0:	43 17       	cp	r20, r19
     cc2:	c8 f1       	brcs	.+114    	; 0xd36 <TIMER0_u8BusyWaitMS+0x3bc>
     cc4:	5d 89       	ldd	r21, Y+21	; 0x15
     cc6:	6d 8d       	ldd	r22, Y+29	; 0x1d
     cc8:	56 17       	cp	r21, r22
     cca:	09 f0       	breq	.+2      	; 0xcce <TIMER0_u8BusyWaitMS+0x354>
     ccc:	89 ce       	rjmp	.-750    	; 0x9e0 <TIMER0_u8BusyWaitMS+0x66>
     cce:	7c 89       	ldd	r23, Y+20	; 0x14
     cd0:	8c 8d       	ldd	r24, Y+28	; 0x1c
     cd2:	87 17       	cp	r24, r23
     cd4:	80 f1       	brcs	.+96     	; 0xd36 <TIMER0_u8BusyWaitMS+0x3bc>
     cd6:	9c 89       	ldd	r25, Y+20	; 0x14
     cd8:	0c 8d       	ldd	r16, Y+28	; 0x1c
     cda:	90 17       	cp	r25, r16
     cdc:	09 f0       	breq	.+2      	; 0xce0 <TIMER0_u8BusyWaitMS+0x366>
     cde:	80 ce       	rjmp	.-768    	; 0x9e0 <TIMER0_u8BusyWaitMS+0x66>
     ce0:	1b 89       	ldd	r17, Y+19	; 0x13
     ce2:	2b 8d       	ldd	r18, Y+27	; 0x1b
     ce4:	21 17       	cp	r18, r17
     ce6:	38 f1       	brcs	.+78     	; 0xd36 <TIMER0_u8BusyWaitMS+0x3bc>
     ce8:	3b 89       	ldd	r19, Y+19	; 0x13
     cea:	4b 8d       	ldd	r20, Y+27	; 0x1b
     cec:	34 17       	cp	r19, r20
     cee:	09 f0       	breq	.+2      	; 0xcf2 <TIMER0_u8BusyWaitMS+0x378>
     cf0:	77 ce       	rjmp	.-786    	; 0x9e0 <TIMER0_u8BusyWaitMS+0x66>
     cf2:	5a 89       	ldd	r21, Y+18	; 0x12
     cf4:	6a 8d       	ldd	r22, Y+26	; 0x1a
     cf6:	65 17       	cp	r22, r21
     cf8:	f0 f0       	brcs	.+60     	; 0xd36 <TIMER0_u8BusyWaitMS+0x3bc>
     cfa:	7a 89       	ldd	r23, Y+18	; 0x12
     cfc:	8a 8d       	ldd	r24, Y+26	; 0x1a
     cfe:	78 17       	cp	r23, r24
     d00:	09 f0       	breq	.+2      	; 0xd04 <TIMER0_u8BusyWaitMS+0x38a>
     d02:	6e ce       	rjmp	.-804    	; 0x9e0 <TIMER0_u8BusyWaitMS+0x66>
     d04:	99 89       	ldd	r25, Y+17	; 0x11
     d06:	09 8d       	ldd	r16, Y+25	; 0x19
     d08:	09 17       	cp	r16, r25
     d0a:	a8 f0       	brcs	.+42     	; 0xd36 <TIMER0_u8BusyWaitMS+0x3bc>
     d0c:	19 89       	ldd	r17, Y+17	; 0x11
     d0e:	29 8d       	ldd	r18, Y+25	; 0x19
     d10:	12 17       	cp	r17, r18
     d12:	09 f0       	breq	.+2      	; 0xd16 <TIMER0_u8BusyWaitMS+0x39c>
     d14:	65 ce       	rjmp	.-822    	; 0x9e0 <TIMER0_u8BusyWaitMS+0x66>
     d16:	38 89       	ldd	r19, Y+16	; 0x10
     d18:	48 8d       	ldd	r20, Y+24	; 0x18
     d1a:	43 17       	cp	r20, r19
     d1c:	60 f0       	brcs	.+24     	; 0xd36 <TIMER0_u8BusyWaitMS+0x3bc>
     d1e:	58 89       	ldd	r21, Y+16	; 0x10
     d20:	68 8d       	ldd	r22, Y+24	; 0x18
     d22:	56 17       	cp	r21, r22
     d24:	09 f0       	breq	.+2      	; 0xd28 <TIMER0_u8BusyWaitMS+0x3ae>
     d26:	5c ce       	rjmp	.-840    	; 0x9e0 <TIMER0_u8BusyWaitMS+0x66>
     d28:	7f 85       	ldd	r23, Y+15	; 0x0f
     d2a:	8f 89       	ldd	r24, Y+23	; 0x17
     d2c:	87 17       	cp	r24, r23
     d2e:	18 f0       	brcs	.+6      	; 0xd36 <TIMER0_u8BusyWaitMS+0x3bc>
     d30:	57 ce       	rjmp	.-850    	; 0x9e0 <TIMER0_u8BusyWaitMS+0x66>
			}
		}
	}
	else
	{
		u8_Timer0FlagIfUsed = u8_TIMER0_FLAG_USED ;
     d32:	84 e1       	ldi	r24, 0x14	; 20
     d34:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_Timer0FlagIfUsed ;
     d36:	89 81       	ldd	r24, Y+1	; 0x01
	
}
     d38:	c7 5b       	subi	r28, 0xB7	; 183
     d3a:	df 4f       	sbci	r29, 0xFF	; 255
     d3c:	0f b6       	in	r0, 0x3f	; 63
     d3e:	f8 94       	cli
     d40:	de bf       	out	0x3e, r29	; 62
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	cd bf       	out	0x3d, r28	; 61
     d46:	cf 91       	pop	r28
     d48:	df 91       	pop	r29
     d4a:	1f 91       	pop	r17
     d4c:	0f 91       	pop	r16
     d4e:	08 95       	ret

00000d50 <TIMER0_u8BusyWaitUS>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//busy wait with prescaller 8
uint8_t TIMER0_u8BusyWaitUS(uint32_t u32_BusyTimeInMicroSec)
{
     d50:	df 93       	push	r29
     d52:	cf 93       	push	r28
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
     d58:	2a 97       	sbiw	r28, 0x0a	; 10
     d5a:	0f b6       	in	r0, 0x3f	; 63
     d5c:	f8 94       	cli
     d5e:	de bf       	out	0x3e, r29	; 62
     d60:	0f be       	out	0x3f, r0	; 63
     d62:	cd bf       	out	0x3d, r28	; 61
     d64:	6f 83       	std	Y+7, r22	; 0x07
     d66:	78 87       	std	Y+8, r23	; 0x08
     d68:	89 87       	std	Y+9, r24	; 0x09
     d6a:	9a 87       	std	Y+10, r25	; 0x0a
	uint8_t u8_Timer0FlagIfUsed = u8_TIMER0_FLAG_NOT_USED ;
     d6c:	83 e1       	ldi	r24, 0x13	; 19
     d6e:	89 83       	std	Y+1, r24	; 0x01
	if(gu8_FlagIfTimer0Used== u8_TIMER0_FLAG_NOT_USED)
     d70:	80 91 61 00 	lds	r24, 0x0061
     d74:	83 31       	cpi	r24, 0x13	; 19
     d76:	e9 f5       	brne	.+122    	; 0xdf2 <TIMER0_u8BusyWaitUS+0xa2>
	{
		volatile uint32_t u32_BusyWaitcounter = u8_INTIAL_COUNTER_VAL ;
     d78:	1a 82       	std	Y+2, r1	; 0x02
     d7a:	1b 82       	std	Y+3, r1	; 0x03
     d7c:	1c 82       	std	Y+4, r1	; 0x04
     d7e:	1d 82       	std	Y+5, r1	; 0x05
		volatile uint8_t u8_CheckCompareFlag ;
		TIMERS_u8IntModesDis(u8_TIMER0_OVER_FLOW) ;
     d80:	81 e1       	ldi	r24, 0x11	; 17
     d82:	0e 94 c1 03 	call	0x782	; 0x782 <TIMERS_u8IntModesDis>
		TIMERS_u8IntModesDis(u8_TIMER0_COMPARE_ON_MATCH) ;
     d86:	82 e1       	ldi	r24, 0x12	; 18
     d88:	0e 94 c1 03 	call	0x782	; 0x782 <TIMERS_u8IntModesDis>
		TIMER0_u8StartWithclockAndPrescalerSelect(u8_INTERNAL_CLK_PRE_8) ;
     d8c:	87 e0       	ldi	r24, 0x07	; 7
     d8e:	0e 94 1b 02 	call	0x436	; 0x436 <TIMER0_u8StartWithclockAndPrescalerSelect>
		TIMERS_u8ClearIntFlag(u8_TIMER0_COMPARE_ON_MATCH) ;
     d92:	82 e1       	ldi	r24, 0x12	; 18
     d94:	0e 94 17 03 	call	0x62e	; 0x62e <TIMERS_u8ClearIntFlag>
		Timer0_u8setCompareRegTicksBeforeOV(u8_NUM_OF_COUNTS_FOR_250_uS_with_8_pre) ;
     d98:	8a ef       	ldi	r24, 0xFA	; 250
     d9a:	0e 94 0a 04 	call	0x814	; 0x814 <Timer0_u8setCompareRegTicksBeforeOV>
		Timer0_u8setOverFlowRegTicksBeforeOV(u8_MAX_TIMER0_COUNTS) ;
     d9e:	8f ef       	ldi	r24, 0xFF	; 255
     da0:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <Timer0_u8setOverFlowRegTicksBeforeOV>
     da4:	18 c0       	rjmp	.+48     	; 0xdd6 <TIMER0_u8BusyWaitUS+0x86>
		while(u32_BusyWaitcounter <=u32_BusyTimeInMicroSec)
		{
			TIMERS_u8GetIntFlag(u8_TIMER0_COMPARE_ON_MATCH,(&u8_CheckCompareFlag)) ;
     da6:	9e 01       	movw	r18, r28
     da8:	2a 5f       	subi	r18, 0xFA	; 250
     daa:	3f 4f       	sbci	r19, 0xFF	; 255
     dac:	82 e1       	ldi	r24, 0x12	; 18
     dae:	b9 01       	movw	r22, r18
     db0:	0e 94 49 03 	call	0x692	; 0x692 <TIMERS_u8GetIntFlag>
			if(u8_CheckCompareFlag == u8_Flag_RAISED )
     db4:	8e 81       	ldd	r24, Y+6	; 0x06
     db6:	81 30       	cpi	r24, 0x01	; 1
     db8:	71 f4       	brne	.+28     	; 0xdd6 <TIMER0_u8BusyWaitUS+0x86>
			{
				TIMERS_u8ClearIntFlag(u8_TIMER0_COMPARE_ON_MATCH) ;
     dba:	82 e1       	ldi	r24, 0x12	; 18
     dbc:	0e 94 17 03 	call	0x62e	; 0x62e <TIMERS_u8ClearIntFlag>
				u32_BusyWaitcounter++ ;
     dc0:	8a 81       	ldd	r24, Y+2	; 0x02
     dc2:	9b 81       	ldd	r25, Y+3	; 0x03
     dc4:	ac 81       	ldd	r26, Y+4	; 0x04
     dc6:	bd 81       	ldd	r27, Y+5	; 0x05
     dc8:	01 96       	adiw	r24, 0x01	; 1
     dca:	a1 1d       	adc	r26, r1
     dcc:	b1 1d       	adc	r27, r1
     dce:	8a 83       	std	Y+2, r24	; 0x02
     dd0:	9b 83       	std	Y+3, r25	; 0x03
     dd2:	ac 83       	std	Y+4, r26	; 0x04
     dd4:	bd 83       	std	Y+5, r27	; 0x05
		TIMERS_u8IntModesDis(u8_TIMER0_COMPARE_ON_MATCH) ;
		TIMER0_u8StartWithclockAndPrescalerSelect(u8_INTERNAL_CLK_PRE_8) ;
		TIMERS_u8ClearIntFlag(u8_TIMER0_COMPARE_ON_MATCH) ;
		Timer0_u8setCompareRegTicksBeforeOV(u8_NUM_OF_COUNTS_FOR_250_uS_with_8_pre) ;
		Timer0_u8setOverFlowRegTicksBeforeOV(u8_MAX_TIMER0_COUNTS) ;
		while(u32_BusyWaitcounter <=u32_BusyTimeInMicroSec)
     dd6:	2a 81       	ldd	r18, Y+2	; 0x02
     dd8:	3b 81       	ldd	r19, Y+3	; 0x03
     dda:	4c 81       	ldd	r20, Y+4	; 0x04
     ddc:	5d 81       	ldd	r21, Y+5	; 0x05
     dde:	8f 81       	ldd	r24, Y+7	; 0x07
     de0:	98 85       	ldd	r25, Y+8	; 0x08
     de2:	a9 85       	ldd	r26, Y+9	; 0x09
     de4:	ba 85       	ldd	r27, Y+10	; 0x0a
     de6:	82 17       	cp	r24, r18
     de8:	93 07       	cpc	r25, r19
     dea:	a4 07       	cpc	r26, r20
     dec:	b5 07       	cpc	r27, r21
     dee:	d8 f6       	brcc	.-74     	; 0xda6 <TIMER0_u8BusyWaitUS+0x56>
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <TIMER0_u8BusyWaitUS+0xa6>
			}
		}
	}
	else
	{
		u8_Timer0FlagIfUsed = u8_TIMER0_FLAG_USED ;
     df2:	84 e1       	ldi	r24, 0x14	; 20
     df4:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_Timer0FlagIfUsed ;
     df6:	89 81       	ldd	r24, Y+1	; 0x01
	
}
     df8:	2a 96       	adiw	r28, 0x0a	; 10
     dfa:	0f b6       	in	r0, 0x3f	; 63
     dfc:	f8 94       	cli
     dfe:	de bf       	out	0x3e, r29	; 62
     e00:	0f be       	out	0x3f, r0	; 63
     e02:	cd bf       	out	0x3d, r28	; 61
     e04:	cf 91       	pop	r28
     e06:	df 91       	pop	r29
     e08:	08 95       	ret

00000e0a <TIMER0_u8InterruptWait>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMER0_u8InterruptWait(uint32_t u32_BusyTimeInMilliSec)
{
     e0a:	df 93       	push	r29
     e0c:	cf 93       	push	r28
     e0e:	00 d0       	rcall	.+0      	; 0xe10 <TIMER0_u8InterruptWait+0x6>
     e10:	00 d0       	rcall	.+0      	; 0xe12 <TIMER0_u8InterruptWait+0x8>
     e12:	0f 92       	push	r0
     e14:	cd b7       	in	r28, 0x3d	; 61
     e16:	de b7       	in	r29, 0x3e	; 62
     e18:	6a 83       	std	Y+2, r22	; 0x02
     e1a:	7b 83       	std	Y+3, r23	; 0x03
     e1c:	8c 83       	std	Y+4, r24	; 0x04
     e1e:	9d 83       	std	Y+5, r25	; 0x05
	uint8_t u8_Timer0FlagIfUsed = u8_TIMER0_FLAG_NOT_USED ;
     e20:	83 e1       	ldi	r24, 0x13	; 19
     e22:	89 83       	std	Y+1, r24	; 0x01
	if(gu8_FlagIfTimer0Used==u8_TIMER0_FLAG_NOT_USED &&gu8_FinishIntWaitFlag != u8_BEGIN_INTERRUPT_WAITING )
     e24:	80 91 61 00 	lds	r24, 0x0061
     e28:	83 31       	cpi	r24, 0x13	; 19
     e2a:	09 f0       	breq	.+2      	; 0xe2e <TIMER0_u8InterruptWait+0x24>
     e2c:	3f c0       	rjmp	.+126    	; 0xeac <TIMER0_u8InterruptWait+0xa2>
     e2e:	80 91 60 00 	lds	r24, 0x0060
     e32:	87 31       	cpi	r24, 0x17	; 23
     e34:	d9 f1       	breq	.+118    	; 0xeac <TIMER0_u8InterruptWait+0xa2>
	{
		gu64_IntWaitcounter = (uint64_t)(u32_BusyTimeInMilliSec*u8_NUMBER_OF_COUNTS_TO_COMP_1mS_with_8_pre) ;
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	9b 81       	ldd	r25, Y+3	; 0x03
     e3a:	ac 81       	ldd	r26, Y+4	; 0x04
     e3c:	bd 81       	ldd	r27, Y+5	; 0x05
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	aa 1f       	adc	r26, r26
     e44:	bb 1f       	adc	r27, r27
     e46:	88 0f       	add	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	aa 1f       	adc	r26, r26
     e4c:	bb 1f       	adc	r27, r27
     e4e:	9c 01       	movw	r18, r24
     e50:	ad 01       	movw	r20, r26
     e52:	60 e0       	ldi	r22, 0x00	; 0
     e54:	70 e0       	ldi	r23, 0x00	; 0
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	20 93 66 00 	sts	0x0066, r18
     e5e:	30 93 67 00 	sts	0x0067, r19
     e62:	40 93 68 00 	sts	0x0068, r20
     e66:	50 93 69 00 	sts	0x0069, r21
     e6a:	60 93 6a 00 	sts	0x006A, r22
     e6e:	70 93 6b 00 	sts	0x006B, r23
     e72:	80 93 6c 00 	sts	0x006C, r24
     e76:	90 93 6d 00 	sts	0x006D, r25
		Timer0_u8setCompareRegTicksBeforeOV(u8_NUM_OF_COUNTS_FOR_250_uS_with_8_pre) ;
     e7a:	8a ef       	ldi	r24, 0xFA	; 250
     e7c:	0e 94 0a 04 	call	0x814	; 0x814 <Timer0_u8setCompareRegTicksBeforeOV>
		Timer0_u8setOverFlowRegTicksBeforeOV(u8_MAX_TIMER0_COUNTS) ;
     e80:	8f ef       	ldi	r24, 0xFF	; 255
     e82:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <Timer0_u8setOverFlowRegTicksBeforeOV>
		gu8_FlagIfTimer0Used = u8_TIMER0_FLAG_USED ;
     e86:	84 e1       	ldi	r24, 0x14	; 20
     e88:	80 93 61 00 	sts	0x0061, r24
		TIMERS_u8IntModesEn(u8_TIMER0_COMPARE_ON_MATCH);
     e8c:	82 e1       	ldi	r24, 0x12	; 18
     e8e:	0e 94 81 03 	call	0x702	; 0x702 <TIMERS_u8IntModesEn>
		TIMER0_u8setCallBack(u8_TIMER0_COMPARE_ON_MATCH,void_IntWaitControlFlagCount) ;
     e92:	21 e6       	ldi	r18, 0x61	; 97
     e94:	37 e0       	ldi	r19, 0x07	; 7
     e96:	82 e1       	ldi	r24, 0x12	; 18
     e98:	b9 01       	movw	r22, r18
     e9a:	0e 94 1c 04 	call	0x838	; 0x838 <TIMER0_u8setCallBack>
		TIMER0_u8StartWithclockAndPrescalerSelect(u8_INTERNAL_CLK_PRE_8) ;
     e9e:	87 e0       	ldi	r24, 0x07	; 7
     ea0:	0e 94 1b 02 	call	0x436	; 0x436 <TIMER0_u8StartWithclockAndPrescalerSelect>
		gu8_FinishIntWaitFlag = u8_BEGIN_INTERRUPT_WAITING ;
     ea4:	87 e1       	ldi	r24, 0x17	; 23
     ea6:	80 93 60 00 	sts	0x0060, r24
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <TIMER0_u8InterruptWait+0xa6>

	}
	else
	{
		u8_Timer0FlagIfUsed = u8_TIMER0_FLAG_USED ;
     eac:	84 e1       	ldi	r24, 0x14	; 20
     eae:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_Timer0FlagIfUsed ;
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
}
     eb2:	0f 90       	pop	r0
     eb4:	0f 90       	pop	r0
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	0f 90       	pop	r0
     ebc:	cf 91       	pop	r28
     ebe:	df 91       	pop	r29
     ec0:	08 95       	ret

00000ec2 <void_IntWaitControlFlagCount>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void void_IntWaitControlFlagCount(void)
{
     ec2:	df 93       	push	r29
     ec4:	cf 93       	push	r28
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
     eca:	ab 97       	sbiw	r28, 0x2b	; 43
     ecc:	0f b6       	in	r0, 0x3f	; 63
     ece:	f8 94       	cli
     ed0:	de bf       	out	0x3e, r29	; 62
     ed2:	0f be       	out	0x3f, r0	; 63
     ed4:	cd bf       	out	0x3d, r28	; 61

	if(gu8_FlagIfTimer0Used==u8_TIMER0_FLAG_USED&&gu64_IntWaitcounter > u8_INTIAL_COUNTER_VAL)
     ed6:	80 91 61 00 	lds	r24, 0x0061
     eda:	84 31       	cpi	r24, 0x14	; 20
     edc:	09 f0       	breq	.+2      	; 0xee0 <void_IntWaitControlFlagCount+0x1e>
     ede:	17 c1       	rjmp	.+558    	; 0x110e <void_IntWaitControlFlagCount+0x24c>
     ee0:	20 91 66 00 	lds	r18, 0x0066
     ee4:	30 91 67 00 	lds	r19, 0x0067
     ee8:	40 91 68 00 	lds	r20, 0x0068
     eec:	50 91 69 00 	lds	r21, 0x0069
     ef0:	60 91 6a 00 	lds	r22, 0x006A
     ef4:	70 91 6b 00 	lds	r23, 0x006B
     ef8:	80 91 6c 00 	lds	r24, 0x006C
     efc:	90 91 6d 00 	lds	r25, 0x006D
     f00:	e2 2f       	mov	r30, r18
     f02:	e3 2b       	or	r30, r19
     f04:	e4 2b       	or	r30, r20
     f06:	e5 2b       	or	r30, r21
     f08:	e6 2b       	or	r30, r22
     f0a:	e7 2b       	or	r30, r23
     f0c:	e8 2b       	or	r30, r24
     f0e:	e9 2b       	or	r30, r25
     f10:	ee 23       	and	r30, r30
     f12:	09 f4       	brne	.+2      	; 0xf16 <void_IntWaitControlFlagCount+0x54>
     f14:	fc c0       	rjmp	.+504    	; 0x110e <void_IntWaitControlFlagCount+0x24c>
	{
		gu64_IntWaitcounter-- ;
     f16:	80 91 66 00 	lds	r24, 0x0066
     f1a:	89 83       	std	Y+1, r24	; 0x01
     f1c:	90 91 67 00 	lds	r25, 0x0067
     f20:	9a 83       	std	Y+2, r25	; 0x02
     f22:	80 91 68 00 	lds	r24, 0x0068
     f26:	8b 83       	std	Y+3, r24	; 0x03
     f28:	90 91 69 00 	lds	r25, 0x0069
     f2c:	9c 83       	std	Y+4, r25	; 0x04
     f2e:	80 91 6a 00 	lds	r24, 0x006A
     f32:	8d 83       	std	Y+5, r24	; 0x05
     f34:	90 91 6b 00 	lds	r25, 0x006B
     f38:	9e 83       	std	Y+6, r25	; 0x06
     f3a:	80 91 6c 00 	lds	r24, 0x006C
     f3e:	8f 83       	std	Y+7, r24	; 0x07
     f40:	90 91 6d 00 	lds	r25, 0x006D
     f44:	98 87       	std	Y+8, r25	; 0x08
     f46:	8f ef       	ldi	r24, 0xFF	; 255
     f48:	89 87       	std	Y+9, r24	; 0x09
     f4a:	9f ef       	ldi	r25, 0xFF	; 255
     f4c:	9a 87       	std	Y+10, r25	; 0x0a
     f4e:	8f ef       	ldi	r24, 0xFF	; 255
     f50:	8b 87       	std	Y+11, r24	; 0x0b
     f52:	9f ef       	ldi	r25, 0xFF	; 255
     f54:	9c 87       	std	Y+12, r25	; 0x0c
     f56:	8f ef       	ldi	r24, 0xFF	; 255
     f58:	8d 87       	std	Y+13, r24	; 0x0d
     f5a:	9f ef       	ldi	r25, 0xFF	; 255
     f5c:	9e 87       	std	Y+14, r25	; 0x0e
     f5e:	8f ef       	ldi	r24, 0xFF	; 255
     f60:	8f 87       	std	Y+15, r24	; 0x0f
     f62:	9f ef       	ldi	r25, 0xFF	; 255
     f64:	98 8b       	std	Y+16, r25	; 0x10
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	99 85       	ldd	r25, Y+9	; 0x09
     f6a:	89 0f       	add	r24, r25
     f6c:	89 8b       	std	Y+17, r24	; 0x11
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	89 8f       	std	Y+25, r24	; 0x19
     f72:	99 89       	ldd	r25, Y+17	; 0x11
     f74:	89 81       	ldd	r24, Y+1	; 0x01
     f76:	98 17       	cp	r25, r24
     f78:	08 f0       	brcs	.+2      	; 0xf7c <void_IntWaitControlFlagCount+0xba>
     f7a:	19 8e       	std	Y+25, r1	; 0x19
     f7c:	9a 81       	ldd	r25, Y+2	; 0x02
     f7e:	8a 85       	ldd	r24, Y+10	; 0x0a
     f80:	98 0f       	add	r25, r24
     f82:	9a 8b       	std	Y+18, r25	; 0x12
     f84:	91 e0       	ldi	r25, 0x01	; 1
     f86:	9a 8f       	std	Y+26, r25	; 0x1a
     f88:	8a 89       	ldd	r24, Y+18	; 0x12
     f8a:	9a 81       	ldd	r25, Y+2	; 0x02
     f8c:	89 17       	cp	r24, r25
     f8e:	08 f0       	brcs	.+2      	; 0xf92 <void_IntWaitControlFlagCount+0xd0>
     f90:	1a 8e       	std	Y+26, r1	; 0x1a
     f92:	89 8d       	ldd	r24, Y+25	; 0x19
     f94:	9a 89       	ldd	r25, Y+18	; 0x12
     f96:	89 0f       	add	r24, r25
     f98:	8b 8f       	std	Y+27, r24	; 0x1b
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	8c 8f       	std	Y+28, r24	; 0x1c
     f9e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     fa0:	8a 89       	ldd	r24, Y+18	; 0x12
     fa2:	98 17       	cp	r25, r24
     fa4:	08 f0       	brcs	.+2      	; 0xfa8 <void_IntWaitControlFlagCount+0xe6>
     fa6:	1c 8e       	std	Y+28, r1	; 0x1c
     fa8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     faa:	8c 8d       	ldd	r24, Y+28	; 0x1c
     fac:	98 2b       	or	r25, r24
     fae:	9a 8f       	std	Y+26, r25	; 0x1a
     fb0:	9b 8d       	ldd	r25, Y+27	; 0x1b
     fb2:	9a 8b       	std	Y+18, r25	; 0x12
     fb4:	8b 81       	ldd	r24, Y+3	; 0x03
     fb6:	9b 85       	ldd	r25, Y+11	; 0x0b
     fb8:	89 0f       	add	r24, r25
     fba:	8b 8b       	std	Y+19, r24	; 0x13
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	8d 8f       	std	Y+29, r24	; 0x1d
     fc0:	9b 89       	ldd	r25, Y+19	; 0x13
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	98 17       	cp	r25, r24
     fc6:	08 f0       	brcs	.+2      	; 0xfca <void_IntWaitControlFlagCount+0x108>
     fc8:	1d 8e       	std	Y+29, r1	; 0x1d
     fca:	9a 8d       	ldd	r25, Y+26	; 0x1a
     fcc:	8b 89       	ldd	r24, Y+19	; 0x13
     fce:	98 0f       	add	r25, r24
     fd0:	9e 8f       	std	Y+30, r25	; 0x1e
     fd2:	91 e0       	ldi	r25, 0x01	; 1
     fd4:	9f 8f       	std	Y+31, r25	; 0x1f
     fd6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fd8:	9b 89       	ldd	r25, Y+19	; 0x13
     fda:	89 17       	cp	r24, r25
     fdc:	08 f0       	brcs	.+2      	; 0xfe0 <void_IntWaitControlFlagCount+0x11e>
     fde:	1f 8e       	std	Y+31, r1	; 0x1f
     fe0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fe2:	9f 8d       	ldd	r25, Y+31	; 0x1f
     fe4:	89 2b       	or	r24, r25
     fe6:	8d 8f       	std	Y+29, r24	; 0x1d
     fe8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fea:	8b 8b       	std	Y+19, r24	; 0x13
     fec:	9c 81       	ldd	r25, Y+4	; 0x04
     fee:	8c 85       	ldd	r24, Y+12	; 0x0c
     ff0:	98 0f       	add	r25, r24
     ff2:	9c 8b       	std	Y+20, r25	; 0x14
     ff4:	91 e0       	ldi	r25, 0x01	; 1
     ff6:	98 a3       	std	Y+32, r25	; 0x20
     ff8:	8c 89       	ldd	r24, Y+20	; 0x14
     ffa:	9c 81       	ldd	r25, Y+4	; 0x04
     ffc:	89 17       	cp	r24, r25
     ffe:	08 f0       	brcs	.+2      	; 0x1002 <void_IntWaitControlFlagCount+0x140>
    1000:	18 a2       	std	Y+32, r1	; 0x20
    1002:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1004:	9c 89       	ldd	r25, Y+20	; 0x14
    1006:	89 0f       	add	r24, r25
    1008:	89 a3       	std	Y+33, r24	; 0x21
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	8a a3       	std	Y+34, r24	; 0x22
    100e:	99 a1       	ldd	r25, Y+33	; 0x21
    1010:	8c 89       	ldd	r24, Y+20	; 0x14
    1012:	98 17       	cp	r25, r24
    1014:	08 f0       	brcs	.+2      	; 0x1018 <void_IntWaitControlFlagCount+0x156>
    1016:	1a a2       	std	Y+34, r1	; 0x22
    1018:	98 a1       	ldd	r25, Y+32	; 0x20
    101a:	8a a1       	ldd	r24, Y+34	; 0x22
    101c:	98 2b       	or	r25, r24
    101e:	98 a3       	std	Y+32, r25	; 0x20
    1020:	99 a1       	ldd	r25, Y+33	; 0x21
    1022:	9c 8b       	std	Y+20, r25	; 0x14
    1024:	8d 81       	ldd	r24, Y+5	; 0x05
    1026:	9d 85       	ldd	r25, Y+13	; 0x0d
    1028:	89 0f       	add	r24, r25
    102a:	8d 8b       	std	Y+21, r24	; 0x15
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	8b a3       	std	Y+35, r24	; 0x23
    1030:	9d 89       	ldd	r25, Y+21	; 0x15
    1032:	8d 81       	ldd	r24, Y+5	; 0x05
    1034:	98 17       	cp	r25, r24
    1036:	08 f0       	brcs	.+2      	; 0x103a <void_IntWaitControlFlagCount+0x178>
    1038:	1b a2       	std	Y+35, r1	; 0x23
    103a:	98 a1       	ldd	r25, Y+32	; 0x20
    103c:	8d 89       	ldd	r24, Y+21	; 0x15
    103e:	98 0f       	add	r25, r24
    1040:	9c a3       	std	Y+36, r25	; 0x24
    1042:	91 e0       	ldi	r25, 0x01	; 1
    1044:	9d a3       	std	Y+37, r25	; 0x25
    1046:	8c a1       	ldd	r24, Y+36	; 0x24
    1048:	9d 89       	ldd	r25, Y+21	; 0x15
    104a:	89 17       	cp	r24, r25
    104c:	08 f0       	brcs	.+2      	; 0x1050 <void_IntWaitControlFlagCount+0x18e>
    104e:	1d a2       	std	Y+37, r1	; 0x25
    1050:	8b a1       	ldd	r24, Y+35	; 0x23
    1052:	9d a1       	ldd	r25, Y+37	; 0x25
    1054:	89 2b       	or	r24, r25
    1056:	8b a3       	std	Y+35, r24	; 0x23
    1058:	8c a1       	ldd	r24, Y+36	; 0x24
    105a:	8d 8b       	std	Y+21, r24	; 0x15
    105c:	9e 81       	ldd	r25, Y+6	; 0x06
    105e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1060:	98 0f       	add	r25, r24
    1062:	9e 8b       	std	Y+22, r25	; 0x16
    1064:	91 e0       	ldi	r25, 0x01	; 1
    1066:	9e a3       	std	Y+38, r25	; 0x26
    1068:	8e 89       	ldd	r24, Y+22	; 0x16
    106a:	9e 81       	ldd	r25, Y+6	; 0x06
    106c:	89 17       	cp	r24, r25
    106e:	08 f0       	brcs	.+2      	; 0x1072 <void_IntWaitControlFlagCount+0x1b0>
    1070:	1e a2       	std	Y+38, r1	; 0x26
    1072:	8b a1       	ldd	r24, Y+35	; 0x23
    1074:	9e 89       	ldd	r25, Y+22	; 0x16
    1076:	89 0f       	add	r24, r25
    1078:	8f a3       	std	Y+39, r24	; 0x27
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	88 a7       	std	Y+40, r24	; 0x28
    107e:	9f a1       	ldd	r25, Y+39	; 0x27
    1080:	8e 89       	ldd	r24, Y+22	; 0x16
    1082:	98 17       	cp	r25, r24
    1084:	08 f0       	brcs	.+2      	; 0x1088 <void_IntWaitControlFlagCount+0x1c6>
    1086:	18 a6       	std	Y+40, r1	; 0x28
    1088:	9e a1       	ldd	r25, Y+38	; 0x26
    108a:	88 a5       	ldd	r24, Y+40	; 0x28
    108c:	98 2b       	or	r25, r24
    108e:	9e a3       	std	Y+38, r25	; 0x26
    1090:	9f a1       	ldd	r25, Y+39	; 0x27
    1092:	9e 8b       	std	Y+22, r25	; 0x16
    1094:	8f 81       	ldd	r24, Y+7	; 0x07
    1096:	9f 85       	ldd	r25, Y+15	; 0x0f
    1098:	89 0f       	add	r24, r25
    109a:	8f 8b       	std	Y+23, r24	; 0x17
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	89 a7       	std	Y+41, r24	; 0x29
    10a0:	9f 89       	ldd	r25, Y+23	; 0x17
    10a2:	8f 81       	ldd	r24, Y+7	; 0x07
    10a4:	98 17       	cp	r25, r24
    10a6:	08 f0       	brcs	.+2      	; 0x10aa <void_IntWaitControlFlagCount+0x1e8>
    10a8:	19 a6       	std	Y+41, r1	; 0x29
    10aa:	9e a1       	ldd	r25, Y+38	; 0x26
    10ac:	8f 89       	ldd	r24, Y+23	; 0x17
    10ae:	98 0f       	add	r25, r24
    10b0:	9a a7       	std	Y+42, r25	; 0x2a
    10b2:	91 e0       	ldi	r25, 0x01	; 1
    10b4:	9b a7       	std	Y+43, r25	; 0x2b
    10b6:	8a a5       	ldd	r24, Y+42	; 0x2a
    10b8:	9f 89       	ldd	r25, Y+23	; 0x17
    10ba:	89 17       	cp	r24, r25
    10bc:	08 f0       	brcs	.+2      	; 0x10c0 <void_IntWaitControlFlagCount+0x1fe>
    10be:	1b a6       	std	Y+43, r1	; 0x2b
    10c0:	89 a5       	ldd	r24, Y+41	; 0x29
    10c2:	9b a5       	ldd	r25, Y+43	; 0x2b
    10c4:	89 2b       	or	r24, r25
    10c6:	89 a7       	std	Y+41, r24	; 0x29
    10c8:	8a a5       	ldd	r24, Y+42	; 0x2a
    10ca:	8f 8b       	std	Y+23, r24	; 0x17
    10cc:	98 85       	ldd	r25, Y+8	; 0x08
    10ce:	88 89       	ldd	r24, Y+16	; 0x10
    10d0:	98 0f       	add	r25, r24
    10d2:	98 8f       	std	Y+24, r25	; 0x18
    10d4:	89 a5       	ldd	r24, Y+41	; 0x29
    10d6:	98 8d       	ldd	r25, Y+24	; 0x18
    10d8:	89 0f       	add	r24, r25
    10da:	88 8f       	std	Y+24, r24	; 0x18
    10dc:	29 89       	ldd	r18, Y+17	; 0x11
    10de:	3a 89       	ldd	r19, Y+18	; 0x12
    10e0:	4b 89       	ldd	r20, Y+19	; 0x13
    10e2:	5c 89       	ldd	r21, Y+20	; 0x14
    10e4:	6d 89       	ldd	r22, Y+21	; 0x15
    10e6:	7e 89       	ldd	r23, Y+22	; 0x16
    10e8:	8f 89       	ldd	r24, Y+23	; 0x17
    10ea:	98 8d       	ldd	r25, Y+24	; 0x18
    10ec:	20 93 66 00 	sts	0x0066, r18
    10f0:	30 93 67 00 	sts	0x0067, r19
    10f4:	40 93 68 00 	sts	0x0068, r20
    10f8:	50 93 69 00 	sts	0x0069, r21
    10fc:	60 93 6a 00 	sts	0x006A, r22
    1100:	70 93 6b 00 	sts	0x006B, r23
    1104:	80 93 6c 00 	sts	0x006C, r24
    1108:	90 93 6d 00 	sts	0x006D, r25
    110c:	06 c0       	rjmp	.+12     	; 0x111a <void_IntWaitControlFlagCount+0x258>
	}
	else
	{
		gu8_FlagIfTimer0Used = u8_TIMER0_FLAG_NOT_USED ;
    110e:	83 e1       	ldi	r24, 0x13	; 19
    1110:	80 93 61 00 	sts	0x0061, r24
		gu8_FinishIntWaitFlag = u8_FINISH_INTERRUPT_WAITING ;
    1114:	86 e1       	ldi	r24, 0x16	; 22
    1116:	80 93 60 00 	sts	0x0060, r24
	}
}
    111a:	ab 96       	adiw	r28, 0x2b	; 43
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	f8 94       	cli
    1120:	de bf       	out	0x3e, r29	; 62
    1122:	0f be       	out	0x3f, r0	; 63
    1124:	cd bf       	out	0x3d, r28	; 61
    1126:	cf 91       	pop	r28
    1128:	df 91       	pop	r29
    112a:	08 95       	ret

0000112c <DIO_u8SetPinVal>:
#include "dio_interface.h"
#include "dio_private.h"


uint8_t DIO_u8SetPinVal(uint8_t u8_PortNum,uint8_t u8_PinNum,uint8_t u8_PinState)     
{
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	00 d0       	rcall	.+0      	; 0x1132 <DIO_u8SetPinVal+0x6>
    1132:	00 d0       	rcall	.+0      	; 0x1134 <DIO_u8SetPinVal+0x8>
    1134:	00 d0       	rcall	.+0      	; 0x1136 <DIO_u8SetPinVal+0xa>
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
    113a:	8a 83       	std	Y+2, r24	; 0x02
    113c:	6b 83       	std	Y+3, r22	; 0x03
    113e:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t u8_ErrorState = u8_DIO_OK;
    1140:	82 e0       	ldi	r24, 0x02	; 2
    1142:	89 83       	std	Y+1, r24	; 0x01
	if(u8_PinNum>=u8_DIO_PIN0 && u8_PinNum<=u8_DIO_PIN7)
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	88 30       	cpi	r24, 0x08	; 8
    1148:	08 f0       	brcs	.+2      	; 0x114c <DIO_u8SetPinVal+0x20>
    114a:	ee c0       	rjmp	.+476    	; 0x1328 <DIO_u8SetPinVal+0x1fc>
	{
		switch(u8_PortNum)
    114c:	8a 81       	ldd	r24, Y+2	; 0x02
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	3e 83       	std	Y+6, r19	; 0x06
    1154:	2d 83       	std	Y+5, r18	; 0x05
    1156:	8d 81       	ldd	r24, Y+5	; 0x05
    1158:	9e 81       	ldd	r25, Y+6	; 0x06
    115a:	89 30       	cpi	r24, 0x09	; 9
    115c:	91 05       	cpc	r25, r1
    115e:	09 f4       	brne	.+2      	; 0x1162 <DIO_u8SetPinVal+0x36>
    1160:	4a c0       	rjmp	.+148    	; 0x11f6 <DIO_u8SetPinVal+0xca>
    1162:	2d 81       	ldd	r18, Y+5	; 0x05
    1164:	3e 81       	ldd	r19, Y+6	; 0x06
    1166:	2a 30       	cpi	r18, 0x0A	; 10
    1168:	31 05       	cpc	r19, r1
    116a:	34 f4       	brge	.+12     	; 0x1178 <DIO_u8SetPinVal+0x4c>
    116c:	8d 81       	ldd	r24, Y+5	; 0x05
    116e:	9e 81       	ldd	r25, Y+6	; 0x06
    1170:	88 30       	cpi	r24, 0x08	; 8
    1172:	91 05       	cpc	r25, r1
    1174:	71 f0       	breq	.+28     	; 0x1192 <DIO_u8SetPinVal+0x66>
    1176:	d5 c0       	rjmp	.+426    	; 0x1322 <DIO_u8SetPinVal+0x1f6>
    1178:	2d 81       	ldd	r18, Y+5	; 0x05
    117a:	3e 81       	ldd	r19, Y+6	; 0x06
    117c:	2a 30       	cpi	r18, 0x0A	; 10
    117e:	31 05       	cpc	r19, r1
    1180:	09 f4       	brne	.+2      	; 0x1184 <DIO_u8SetPinVal+0x58>
    1182:	6b c0       	rjmp	.+214    	; 0x125a <DIO_u8SetPinVal+0x12e>
    1184:	8d 81       	ldd	r24, Y+5	; 0x05
    1186:	9e 81       	ldd	r25, Y+6	; 0x06
    1188:	8b 30       	cpi	r24, 0x0B	; 11
    118a:	91 05       	cpc	r25, r1
    118c:	09 f4       	brne	.+2      	; 0x1190 <DIO_u8SetPinVal+0x64>
    118e:	97 c0       	rjmp	.+302    	; 0x12be <DIO_u8SetPinVal+0x192>
    1190:	c8 c0       	rjmp	.+400    	; 0x1322 <DIO_u8SetPinVal+0x1f6>
		{
			case u8_DIO_PORTA: if(u8_PinState == u8_DIO_PIN_LOW)
    1192:	8c 81       	ldd	r24, Y+4	; 0x04
    1194:	88 23       	and	r24, r24
    1196:	a9 f4       	brne	.+42     	; 0x11c2 <DIO_u8SetPinVal+0x96>
								{
									CLR_BIT(Ru8_PORTA,u8_PinNum) ;
    1198:	ab e3       	ldi	r26, 0x3B	; 59
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	eb e3       	ldi	r30, 0x3B	; 59
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	48 2f       	mov	r20, r24
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	02 2e       	mov	r0, r18
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <DIO_u8SetPinVal+0x8a>
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	0a 94       	dec	r0
    11b8:	e2 f7       	brpl	.-8      	; 0x11b2 <DIO_u8SetPinVal+0x86>
    11ba:	80 95       	com	r24
    11bc:	84 23       	and	r24, r20
    11be:	8c 93       	st	X, r24
    11c0:	b5 c0       	rjmp	.+362    	; 0x132c <DIO_u8SetPinVal+0x200>
								}
								else if(u8_PinState == u8_DIO_PIN_HIGH)
    11c2:	8c 81       	ldd	r24, Y+4	; 0x04
    11c4:	81 30       	cpi	r24, 0x01	; 1
    11c6:	a1 f4       	brne	.+40     	; 0x11f0 <DIO_u8SetPinVal+0xc4>
								{
									SET_BIT(Ru8_PORTA,u8_PinNum) ;
    11c8:	ab e3       	ldi	r26, 0x3B	; 59
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	eb e3       	ldi	r30, 0x3B	; 59
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	48 2f       	mov	r20, r24
    11d4:	8b 81       	ldd	r24, Y+3	; 0x03
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	02 2e       	mov	r0, r18
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <DIO_u8SetPinVal+0xba>
    11e2:	88 0f       	add	r24, r24
    11e4:	99 1f       	adc	r25, r25
    11e6:	0a 94       	dec	r0
    11e8:	e2 f7       	brpl	.-8      	; 0x11e2 <DIO_u8SetPinVal+0xb6>
    11ea:	84 2b       	or	r24, r20
    11ec:	8c 93       	st	X, r24
    11ee:	9e c0       	rjmp	.+316    	; 0x132c <DIO_u8SetPinVal+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
    11f0:	83 e0       	ldi	r24, 0x03	; 3
    11f2:	89 83       	std	Y+1, r24	; 0x01
    11f4:	9b c0       	rjmp	.+310    	; 0x132c <DIO_u8SetPinVal+0x200>
								}

							   break;
							   
			case u8_DIO_PORTB:	if(u8_PinState == u8_DIO_PIN_LOW)
    11f6:	8c 81       	ldd	r24, Y+4	; 0x04
    11f8:	88 23       	and	r24, r24
    11fa:	a9 f4       	brne	.+42     	; 0x1226 <DIO_u8SetPinVal+0xfa>
								{
									CLR_BIT(Ru8_PORTB,u8_PinNum) ;
    11fc:	a8 e3       	ldi	r26, 0x38	; 56
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	e8 e3       	ldi	r30, 0x38	; 56
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	48 2f       	mov	r20, r24
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	02 2e       	mov	r0, r18
    1214:	02 c0       	rjmp	.+4      	; 0x121a <DIO_u8SetPinVal+0xee>
    1216:	88 0f       	add	r24, r24
    1218:	99 1f       	adc	r25, r25
    121a:	0a 94       	dec	r0
    121c:	e2 f7       	brpl	.-8      	; 0x1216 <DIO_u8SetPinVal+0xea>
    121e:	80 95       	com	r24
    1220:	84 23       	and	r24, r20
    1222:	8c 93       	st	X, r24
    1224:	83 c0       	rjmp	.+262    	; 0x132c <DIO_u8SetPinVal+0x200>
								}
								else if(u8_PinState == u8_DIO_PIN_HIGH)
    1226:	8c 81       	ldd	r24, Y+4	; 0x04
    1228:	81 30       	cpi	r24, 0x01	; 1
    122a:	a1 f4       	brne	.+40     	; 0x1254 <DIO_u8SetPinVal+0x128>
								{
									SET_BIT(Ru8_PORTB,u8_PinNum) ;
    122c:	a8 e3       	ldi	r26, 0x38	; 56
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	e8 e3       	ldi	r30, 0x38	; 56
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	48 2f       	mov	r20, r24
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	02 2e       	mov	r0, r18
    1244:	02 c0       	rjmp	.+4      	; 0x124a <DIO_u8SetPinVal+0x11e>
    1246:	88 0f       	add	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	0a 94       	dec	r0
    124c:	e2 f7       	brpl	.-8      	; 0x1246 <DIO_u8SetPinVal+0x11a>
    124e:	84 2b       	or	r24, r20
    1250:	8c 93       	st	X, r24
    1252:	6c c0       	rjmp	.+216    	; 0x132c <DIO_u8SetPinVal+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
    1254:	83 e0       	ldi	r24, 0x03	; 3
    1256:	89 83       	std	Y+1, r24	; 0x01
    1258:	69 c0       	rjmp	.+210    	; 0x132c <DIO_u8SetPinVal+0x200>
								}
							   break;
							   
			case u8_DIO_PORTC:  if(u8_PinState == u8_DIO_PIN_LOW)
    125a:	8c 81       	ldd	r24, Y+4	; 0x04
    125c:	88 23       	and	r24, r24
    125e:	a9 f4       	brne	.+42     	; 0x128a <DIO_u8SetPinVal+0x15e>
								{
									CLR_BIT(Ru8_PORTC,u8_PinNum) ;
    1260:	a5 e3       	ldi	r26, 0x35	; 53
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	e5 e3       	ldi	r30, 0x35	; 53
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	48 2f       	mov	r20, r24
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	02 2e       	mov	r0, r18
    1278:	02 c0       	rjmp	.+4      	; 0x127e <DIO_u8SetPinVal+0x152>
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	0a 94       	dec	r0
    1280:	e2 f7       	brpl	.-8      	; 0x127a <DIO_u8SetPinVal+0x14e>
    1282:	80 95       	com	r24
    1284:	84 23       	and	r24, r20
    1286:	8c 93       	st	X, r24
    1288:	51 c0       	rjmp	.+162    	; 0x132c <DIO_u8SetPinVal+0x200>
								}
								else if(u8_PinState == u8_DIO_PIN_HIGH)
    128a:	8c 81       	ldd	r24, Y+4	; 0x04
    128c:	81 30       	cpi	r24, 0x01	; 1
    128e:	a1 f4       	brne	.+40     	; 0x12b8 <DIO_u8SetPinVal+0x18c>
								{
									SET_BIT(Ru8_PORTC,u8_PinNum) ;
    1290:	a5 e3       	ldi	r26, 0x35	; 53
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	e5 e3       	ldi	r30, 0x35	; 53
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	48 2f       	mov	r20, r24
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	02 2e       	mov	r0, r18
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <DIO_u8SetPinVal+0x182>
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	0a 94       	dec	r0
    12b0:	e2 f7       	brpl	.-8      	; 0x12aa <DIO_u8SetPinVal+0x17e>
    12b2:	84 2b       	or	r24, r20
    12b4:	8c 93       	st	X, r24
    12b6:	3a c0       	rjmp	.+116    	; 0x132c <DIO_u8SetPinVal+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
    12b8:	83 e0       	ldi	r24, 0x03	; 3
    12ba:	89 83       	std	Y+1, r24	; 0x01
    12bc:	37 c0       	rjmp	.+110    	; 0x132c <DIO_u8SetPinVal+0x200>
								}

								break;
								
			case u8_DIO_PORTD: if(u8_PinState == u8_DIO_PIN_LOW)
    12be:	8c 81       	ldd	r24, Y+4	; 0x04
    12c0:	88 23       	and	r24, r24
    12c2:	a9 f4       	brne	.+42     	; 0x12ee <DIO_u8SetPinVal+0x1c2>
							   {
									CLR_BIT(Ru8_PORTD,u8_PinNum) ;
    12c4:	a2 e3       	ldi	r26, 0x32	; 50
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	e2 e3       	ldi	r30, 0x32	; 50
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	48 2f       	mov	r20, r24
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	02 2e       	mov	r0, r18
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <DIO_u8SetPinVal+0x1b6>
    12de:	88 0f       	add	r24, r24
    12e0:	99 1f       	adc	r25, r25
    12e2:	0a 94       	dec	r0
    12e4:	e2 f7       	brpl	.-8      	; 0x12de <DIO_u8SetPinVal+0x1b2>
    12e6:	80 95       	com	r24
    12e8:	84 23       	and	r24, r20
    12ea:	8c 93       	st	X, r24
    12ec:	1f c0       	rjmp	.+62     	; 0x132c <DIO_u8SetPinVal+0x200>
							   }
							   else if(u8_PinState == u8_DIO_PIN_HIGH)
    12ee:	8c 81       	ldd	r24, Y+4	; 0x04
    12f0:	81 30       	cpi	r24, 0x01	; 1
    12f2:	a1 f4       	brne	.+40     	; 0x131c <DIO_u8SetPinVal+0x1f0>
							   {
									SET_BIT(Ru8_PORTD,u8_PinNum) ;
    12f4:	a2 e3       	ldi	r26, 0x32	; 50
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	e2 e3       	ldi	r30, 0x32	; 50
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	48 2f       	mov	r20, r24
    1300:	8b 81       	ldd	r24, Y+3	; 0x03
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	02 2e       	mov	r0, r18
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <DIO_u8SetPinVal+0x1e6>
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	0a 94       	dec	r0
    1314:	e2 f7       	brpl	.-8      	; 0x130e <DIO_u8SetPinVal+0x1e2>
    1316:	84 2b       	or	r24, r20
    1318:	8c 93       	st	X, r24
    131a:	08 c0       	rjmp	.+16     	; 0x132c <DIO_u8SetPinVal+0x200>
							   }
							   else 
							   {
									u8_ErrorState = u8_DIO_NOK ; 
    131c:	83 e0       	ldi	r24, 0x03	; 3
    131e:	89 83       	std	Y+1, r24	; 0x01
    1320:	05 c0       	rjmp	.+10     	; 0x132c <DIO_u8SetPinVal+0x200>
							   }
								break;
								
			default          : u8_ErrorState = u8_DIO_NOK ; 
    1322:	83 e0       	ldi	r24, 0x03	; 3
    1324:	89 83       	std	Y+1, r24	; 0x01
    1326:	02 c0       	rjmp	.+4      	; 0x132c <DIO_u8SetPinVal+0x200>
								break ; 
		}
	}
	else 
	{
		u8_ErrorState = u8_DIO_NOK ; 
    1328:	83 e0       	ldi	r24, 0x03	; 3
    132a:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_ErrorState  ; 
    132c:	89 81       	ldd	r24, Y+1	; 0x01
}
    132e:	26 96       	adiw	r28, 0x06	; 6
    1330:	0f b6       	in	r0, 0x3f	; 63
    1332:	f8 94       	cli
    1334:	de bf       	out	0x3e, r29	; 62
    1336:	0f be       	out	0x3f, r0	; 63
    1338:	cd bf       	out	0x3d, r28	; 61
    133a:	cf 91       	pop	r28
    133c:	df 91       	pop	r29
    133e:	08 95       	ret

00001340 <DIO_u8SetPinDir>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8SetPinDir(uint8_t u8_PortNum,uint8_t u8_PinNum,uint8_t u8_PinDir)      
{
    1340:	df 93       	push	r29
    1342:	cf 93       	push	r28
    1344:	00 d0       	rcall	.+0      	; 0x1346 <DIO_u8SetPinDir+0x6>
    1346:	00 d0       	rcall	.+0      	; 0x1348 <DIO_u8SetPinDir+0x8>
    1348:	00 d0       	rcall	.+0      	; 0x134a <DIO_u8SetPinDir+0xa>
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	8a 83       	std	Y+2, r24	; 0x02
    1350:	6b 83       	std	Y+3, r22	; 0x03
    1352:	4c 83       	std	Y+4, r20	; 0x04
	
	uint8_t u8_ErrorState = u8_DIO_OK;
    1354:	82 e0       	ldi	r24, 0x02	; 2
    1356:	89 83       	std	Y+1, r24	; 0x01
	if(u8_PinNum>=u8_DIO_PIN0 && u8_PinNum<=u8_DIO_PIN7)
    1358:	8b 81       	ldd	r24, Y+3	; 0x03
    135a:	88 30       	cpi	r24, 0x08	; 8
    135c:	08 f0       	brcs	.+2      	; 0x1360 <DIO_u8SetPinDir+0x20>
    135e:	ee c0       	rjmp	.+476    	; 0x153c <DIO_u8SetPinDir+0x1fc>
	{
		switch(u8_PortNum)
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	3e 83       	std	Y+6, r19	; 0x06
    1368:	2d 83       	std	Y+5, r18	; 0x05
    136a:	8d 81       	ldd	r24, Y+5	; 0x05
    136c:	9e 81       	ldd	r25, Y+6	; 0x06
    136e:	89 30       	cpi	r24, 0x09	; 9
    1370:	91 05       	cpc	r25, r1
    1372:	09 f4       	brne	.+2      	; 0x1376 <DIO_u8SetPinDir+0x36>
    1374:	4a c0       	rjmp	.+148    	; 0x140a <DIO_u8SetPinDir+0xca>
    1376:	2d 81       	ldd	r18, Y+5	; 0x05
    1378:	3e 81       	ldd	r19, Y+6	; 0x06
    137a:	2a 30       	cpi	r18, 0x0A	; 10
    137c:	31 05       	cpc	r19, r1
    137e:	34 f4       	brge	.+12     	; 0x138c <DIO_u8SetPinDir+0x4c>
    1380:	8d 81       	ldd	r24, Y+5	; 0x05
    1382:	9e 81       	ldd	r25, Y+6	; 0x06
    1384:	88 30       	cpi	r24, 0x08	; 8
    1386:	91 05       	cpc	r25, r1
    1388:	71 f0       	breq	.+28     	; 0x13a6 <DIO_u8SetPinDir+0x66>
    138a:	d5 c0       	rjmp	.+426    	; 0x1536 <DIO_u8SetPinDir+0x1f6>
    138c:	2d 81       	ldd	r18, Y+5	; 0x05
    138e:	3e 81       	ldd	r19, Y+6	; 0x06
    1390:	2a 30       	cpi	r18, 0x0A	; 10
    1392:	31 05       	cpc	r19, r1
    1394:	09 f4       	brne	.+2      	; 0x1398 <DIO_u8SetPinDir+0x58>
    1396:	6b c0       	rjmp	.+214    	; 0x146e <DIO_u8SetPinDir+0x12e>
    1398:	8d 81       	ldd	r24, Y+5	; 0x05
    139a:	9e 81       	ldd	r25, Y+6	; 0x06
    139c:	8b 30       	cpi	r24, 0x0B	; 11
    139e:	91 05       	cpc	r25, r1
    13a0:	09 f4       	brne	.+2      	; 0x13a4 <DIO_u8SetPinDir+0x64>
    13a2:	97 c0       	rjmp	.+302    	; 0x14d2 <DIO_u8SetPinDir+0x192>
    13a4:	c8 c0       	rjmp	.+400    	; 0x1536 <DIO_u8SetPinDir+0x1f6>
		{
			case u8_DIO_PORTA: if(u8_PinDir ==u8_DIO_OUTPUT_PIN)
    13a6:	8c 81       	ldd	r24, Y+4	; 0x04
    13a8:	81 30       	cpi	r24, 0x01	; 1
    13aa:	a1 f4       	brne	.+40     	; 0x13d4 <DIO_u8SetPinDir+0x94>
							   {
									SET_BIT(Ru8_DDRA,u8_PinNum) ;
    13ac:	aa e3       	ldi	r26, 0x3A	; 58
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	ea e3       	ldi	r30, 0x3A	; 58
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	48 2f       	mov	r20, r24
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	02 2e       	mov	r0, r18
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <DIO_u8SetPinDir+0x8a>
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	0a 94       	dec	r0
    13cc:	e2 f7       	brpl	.-8      	; 0x13c6 <DIO_u8SetPinDir+0x86>
    13ce:	84 2b       	or	r24, r20
    13d0:	8c 93       	st	X, r24
    13d2:	b6 c0       	rjmp	.+364    	; 0x1540 <DIO_u8SetPinDir+0x200>
							   }
							   else if(u8_PinDir ==u8_DIO_INPUT_PIN)
    13d4:	8c 81       	ldd	r24, Y+4	; 0x04
    13d6:	88 23       	and	r24, r24
    13d8:	a9 f4       	brne	.+42     	; 0x1404 <DIO_u8SetPinDir+0xc4>
							   {
									CLR_BIT(Ru8_DDRA,u8_PinNum) ;
    13da:	aa e3       	ldi	r26, 0x3A	; 58
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	ea e3       	ldi	r30, 0x3A	; 58
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	48 2f       	mov	r20, r24
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	28 2f       	mov	r18, r24
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	02 2e       	mov	r0, r18
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <DIO_u8SetPinDir+0xb8>
    13f4:	88 0f       	add	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	0a 94       	dec	r0
    13fa:	e2 f7       	brpl	.-8      	; 0x13f4 <DIO_u8SetPinDir+0xb4>
    13fc:	80 95       	com	r24
    13fe:	84 23       	and	r24, r20
    1400:	8c 93       	st	X, r24
    1402:	9e c0       	rjmp	.+316    	; 0x1540 <DIO_u8SetPinDir+0x200>
							   }
							   else 
							   {
									u8_ErrorState = u8_DIO_NOK ; 
    1404:	83 e0       	ldi	r24, 0x03	; 3
    1406:	89 83       	std	Y+1, r24	; 0x01
    1408:	9b c0       	rjmp	.+310    	; 0x1540 <DIO_u8SetPinDir+0x200>
							   }
							   break;
	
			case u8_DIO_PORTB: if(u8_PinDir ==u8_DIO_OUTPUT_PIN)
    140a:	8c 81       	ldd	r24, Y+4	; 0x04
    140c:	81 30       	cpi	r24, 0x01	; 1
    140e:	a1 f4       	brne	.+40     	; 0x1438 <DIO_u8SetPinDir+0xf8>
							   {
									SET_BIT(Ru8_DDRB,u8_PinNum) ;
    1410:	a7 e3       	ldi	r26, 0x37	; 55
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e7 e3       	ldi	r30, 0x37	; 55
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	48 2f       	mov	r20, r24
    141c:	8b 81       	ldd	r24, Y+3	; 0x03
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	02 2e       	mov	r0, r18
    1428:	02 c0       	rjmp	.+4      	; 0x142e <DIO_u8SetPinDir+0xee>
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	0a 94       	dec	r0
    1430:	e2 f7       	brpl	.-8      	; 0x142a <DIO_u8SetPinDir+0xea>
    1432:	84 2b       	or	r24, r20
    1434:	8c 93       	st	X, r24
    1436:	84 c0       	rjmp	.+264    	; 0x1540 <DIO_u8SetPinDir+0x200>
							   }
							   else if(u8_PinDir ==u8_DIO_INPUT_PIN)
    1438:	8c 81       	ldd	r24, Y+4	; 0x04
    143a:	88 23       	and	r24, r24
    143c:	a9 f4       	brne	.+42     	; 0x1468 <DIO_u8SetPinDir+0x128>
							   {
									CLR_BIT(Ru8_DDRB,u8_PinNum) ;
    143e:	a7 e3       	ldi	r26, 0x37	; 55
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	e7 e3       	ldi	r30, 0x37	; 55
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	48 2f       	mov	r20, r24
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	28 2f       	mov	r18, r24
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	02 2e       	mov	r0, r18
    1456:	02 c0       	rjmp	.+4      	; 0x145c <DIO_u8SetPinDir+0x11c>
    1458:	88 0f       	add	r24, r24
    145a:	99 1f       	adc	r25, r25
    145c:	0a 94       	dec	r0
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <DIO_u8SetPinDir+0x118>
    1460:	80 95       	com	r24
    1462:	84 23       	and	r24, r20
    1464:	8c 93       	st	X, r24
    1466:	6c c0       	rjmp	.+216    	; 0x1540 <DIO_u8SetPinDir+0x200>
							   }
							   else 
							   {
									u8_ErrorState = u8_DIO_NOK ; 
    1468:	83 e0       	ldi	r24, 0x03	; 3
    146a:	89 83       	std	Y+1, r24	; 0x01
    146c:	69 c0       	rjmp	.+210    	; 0x1540 <DIO_u8SetPinDir+0x200>
							   }
							   break;
							   
			case u8_DIO_PORTC:  if(u8_PinDir ==u8_DIO_OUTPUT_PIN)
    146e:	8c 81       	ldd	r24, Y+4	; 0x04
    1470:	81 30       	cpi	r24, 0x01	; 1
    1472:	a1 f4       	brne	.+40     	; 0x149c <DIO_u8SetPinDir+0x15c>
							    {
									SET_BIT(Ru8_DDRC,u8_PinNum) ;
    1474:	a4 e3       	ldi	r26, 0x34	; 52
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	e4 e3       	ldi	r30, 0x34	; 52
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	48 2f       	mov	r20, r24
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	28 2f       	mov	r18, r24
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	02 2e       	mov	r0, r18
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <DIO_u8SetPinDir+0x152>
    148e:	88 0f       	add	r24, r24
    1490:	99 1f       	adc	r25, r25
    1492:	0a 94       	dec	r0
    1494:	e2 f7       	brpl	.-8      	; 0x148e <DIO_u8SetPinDir+0x14e>
    1496:	84 2b       	or	r24, r20
    1498:	8c 93       	st	X, r24
    149a:	52 c0       	rjmp	.+164    	; 0x1540 <DIO_u8SetPinDir+0x200>
								}
								else if(u8_PinDir ==u8_DIO_INPUT_PIN)
    149c:	8c 81       	ldd	r24, Y+4	; 0x04
    149e:	88 23       	and	r24, r24
    14a0:	a9 f4       	brne	.+42     	; 0x14cc <DIO_u8SetPinDir+0x18c>
								{
									CLR_BIT(Ru8_DDRC,u8_PinNum) ;
    14a2:	a4 e3       	ldi	r26, 0x34	; 52
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	e4 e3       	ldi	r30, 0x34	; 52
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	48 2f       	mov	r20, r24
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	28 2f       	mov	r18, r24
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	02 2e       	mov	r0, r18
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <DIO_u8SetPinDir+0x180>
    14bc:	88 0f       	add	r24, r24
    14be:	99 1f       	adc	r25, r25
    14c0:	0a 94       	dec	r0
    14c2:	e2 f7       	brpl	.-8      	; 0x14bc <DIO_u8SetPinDir+0x17c>
    14c4:	80 95       	com	r24
    14c6:	84 23       	and	r24, r20
    14c8:	8c 93       	st	X, r24
    14ca:	3a c0       	rjmp	.+116    	; 0x1540 <DIO_u8SetPinDir+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
    14cc:	83 e0       	ldi	r24, 0x03	; 3
    14ce:	89 83       	std	Y+1, r24	; 0x01
    14d0:	37 c0       	rjmp	.+110    	; 0x1540 <DIO_u8SetPinDir+0x200>
								}
								break;
		
			case u8_DIO_PORTD: if(u8_PinDir ==u8_DIO_OUTPUT_PIN)
    14d2:	8c 81       	ldd	r24, Y+4	; 0x04
    14d4:	81 30       	cpi	r24, 0x01	; 1
    14d6:	a1 f4       	brne	.+40     	; 0x1500 <DIO_u8SetPinDir+0x1c0>
							    {
									SET_BIT(Ru8_DDRD,u8_PinNum) ;
    14d8:	a1 e3       	ldi	r26, 0x31	; 49
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e1 e3       	ldi	r30, 0x31	; 49
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	48 2f       	mov	r20, r24
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	02 2e       	mov	r0, r18
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <DIO_u8SetPinDir+0x1b6>
    14f2:	88 0f       	add	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	0a 94       	dec	r0
    14f8:	e2 f7       	brpl	.-8      	; 0x14f2 <DIO_u8SetPinDir+0x1b2>
    14fa:	84 2b       	or	r24, r20
    14fc:	8c 93       	st	X, r24
    14fe:	20 c0       	rjmp	.+64     	; 0x1540 <DIO_u8SetPinDir+0x200>
								}
								else if(u8_PinDir ==u8_DIO_INPUT_PIN)
    1500:	8c 81       	ldd	r24, Y+4	; 0x04
    1502:	88 23       	and	r24, r24
    1504:	a9 f4       	brne	.+42     	; 0x1530 <DIO_u8SetPinDir+0x1f0>
								{
									CLR_BIT(Ru8_DDRD,u8_PinNum) ;
    1506:	a1 e3       	ldi	r26, 0x31	; 49
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	e1 e3       	ldi	r30, 0x31	; 49
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	48 2f       	mov	r20, r24
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	02 2e       	mov	r0, r18
    151e:	02 c0       	rjmp	.+4      	; 0x1524 <DIO_u8SetPinDir+0x1e4>
    1520:	88 0f       	add	r24, r24
    1522:	99 1f       	adc	r25, r25
    1524:	0a 94       	dec	r0
    1526:	e2 f7       	brpl	.-8      	; 0x1520 <DIO_u8SetPinDir+0x1e0>
    1528:	80 95       	com	r24
    152a:	84 23       	and	r24, r20
    152c:	8c 93       	st	X, r24
    152e:	08 c0       	rjmp	.+16     	; 0x1540 <DIO_u8SetPinDir+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
    1530:	83 e0       	ldi	r24, 0x03	; 3
    1532:	89 83       	std	Y+1, r24	; 0x01
    1534:	05 c0       	rjmp	.+10     	; 0x1540 <DIO_u8SetPinDir+0x200>
								}
								break;
			
			default          : u8_ErrorState = u8_DIO_NOK ; 
    1536:	83 e0       	ldi	r24, 0x03	; 3
    1538:	89 83       	std	Y+1, r24	; 0x01
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <DIO_u8SetPinDir+0x200>
								break ; 
		}
	}
	else 
	{
		u8_ErrorState = u8_DIO_NOK ; 
    153c:	83 e0       	ldi	r24, 0x03	; 3
    153e:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_ErrorState  ; 
    1540:	89 81       	ldd	r24, Y+1	; 0x01
}
    1542:	26 96       	adiw	r28, 0x06	; 6
    1544:	0f b6       	in	r0, 0x3f	; 63
    1546:	f8 94       	cli
    1548:	de bf       	out	0x3e, r29	; 62
    154a:	0f be       	out	0x3f, r0	; 63
    154c:	cd bf       	out	0x3d, r28	; 61
    154e:	cf 91       	pop	r28
    1550:	df 91       	pop	r29
    1552:	08 95       	ret

00001554 <DIO_u8SetPortVal>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8SetPortVal(uint8_t u8_PortNum,uint8_t u8_PortState)
{
    1554:	df 93       	push	r29
    1556:	cf 93       	push	r28
    1558:	00 d0       	rcall	.+0      	; 0x155a <DIO_u8SetPortVal+0x6>
    155a:	00 d0       	rcall	.+0      	; 0x155c <DIO_u8SetPortVal+0x8>
    155c:	0f 92       	push	r0
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    1562:	8a 83       	std	Y+2, r24	; 0x02
    1564:	6b 83       	std	Y+3, r22	; 0x03
		uint8_t u8_ErrorState = u8_DIO_OK;
    1566:	82 e0       	ldi	r24, 0x02	; 2
    1568:	89 83       	std	Y+1, r24	; 0x01

		switch(u8_PortNum)
    156a:	8a 81       	ldd	r24, Y+2	; 0x02
    156c:	28 2f       	mov	r18, r24
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	3d 83       	std	Y+5, r19	; 0x05
    1572:	2c 83       	std	Y+4, r18	; 0x04
    1574:	8c 81       	ldd	r24, Y+4	; 0x04
    1576:	9d 81       	ldd	r25, Y+5	; 0x05
    1578:	89 30       	cpi	r24, 0x09	; 9
    157a:	91 05       	cpc	r25, r1
    157c:	d9 f0       	breq	.+54     	; 0x15b4 <DIO_u8SetPortVal+0x60>
    157e:	2c 81       	ldd	r18, Y+4	; 0x04
    1580:	3d 81       	ldd	r19, Y+5	; 0x05
    1582:	2a 30       	cpi	r18, 0x0A	; 10
    1584:	31 05       	cpc	r19, r1
    1586:	34 f4       	brge	.+12     	; 0x1594 <DIO_u8SetPortVal+0x40>
    1588:	8c 81       	ldd	r24, Y+4	; 0x04
    158a:	9d 81       	ldd	r25, Y+5	; 0x05
    158c:	88 30       	cpi	r24, 0x08	; 8
    158e:	91 05       	cpc	r25, r1
    1590:	61 f0       	breq	.+24     	; 0x15aa <DIO_u8SetPortVal+0x56>
    1592:	1f c0       	rjmp	.+62     	; 0x15d2 <DIO_u8SetPortVal+0x7e>
    1594:	2c 81       	ldd	r18, Y+4	; 0x04
    1596:	3d 81       	ldd	r19, Y+5	; 0x05
    1598:	2a 30       	cpi	r18, 0x0A	; 10
    159a:	31 05       	cpc	r19, r1
    159c:	81 f0       	breq	.+32     	; 0x15be <DIO_u8SetPortVal+0x6a>
    159e:	8c 81       	ldd	r24, Y+4	; 0x04
    15a0:	9d 81       	ldd	r25, Y+5	; 0x05
    15a2:	8b 30       	cpi	r24, 0x0B	; 11
    15a4:	91 05       	cpc	r25, r1
    15a6:	81 f0       	breq	.+32     	; 0x15c8 <DIO_u8SetPortVal+0x74>
    15a8:	14 c0       	rjmp	.+40     	; 0x15d2 <DIO_u8SetPortVal+0x7e>
		{
			case u8_DIO_PORTA: Ru8_PORTA = u8_PortState ;  break ;			   
    15aa:	eb e3       	ldi	r30, 0x3B	; 59
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	80 83       	st	Z, r24
    15b2:	11 c0       	rjmp	.+34     	; 0x15d6 <DIO_u8SetPortVal+0x82>
			case u8_DIO_PORTB: Ru8_PORTB = u8_PortState ;  break ;	
    15b4:	e8 e3       	ldi	r30, 0x38	; 56
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	80 83       	st	Z, r24
    15bc:	0c c0       	rjmp	.+24     	; 0x15d6 <DIO_u8SetPortVal+0x82>
			case u8_DIO_PORTC: Ru8_PORTC = u8_PortState ;  break ;	
    15be:	e5 e3       	ldi	r30, 0x35	; 53
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	80 83       	st	Z, r24
    15c6:	07 c0       	rjmp	.+14     	; 0x15d6 <DIO_u8SetPortVal+0x82>
			case u8_DIO_PORTD: Ru8_PORTD = u8_PortState ;  break ;	
    15c8:	e2 e3       	ldi	r30, 0x32	; 50
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    15ce:	80 83       	st	Z, r24
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <DIO_u8SetPortVal+0x82>
			default          : u8_ErrorState = u8_DIO_NOK; break ; 
    15d2:	83 e0       	ldi	r24, 0x03	; 3
    15d4:	89 83       	std	Y+1, r24	; 0x01
		}
		
	return u8_ErrorState  ; 
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	0f 90       	pop	r0
    15de:	0f 90       	pop	r0
    15e0:	0f 90       	pop	r0
    15e2:	cf 91       	pop	r28
    15e4:	df 91       	pop	r29
    15e6:	08 95       	ret

000015e8 <DIO_u8SetPortDir>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8SetPortDir(uint8_t u8_PortNum,uint8_t u8_PortDir)
{
    15e8:	df 93       	push	r29
    15ea:	cf 93       	push	r28
    15ec:	00 d0       	rcall	.+0      	; 0x15ee <DIO_u8SetPortDir+0x6>
    15ee:	00 d0       	rcall	.+0      	; 0x15f0 <DIO_u8SetPortDir+0x8>
    15f0:	0f 92       	push	r0
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
    15f6:	8a 83       	std	Y+2, r24	; 0x02
    15f8:	6b 83       	std	Y+3, r22	; 0x03
		uint8_t u8_ErrorState = u8_DIO_OK;
    15fa:	82 e0       	ldi	r24, 0x02	; 2
    15fc:	89 83       	std	Y+1, r24	; 0x01
		switch(u8_PortNum)
    15fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	3d 83       	std	Y+5, r19	; 0x05
    1606:	2c 83       	std	Y+4, r18	; 0x04
    1608:	8c 81       	ldd	r24, Y+4	; 0x04
    160a:	9d 81       	ldd	r25, Y+5	; 0x05
    160c:	89 30       	cpi	r24, 0x09	; 9
    160e:	91 05       	cpc	r25, r1
    1610:	d9 f0       	breq	.+54     	; 0x1648 <DIO_u8SetPortDir+0x60>
    1612:	2c 81       	ldd	r18, Y+4	; 0x04
    1614:	3d 81       	ldd	r19, Y+5	; 0x05
    1616:	2a 30       	cpi	r18, 0x0A	; 10
    1618:	31 05       	cpc	r19, r1
    161a:	34 f4       	brge	.+12     	; 0x1628 <DIO_u8SetPortDir+0x40>
    161c:	8c 81       	ldd	r24, Y+4	; 0x04
    161e:	9d 81       	ldd	r25, Y+5	; 0x05
    1620:	88 30       	cpi	r24, 0x08	; 8
    1622:	91 05       	cpc	r25, r1
    1624:	61 f0       	breq	.+24     	; 0x163e <DIO_u8SetPortDir+0x56>
    1626:	1f c0       	rjmp	.+62     	; 0x1666 <DIO_u8SetPortDir+0x7e>
    1628:	2c 81       	ldd	r18, Y+4	; 0x04
    162a:	3d 81       	ldd	r19, Y+5	; 0x05
    162c:	2a 30       	cpi	r18, 0x0A	; 10
    162e:	31 05       	cpc	r19, r1
    1630:	81 f0       	breq	.+32     	; 0x1652 <DIO_u8SetPortDir+0x6a>
    1632:	8c 81       	ldd	r24, Y+4	; 0x04
    1634:	9d 81       	ldd	r25, Y+5	; 0x05
    1636:	8b 30       	cpi	r24, 0x0B	; 11
    1638:	91 05       	cpc	r25, r1
    163a:	81 f0       	breq	.+32     	; 0x165c <DIO_u8SetPortDir+0x74>
    163c:	14 c0       	rjmp	.+40     	; 0x1666 <DIO_u8SetPortDir+0x7e>
		{
			case u8_DIO_PORTA: Ru8_DDRA = u8_PortDir ;     break ;			   
    163e:	ea e3       	ldi	r30, 0x3A	; 58
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	8b 81       	ldd	r24, Y+3	; 0x03
    1644:	80 83       	st	Z, r24
    1646:	11 c0       	rjmp	.+34     	; 0x166a <DIO_u8SetPortDir+0x82>
			case u8_DIO_PORTB: Ru8_DDRB = u8_PortDir ;     break ;	
    1648:	e7 e3       	ldi	r30, 0x37	; 55
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	80 83       	st	Z, r24
    1650:	0c c0       	rjmp	.+24     	; 0x166a <DIO_u8SetPortDir+0x82>
			case u8_DIO_PORTC: Ru8_DDRC = u8_PortDir ;     break ;	
    1652:	e4 e3       	ldi	r30, 0x34	; 52
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	80 83       	st	Z, r24
    165a:	07 c0       	rjmp	.+14     	; 0x166a <DIO_u8SetPortDir+0x82>
			case u8_DIO_PORTD: Ru8_DDRD = u8_PortDir ;     break ;	
    165c:	e1 e3       	ldi	r30, 0x31	; 49
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	80 83       	st	Z, r24
    1664:	02 c0       	rjmp	.+4      	; 0x166a <DIO_u8SetPortDir+0x82>
			default          : u8_ErrorState = u8_DIO_NOK; break ; 
    1666:	83 e0       	ldi	r24, 0x03	; 3
    1668:	89 83       	std	Y+1, r24	; 0x01
		}
		
	return u8_ErrorState  ; 
    166a:	89 81       	ldd	r24, Y+1	; 0x01
}
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	cf 91       	pop	r28
    1678:	df 91       	pop	r29
    167a:	08 95       	ret

0000167c <DIO_u8GetPinVal>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8GetPinVal(uint8_t u8_PortNum,uint8_t u8_PinNum,uint8_t* pu8_ReturnedPinVal)      
{
    167c:	df 93       	push	r29
    167e:	cf 93       	push	r28
    1680:	cd b7       	in	r28, 0x3d	; 61
    1682:	de b7       	in	r29, 0x3e	; 62
    1684:	27 97       	sbiw	r28, 0x07	; 7
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	f8 94       	cli
    168a:	de bf       	out	0x3e, r29	; 62
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	cd bf       	out	0x3d, r28	; 61
    1690:	8a 83       	std	Y+2, r24	; 0x02
    1692:	6b 83       	std	Y+3, r22	; 0x03
    1694:	5d 83       	std	Y+5, r21	; 0x05
    1696:	4c 83       	std	Y+4, r20	; 0x04
		uint8_t u8_ErrorState = u8_DIO_OK;
    1698:	82 e0       	ldi	r24, 0x02	; 2
    169a:	89 83       	std	Y+1, r24	; 0x01
		if(u8_PinNum>=u8_DIO_PIN0 && u8_PinNum<=u8_DIO_PIN7)
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	88 30       	cpi	r24, 0x08	; 8
    16a0:	08 f0       	brcs	.+2      	; 0x16a4 <DIO_u8GetPinVal+0x28>
    16a2:	74 c0       	rjmp	.+232    	; 0x178c <DIO_u8GetPinVal+0x110>
		{
			switch(u8_PortNum)
    16a4:	8a 81       	ldd	r24, Y+2	; 0x02
    16a6:	28 2f       	mov	r18, r24
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	3f 83       	std	Y+7, r19	; 0x07
    16ac:	2e 83       	std	Y+6, r18	; 0x06
    16ae:	4e 81       	ldd	r20, Y+6	; 0x06
    16b0:	5f 81       	ldd	r21, Y+7	; 0x07
    16b2:	49 30       	cpi	r20, 0x09	; 9
    16b4:	51 05       	cpc	r21, r1
    16b6:	59 f1       	breq	.+86     	; 0x170e <DIO_u8GetPinVal+0x92>
    16b8:	8e 81       	ldd	r24, Y+6	; 0x06
    16ba:	9f 81       	ldd	r25, Y+7	; 0x07
    16bc:	8a 30       	cpi	r24, 0x0A	; 10
    16be:	91 05       	cpc	r25, r1
    16c0:	34 f4       	brge	.+12     	; 0x16ce <DIO_u8GetPinVal+0x52>
    16c2:	2e 81       	ldd	r18, Y+6	; 0x06
    16c4:	3f 81       	ldd	r19, Y+7	; 0x07
    16c6:	28 30       	cpi	r18, 0x08	; 8
    16c8:	31 05       	cpc	r19, r1
    16ca:	69 f0       	breq	.+26     	; 0x16e6 <DIO_u8GetPinVal+0x6a>
    16cc:	5c c0       	rjmp	.+184    	; 0x1786 <DIO_u8GetPinVal+0x10a>
    16ce:	4e 81       	ldd	r20, Y+6	; 0x06
    16d0:	5f 81       	ldd	r21, Y+7	; 0x07
    16d2:	4a 30       	cpi	r20, 0x0A	; 10
    16d4:	51 05       	cpc	r21, r1
    16d6:	79 f1       	breq	.+94     	; 0x1736 <DIO_u8GetPinVal+0xba>
    16d8:	8e 81       	ldd	r24, Y+6	; 0x06
    16da:	9f 81       	ldd	r25, Y+7	; 0x07
    16dc:	8b 30       	cpi	r24, 0x0B	; 11
    16de:	91 05       	cpc	r25, r1
    16e0:	09 f4       	brne	.+2      	; 0x16e4 <DIO_u8GetPinVal+0x68>
    16e2:	3d c0       	rjmp	.+122    	; 0x175e <DIO_u8GetPinVal+0xe2>
    16e4:	50 c0       	rjmp	.+160    	; 0x1786 <DIO_u8GetPinVal+0x10a>
			{
				case u8_DIO_PORTA: (*pu8_ReturnedPinVal) = GET_BIT(Ru8_PINA,u8_PinNum)  ; break ;
    16e6:	e9 e3       	ldi	r30, 0x39	; 57
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	28 2f       	mov	r18, r24
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	8b 81       	ldd	r24, Y+3	; 0x03
    16f2:	88 2f       	mov	r24, r24
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	a9 01       	movw	r20, r18
    16f8:	02 c0       	rjmp	.+4      	; 0x16fe <DIO_u8GetPinVal+0x82>
    16fa:	55 95       	asr	r21
    16fc:	47 95       	ror	r20
    16fe:	8a 95       	dec	r24
    1700:	e2 f7       	brpl	.-8      	; 0x16fa <DIO_u8GetPinVal+0x7e>
    1702:	ca 01       	movw	r24, r20
    1704:	81 70       	andi	r24, 0x01	; 1
    1706:	ec 81       	ldd	r30, Y+4	; 0x04
    1708:	fd 81       	ldd	r31, Y+5	; 0x05
    170a:	80 83       	st	Z, r24
    170c:	41 c0       	rjmp	.+130    	; 0x1790 <DIO_u8GetPinVal+0x114>
				case u8_DIO_PORTB: (*pu8_ReturnedPinVal) = GET_BIT(Ru8_PINB,u8_PinNum)  ; break ;
    170e:	e6 e3       	ldi	r30, 0x36	; 54
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	28 2f       	mov	r18, r24
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	8b 81       	ldd	r24, Y+3	; 0x03
    171a:	88 2f       	mov	r24, r24
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	a9 01       	movw	r20, r18
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <DIO_u8GetPinVal+0xaa>
    1722:	55 95       	asr	r21
    1724:	47 95       	ror	r20
    1726:	8a 95       	dec	r24
    1728:	e2 f7       	brpl	.-8      	; 0x1722 <DIO_u8GetPinVal+0xa6>
    172a:	ca 01       	movw	r24, r20
    172c:	81 70       	andi	r24, 0x01	; 1
    172e:	ec 81       	ldd	r30, Y+4	; 0x04
    1730:	fd 81       	ldd	r31, Y+5	; 0x05
    1732:	80 83       	st	Z, r24
    1734:	2d c0       	rjmp	.+90     	; 0x1790 <DIO_u8GetPinVal+0x114>
				case u8_DIO_PORTC: (*pu8_ReturnedPinVal) = GET_BIT(Ru8_PINC,u8_PinNum)  ; break ;
    1736:	e3 e3       	ldi	r30, 0x33	; 51
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	28 2f       	mov	r18, r24
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	88 2f       	mov	r24, r24
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	a9 01       	movw	r20, r18
    1748:	02 c0       	rjmp	.+4      	; 0x174e <DIO_u8GetPinVal+0xd2>
    174a:	55 95       	asr	r21
    174c:	47 95       	ror	r20
    174e:	8a 95       	dec	r24
    1750:	e2 f7       	brpl	.-8      	; 0x174a <DIO_u8GetPinVal+0xce>
    1752:	ca 01       	movw	r24, r20
    1754:	81 70       	andi	r24, 0x01	; 1
    1756:	ec 81       	ldd	r30, Y+4	; 0x04
    1758:	fd 81       	ldd	r31, Y+5	; 0x05
    175a:	80 83       	st	Z, r24
    175c:	19 c0       	rjmp	.+50     	; 0x1790 <DIO_u8GetPinVal+0x114>
				case u8_DIO_PORTD: (*pu8_ReturnedPinVal) = GET_BIT(Ru8_PIND,u8_PinNum)  ; break ;
    175e:	e0 e3       	ldi	r30, 0x30	; 48
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	28 2f       	mov	r18, r24
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	8b 81       	ldd	r24, Y+3	; 0x03
    176a:	88 2f       	mov	r24, r24
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	a9 01       	movw	r20, r18
    1770:	02 c0       	rjmp	.+4      	; 0x1776 <DIO_u8GetPinVal+0xfa>
    1772:	55 95       	asr	r21
    1774:	47 95       	ror	r20
    1776:	8a 95       	dec	r24
    1778:	e2 f7       	brpl	.-8      	; 0x1772 <DIO_u8GetPinVal+0xf6>
    177a:	ca 01       	movw	r24, r20
    177c:	81 70       	andi	r24, 0x01	; 1
    177e:	ec 81       	ldd	r30, Y+4	; 0x04
    1780:	fd 81       	ldd	r31, Y+5	; 0x05
    1782:	80 83       	st	Z, r24
    1784:	05 c0       	rjmp	.+10     	; 0x1790 <DIO_u8GetPinVal+0x114>
				default          : u8_ErrorState = u8_DIO_NOK; 							 break ; 
    1786:	83 e0       	ldi	r24, 0x03	; 3
    1788:	89 83       	std	Y+1, r24	; 0x01
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <DIO_u8GetPinVal+0x114>
			}
		}
		else 
		{
			u8_ErrorState = u8_DIO_NOK;
    178c:	83 e0       	ldi	r24, 0x03	; 3
    178e:	89 83       	std	Y+1, r24	; 0x01
		}
	return u8_ErrorState  ; 
    1790:	89 81       	ldd	r24, Y+1	; 0x01
}
    1792:	27 96       	adiw	r28, 0x07	; 7
    1794:	0f b6       	in	r0, 0x3f	; 63
    1796:	f8 94       	cli
    1798:	de bf       	out	0x3e, r29	; 62
    179a:	0f be       	out	0x3f, r0	; 63
    179c:	cd bf       	out	0x3d, r28	; 61
    179e:	cf 91       	pop	r28
    17a0:	df 91       	pop	r29
    17a2:	08 95       	ret

000017a4 <DIO_u8GetPortVal>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8GetPortVal(uint8_t u8_PortNum,uint8_t* pu8_ReturnedPortVal)           
{
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	00 d0       	rcall	.+0      	; 0x17aa <DIO_u8GetPortVal+0x6>
    17aa:	00 d0       	rcall	.+0      	; 0x17ac <DIO_u8GetPortVal+0x8>
    17ac:	00 d0       	rcall	.+0      	; 0x17ae <DIO_u8GetPortVal+0xa>
    17ae:	cd b7       	in	r28, 0x3d	; 61
    17b0:	de b7       	in	r29, 0x3e	; 62
    17b2:	8a 83       	std	Y+2, r24	; 0x02
    17b4:	7c 83       	std	Y+4, r23	; 0x04
    17b6:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8_ErrorState = u8_DIO_OK;
    17b8:	82 e0       	ldi	r24, 0x02	; 2
    17ba:	89 83       	std	Y+1, r24	; 0x01

	switch(u8_PortNum)
    17bc:	8a 81       	ldd	r24, Y+2	; 0x02
    17be:	28 2f       	mov	r18, r24
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	3e 83       	std	Y+6, r19	; 0x06
    17c4:	2d 83       	std	Y+5, r18	; 0x05
    17c6:	8d 81       	ldd	r24, Y+5	; 0x05
    17c8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ca:	89 30       	cpi	r24, 0x09	; 9
    17cc:	91 05       	cpc	r25, r1
    17ce:	e9 f0       	breq	.+58     	; 0x180a <DIO_u8GetPortVal+0x66>
    17d0:	2d 81       	ldd	r18, Y+5	; 0x05
    17d2:	3e 81       	ldd	r19, Y+6	; 0x06
    17d4:	2a 30       	cpi	r18, 0x0A	; 10
    17d6:	31 05       	cpc	r19, r1
    17d8:	34 f4       	brge	.+12     	; 0x17e6 <DIO_u8GetPortVal+0x42>
    17da:	8d 81       	ldd	r24, Y+5	; 0x05
    17dc:	9e 81       	ldd	r25, Y+6	; 0x06
    17de:	88 30       	cpi	r24, 0x08	; 8
    17e0:	91 05       	cpc	r25, r1
    17e2:	61 f0       	breq	.+24     	; 0x17fc <DIO_u8GetPortVal+0x58>
    17e4:	27 c0       	rjmp	.+78     	; 0x1834 <DIO_u8GetPortVal+0x90>
    17e6:	2d 81       	ldd	r18, Y+5	; 0x05
    17e8:	3e 81       	ldd	r19, Y+6	; 0x06
    17ea:	2a 30       	cpi	r18, 0x0A	; 10
    17ec:	31 05       	cpc	r19, r1
    17ee:	a1 f0       	breq	.+40     	; 0x1818 <DIO_u8GetPortVal+0x74>
    17f0:	8d 81       	ldd	r24, Y+5	; 0x05
    17f2:	9e 81       	ldd	r25, Y+6	; 0x06
    17f4:	8b 30       	cpi	r24, 0x0B	; 11
    17f6:	91 05       	cpc	r25, r1
    17f8:	b1 f0       	breq	.+44     	; 0x1826 <DIO_u8GetPortVal+0x82>
    17fa:	1c c0       	rjmp	.+56     	; 0x1834 <DIO_u8GetPortVal+0x90>
	{
		case u8_DIO_PORTA: (*pu8_ReturnedPortVal) = Ru8_PINA ;  break ;
    17fc:	e9 e3       	ldi	r30, 0x39	; 57
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	eb 81       	ldd	r30, Y+3	; 0x03
    1804:	fc 81       	ldd	r31, Y+4	; 0x04
    1806:	80 83       	st	Z, r24
    1808:	17 c0       	rjmp	.+46     	; 0x1838 <DIO_u8GetPortVal+0x94>
		case u8_DIO_PORTB: (*pu8_ReturnedPortVal) = Ru8_PINB ;  break ;
    180a:	e6 e3       	ldi	r30, 0x36	; 54
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	eb 81       	ldd	r30, Y+3	; 0x03
    1812:	fc 81       	ldd	r31, Y+4	; 0x04
    1814:	80 83       	st	Z, r24
    1816:	10 c0       	rjmp	.+32     	; 0x1838 <DIO_u8GetPortVal+0x94>
		case u8_DIO_PORTC: (*pu8_ReturnedPortVal) = Ru8_PINC ;  break ;
    1818:	e3 e3       	ldi	r30, 0x33	; 51
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	eb 81       	ldd	r30, Y+3	; 0x03
    1820:	fc 81       	ldd	r31, Y+4	; 0x04
    1822:	80 83       	st	Z, r24
    1824:	09 c0       	rjmp	.+18     	; 0x1838 <DIO_u8GetPortVal+0x94>
		case u8_DIO_PORTD: (*pu8_ReturnedPortVal) = Ru8_PIND ;  break ;
    1826:	e0 e3       	ldi	r30, 0x30	; 48
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	eb 81       	ldd	r30, Y+3	; 0x03
    182e:	fc 81       	ldd	r31, Y+4	; 0x04
    1830:	80 83       	st	Z, r24
    1832:	02 c0       	rjmp	.+4      	; 0x1838 <DIO_u8GetPortVal+0x94>
		default          :  u8_ErrorState = u8_DIO_NOK; 	    break ;
    1834:	83 e0       	ldi	r24, 0x03	; 3
    1836:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8_ErrorState  ; 
    1838:	89 81       	ldd	r24, Y+1	; 0x01
}
    183a:	26 96       	adiw	r28, 0x06	; 6
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	f8 94       	cli
    1840:	de bf       	out	0x3e, r29	; 62
    1842:	0f be       	out	0x3f, r0	; 63
    1844:	cd bf       	out	0x3d, r28	; 61
    1846:	cf 91       	pop	r28
    1848:	df 91       	pop	r29
    184a:	08 95       	ret

0000184c <DIO_u8TogPinVal>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8TogPinVal(uint8_t u8_PortNum,uint8_t u8_PinNum)           
{
    184c:	df 93       	push	r29
    184e:	cf 93       	push	r28
    1850:	00 d0       	rcall	.+0      	; 0x1852 <DIO_u8TogPinVal+0x6>
    1852:	00 d0       	rcall	.+0      	; 0x1854 <DIO_u8TogPinVal+0x8>
    1854:	0f 92       	push	r0
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
    185a:	8a 83       	std	Y+2, r24	; 0x02
    185c:	6b 83       	std	Y+3, r22	; 0x03
		uint8_t u8_ErrorState = u8_DIO_OK;
    185e:	82 e0       	ldi	r24, 0x02	; 2
    1860:	89 83       	std	Y+1, r24	; 0x01
		if(u8_PinNum>=u8_DIO_PIN0 && u8_PinNum<=u8_DIO_PIN7)
    1862:	8b 81       	ldd	r24, Y+3	; 0x03
    1864:	88 30       	cpi	r24, 0x08	; 8
    1866:	08 f0       	brcs	.+2      	; 0x186a <DIO_u8TogPinVal+0x1e>
    1868:	73 c0       	rjmp	.+230    	; 0x1950 <DIO_u8TogPinVal+0x104>
		{
			switch(u8_PortNum)
    186a:	8a 81       	ldd	r24, Y+2	; 0x02
    186c:	28 2f       	mov	r18, r24
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	3d 83       	std	Y+5, r19	; 0x05
    1872:	2c 83       	std	Y+4, r18	; 0x04
    1874:	8c 81       	ldd	r24, Y+4	; 0x04
    1876:	9d 81       	ldd	r25, Y+5	; 0x05
    1878:	89 30       	cpi	r24, 0x09	; 9
    187a:	91 05       	cpc	r25, r1
    187c:	51 f1       	breq	.+84     	; 0x18d2 <DIO_u8TogPinVal+0x86>
    187e:	2c 81       	ldd	r18, Y+4	; 0x04
    1880:	3d 81       	ldd	r19, Y+5	; 0x05
    1882:	2a 30       	cpi	r18, 0x0A	; 10
    1884:	31 05       	cpc	r19, r1
    1886:	34 f4       	brge	.+12     	; 0x1894 <DIO_u8TogPinVal+0x48>
    1888:	8c 81       	ldd	r24, Y+4	; 0x04
    188a:	9d 81       	ldd	r25, Y+5	; 0x05
    188c:	88 30       	cpi	r24, 0x08	; 8
    188e:	91 05       	cpc	r25, r1
    1890:	61 f0       	breq	.+24     	; 0x18aa <DIO_u8TogPinVal+0x5e>
    1892:	5b c0       	rjmp	.+182    	; 0x194a <DIO_u8TogPinVal+0xfe>
    1894:	2c 81       	ldd	r18, Y+4	; 0x04
    1896:	3d 81       	ldd	r19, Y+5	; 0x05
    1898:	2a 30       	cpi	r18, 0x0A	; 10
    189a:	31 05       	cpc	r19, r1
    189c:	71 f1       	breq	.+92     	; 0x18fa <DIO_u8TogPinVal+0xae>
    189e:	8c 81       	ldd	r24, Y+4	; 0x04
    18a0:	9d 81       	ldd	r25, Y+5	; 0x05
    18a2:	8b 30       	cpi	r24, 0x0B	; 11
    18a4:	91 05       	cpc	r25, r1
    18a6:	e9 f1       	breq	.+122    	; 0x1922 <DIO_u8TogPinVal+0xd6>
    18a8:	50 c0       	rjmp	.+160    	; 0x194a <DIO_u8TogPinVal+0xfe>
			{
				case u8_DIO_PORTA: TOG_BIT(Ru8_PORTA,u8_PinNum) ;  break ;
    18aa:	ab e3       	ldi	r26, 0x3B	; 59
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	eb e3       	ldi	r30, 0x3B	; 59
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	48 2f       	mov	r20, r24
    18b6:	8b 81       	ldd	r24, Y+3	; 0x03
    18b8:	28 2f       	mov	r18, r24
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	02 2e       	mov	r0, r18
    18c2:	02 c0       	rjmp	.+4      	; 0x18c8 <DIO_u8TogPinVal+0x7c>
    18c4:	88 0f       	add	r24, r24
    18c6:	99 1f       	adc	r25, r25
    18c8:	0a 94       	dec	r0
    18ca:	e2 f7       	brpl	.-8      	; 0x18c4 <DIO_u8TogPinVal+0x78>
    18cc:	84 27       	eor	r24, r20
    18ce:	8c 93       	st	X, r24
    18d0:	41 c0       	rjmp	.+130    	; 0x1954 <DIO_u8TogPinVal+0x108>
				case u8_DIO_PORTB: TOG_BIT(Ru8_PORTB,u8_PinNum) ;  break ;
    18d2:	a8 e3       	ldi	r26, 0x38	; 56
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	e8 e3       	ldi	r30, 0x38	; 56
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	48 2f       	mov	r20, r24
    18de:	8b 81       	ldd	r24, Y+3	; 0x03
    18e0:	28 2f       	mov	r18, r24
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	02 2e       	mov	r0, r18
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <DIO_u8TogPinVal+0xa4>
    18ec:	88 0f       	add	r24, r24
    18ee:	99 1f       	adc	r25, r25
    18f0:	0a 94       	dec	r0
    18f2:	e2 f7       	brpl	.-8      	; 0x18ec <DIO_u8TogPinVal+0xa0>
    18f4:	84 27       	eor	r24, r20
    18f6:	8c 93       	st	X, r24
    18f8:	2d c0       	rjmp	.+90     	; 0x1954 <DIO_u8TogPinVal+0x108>
				case u8_DIO_PORTC: TOG_BIT(Ru8_PORTC,u8_PinNum) ;  break ;
    18fa:	a5 e3       	ldi	r26, 0x35	; 53
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	e5 e3       	ldi	r30, 0x35	; 53
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	48 2f       	mov	r20, r24
    1906:	8b 81       	ldd	r24, Y+3	; 0x03
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	02 2e       	mov	r0, r18
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <DIO_u8TogPinVal+0xcc>
    1914:	88 0f       	add	r24, r24
    1916:	99 1f       	adc	r25, r25
    1918:	0a 94       	dec	r0
    191a:	e2 f7       	brpl	.-8      	; 0x1914 <DIO_u8TogPinVal+0xc8>
    191c:	84 27       	eor	r24, r20
    191e:	8c 93       	st	X, r24
    1920:	19 c0       	rjmp	.+50     	; 0x1954 <DIO_u8TogPinVal+0x108>
				case u8_DIO_PORTD: TOG_BIT(Ru8_PORTD,u8_PinNum) ;  break ;
    1922:	a2 e3       	ldi	r26, 0x32	; 50
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	e2 e3       	ldi	r30, 0x32	; 50
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	48 2f       	mov	r20, r24
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	28 2f       	mov	r18, r24
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	02 2e       	mov	r0, r18
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <DIO_u8TogPinVal+0xf4>
    193c:	88 0f       	add	r24, r24
    193e:	99 1f       	adc	r25, r25
    1940:	0a 94       	dec	r0
    1942:	e2 f7       	brpl	.-8      	; 0x193c <DIO_u8TogPinVal+0xf0>
    1944:	84 27       	eor	r24, r20
    1946:	8c 93       	st	X, r24
    1948:	05 c0       	rjmp	.+10     	; 0x1954 <DIO_u8TogPinVal+0x108>
				default          :  u8_ErrorState = u8_DIO_NOK;   break ; 
    194a:	83 e0       	ldi	r24, 0x03	; 3
    194c:	89 83       	std	Y+1, r24	; 0x01
    194e:	02 c0       	rjmp	.+4      	; 0x1954 <DIO_u8TogPinVal+0x108>
			}
		}
		else 
		{
			u8_ErrorState = u8_DIO_NOK;
    1950:	83 e0       	ldi	r24, 0x03	; 3
    1952:	89 83       	std	Y+1, r24	; 0x01
		}
	return u8_ErrorState  ; 
    1954:	89 81       	ldd	r24, Y+1	; 0x01
}
    1956:	0f 90       	pop	r0
    1958:	0f 90       	pop	r0
    195a:	0f 90       	pop	r0
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	cf 91       	pop	r28
    1962:	df 91       	pop	r29
    1964:	08 95       	ret

00001966 <DIO_voidDisablePullUps>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void DIO_voidDisablePullUps(void)   
{
    1966:	df 93       	push	r29
    1968:	cf 93       	push	r28
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(Ru8_SFIOR,u8_PUD) ;
    196e:	a0 e5       	ldi	r26, 0x50	; 80
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	e0 e5       	ldi	r30, 0x50	; 80
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	84 60       	ori	r24, 0x04	; 4
    197a:	8c 93       	st	X, r24
}
    197c:	cf 91       	pop	r28
    197e:	df 91       	pop	r29
    1980:	08 95       	ret

00001982 <DIO_voidEnablePullUps>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void DIO_voidEnablePullUps(void)  
{
    1982:	df 93       	push	r29
    1984:	cf 93       	push	r28
    1986:	cd b7       	in	r28, 0x3d	; 61
    1988:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(Ru8_SFIOR,u8_PUD) ;
    198a:	a0 e5       	ldi	r26, 0x50	; 80
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	e0 e5       	ldi	r30, 0x50	; 80
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	8b 7f       	andi	r24, 0xFB	; 251
    1996:	8c 93       	st	X, r24
}
    1998:	cf 91       	pop	r28
    199a:	df 91       	pop	r29
    199c:	08 95       	ret

0000199e <main>:
#include "MCAL/DIO/dio_interface.h"
//#include <string.h>

#define bit7 			7
int main(void )
{
    199e:	df 93       	push	r29
    19a0:	cf 93       	push	r28
    19a2:	cd b7       	in	r28, 0x3d	; 61
    19a4:	de b7       	in	r29, 0x3e	; 62
    19a6:	6f 97       	sbiw	r28, 0x1f	; 31
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	f8 94       	cli
    19ac:	de bf       	out	0x3e, r29	; 62
    19ae:	0f be       	out	0x3f, r0	; 63
    19b0:	cd bf       	out	0x3d, r28	; 61
	USART_voidInit()  ;
    19b2:	0e 94 49 00 	call	0x92	; 0x92 <USART_voidInit>
	SET_BIT(Ru8_SREG , bit7); // set global interrupt
    19b6:	af e5       	ldi	r26, 0x5F	; 95
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	ef e5       	ldi	r30, 0x5F	; 95
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	80 68       	ori	r24, 0x80	; 128
    19c2:	8c 93       	st	X, r24

	uint8_t pu8_Packet[30] ;
	uint8_t u8_dataState =  u8_USART_DATA_SENT;
    19c4:	83 e8       	ldi	r24, 0x83	; 131
    19c6:	89 83       	std	Y+1, r24	; 0x01
	u8_dataState = USART_u8ReceiveStr(pu8_Packet,30,'\r') ;
    19c8:	ce 01       	movw	r24, r28
    19ca:	02 96       	adiw	r24, 0x02	; 2
    19cc:	6e e1       	ldi	r22, 0x1E	; 30
    19ce:	4d e0       	ldi	r20, 0x0D	; 13
    19d0:	0e 94 8a 01 	call	0x314	; 0x314 <USART_u8ReceiveStr>
    19d4:	89 83       	std	Y+1, r24	; 0x01
	u8_dataState = USART_u8TransStr(pu8_Packet) ;
    19d6:	ce 01       	movw	r24, r28
    19d8:	02 96       	adiw	r24, 0x02	; 2
    19da:	0e 94 52 01 	call	0x2a4	; 0x2a4 <USART_u8TransStr>
    19de:	89 83       	std	Y+1, r24	; 0x01
    19e0:	ff cf       	rjmp	.-2      	; 0x19e0 <main+0x42>

000019e2 <_exit>:
    19e2:	f8 94       	cli

000019e4 <__stop_program>:
    19e4:	ff cf       	rjmp	.-2      	; 0x19e4 <__stop_program>
