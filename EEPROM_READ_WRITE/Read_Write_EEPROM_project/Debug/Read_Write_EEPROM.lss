
Read_Write_EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007e  00800060  000023b4  00002448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  008000de  008000de  000024c6  2**0
                  ALLOC
  3 .stab         000031f8  00000000  00000000  000024c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012be  00000000  00000000  000056c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__vector_10>
      2c:	0c 94 90 04 	jmp	0x920	; 0x920 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 eb       	ldi	r30, 0xB4	; 180
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3d       	cpi	r26, 0xDE	; 222
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae ed       	ldi	r26, 0xDE	; 222
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3e       	cpi	r26, 0xEA	; 234
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 96 10 	call	0x212c	; 0x212c <main>
      8a:	0c 94 d8 11 	jmp	0x23b0	; 0x23b0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <USART_voidInit>:

extern uint8_t gu8_FinishIntWaitFlag ;  


void USART_voidInit(void) 
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	TIMERS_voidInit();
      9a:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <TIMERS_voidInit>
	CLR_BIT(Ru8_UCSRA,u8_USART_UDRE);
      9e:	ab e2       	ldi	r26, 0x2B	; 43
      a0:	b0 e0       	ldi	r27, 0x00	; 0
      a2:	eb e2       	ldi	r30, 0x2B	; 43
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	8f 7d       	andi	r24, 0xDF	; 223
      aa:	8c 93       	st	X, r24
	CLR_BIT(Ru8_UCSRA,u8_USART_FE);
      ac:	ab e2       	ldi	r26, 0x2B	; 43
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	eb e2       	ldi	r30, 0x2B	; 43
      b2:	f0 e0       	ldi	r31, 0x00	; 0
      b4:	80 81       	ld	r24, Z
      b6:	8f 7e       	andi	r24, 0xEF	; 239
      b8:	8c 93       	st	X, r24
	CLR_BIT(Ru8_UCSRA,u8_USART_DOR);
      ba:	ab e2       	ldi	r26, 0x2B	; 43
      bc:	b0 e0       	ldi	r27, 0x00	; 0
      be:	eb e2       	ldi	r30, 0x2B	; 43
      c0:	f0 e0       	ldi	r31, 0x00	; 0
      c2:	80 81       	ld	r24, Z
      c4:	87 7f       	andi	r24, 0xF7	; 247
      c6:	8c 93       	st	X, r24
	CLR_BIT(Ru8_UCSRA,u8_USART_PE);
      c8:	ab e2       	ldi	r26, 0x2B	; 43
      ca:	b0 e0       	ldi	r27, 0x00	; 0
      cc:	eb e2       	ldi	r30, 0x2B	; 43
      ce:	f0 e0       	ldi	r31, 0x00	; 0
      d0:	80 81       	ld	r24, Z
      d2:	8b 7f       	andi	r24, 0xFB	; 251
      d4:	8c 93       	st	X, r24

	//U2X is disabled 
	CLR_BIT(Ru8_UCSRA,u8_USART_U2X);
      d6:	ab e2       	ldi	r26, 0x2B	; 43
      d8:	b0 e0       	ldi	r27, 0x00	; 0
      da:	eb e2       	ldi	r30, 0x2B	; 43
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	80 81       	ld	r24, Z
      e0:	8d 7f       	andi	r24, 0xFD	; 253
      e2:	8c 93       	st	X, r24
	//multiprocessor (Master-Slave) disabled
	CLR_BIT(Ru8_UCSRA,u8_USART_MPCM);
      e4:	ab e2       	ldi	r26, 0x2B	; 43
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	eb e2       	ldi	r30, 0x2B	; 43
      ea:	f0 e0       	ldi	r31, 0x00	; 0
      ec:	80 81       	ld	r24, Z
      ee:	8e 7f       	andi	r24, 0xFE	; 254
      f0:	8c 93       	st	X, r24
	

    DIO_u8SetPinDir(u8_USART_PORT,u8_USART_RX_PIN,u8_DIO_INPUT_PIN);
      f2:	8b e0       	ldi	r24, 0x0B	; 11
      f4:	60 e0       	ldi	r22, 0x00	; 0
      f6:	40 e0       	ldi	r20, 0x00	; 0
      f8:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(u8_USART_PORT,u8_USART_TX_PIN,u8_DIO_OUTPUT_PIN);
      fc:	8b e0       	ldi	r24, 0x0B	; 11
      fe:	61 e0       	ldi	r22, 0x01	; 1
     100:	41 e0       	ldi	r20, 0x01	; 1
     102:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <DIO_u8SetPinDir>
	
	//DIO_u8SetPinVal(u8_USART_PORT,u8_USART_RX_PIN,u8_DIO_PIN_HIGH);
	DIO_u8SetPinVal(u8_USART_PORT,u8_USART_TX_PIN,u8_DIO_PIN_HIGH);
     106:	8b e0       	ldi	r24, 0x0B	; 11
     108:	61 e0       	ldi	r22, 0x01	; 1
     10a:	41 e0       	ldi	r20, 0x01	; 1
     10c:	0e 94 5f 0a 	call	0x14be	; 0x14be <DIO_u8SetPinVal>
	
	#if u8_USART_RX_COMP_INT_STATE==u8_USART_ENABLE
		SET_BIT(Ru8_UCSRB,u8_USART_RXCIE) ; 
	#elif u8_USART_RX_COMP_INT_STATE==u8_USART_DISABLE
		CLR_BIT(Ru8_UCSRB,u8_USART_RXCIE) ; 
     110:	aa e2       	ldi	r26, 0x2A	; 42
     112:	b0 e0       	ldi	r27, 0x00	; 0
     114:	ea e2       	ldi	r30, 0x2A	; 42
     116:	f0 e0       	ldi	r31, 0x00	; 0
     118:	80 81       	ld	r24, Z
     11a:	8f 77       	andi	r24, 0x7F	; 127
     11c:	8c 93       	st	X, r24
	
	
	#if u8_USART_TX_COMP_INT_STATE==u8_USART_ENABLE
		SET_BIT(Ru8_UCSRB,u8_USART_TXCIE) ; 
	#elif u8_USART_TX_COMP_INT_STATE==u8_USART_DISABLE
		CLR_BIT(Ru8_UCSRB,u8_USART_TXCIE) ; 
     11e:	aa e2       	ldi	r26, 0x2A	; 42
     120:	b0 e0       	ldi	r27, 0x00	; 0
     122:	ea e2       	ldi	r30, 0x2A	; 42
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	80 81       	ld	r24, Z
     128:	8f 7b       	andi	r24, 0xBF	; 191
     12a:	8c 93       	st	X, r24
	
	
	#if u8_USART_DATA_REG_EMPTY_INT_STATE==u8_USART_ENABLE
		SET_BIT(Ru8_UCSRB,u8_USART_UDRIE) ; 
	#elif u8_USART_DATA_REG_EMPTY_INT_STATE== u8_USART_DISABLE
		CLR_BIT(Ru8_UCSRB,u8_USART_UDRIE) ; 
     12c:	aa e2       	ldi	r26, 0x2A	; 42
     12e:	b0 e0       	ldi	r27, 0x00	; 0
     130:	ea e2       	ldi	r30, 0x2A	; 42
     132:	f0 e0       	ldi	r31, 0x00	; 0
     134:	80 81       	ld	r24, Z
     136:	8f 7d       	andi	r24, 0xDF	; 223
     138:	8c 93       	st	X, r24
		#error "Pre-build config error in set Data Reg Empty int state"
	#endif
	
	
	#if u8_USART_TRANS_STATE==u8_USART_ENABLE 
		SET_BIT(Ru8_UCSRB,u8_USART_TXEN) ; 
     13a:	aa e2       	ldi	r26, 0x2A	; 42
     13c:	b0 e0       	ldi	r27, 0x00	; 0
     13e:	ea e2       	ldi	r30, 0x2A	; 42
     140:	f0 e0       	ldi	r31, 0x00	; 0
     142:	80 81       	ld	r24, Z
     144:	88 60       	ori	r24, 0x08	; 8
     146:	8c 93       	st	X, r24
	#endif
	
	
	
	#if u8_USART_RECEIVE_STATE==u8_USART_ENABLE
		SET_BIT(Ru8_UCSRB,u8_USART_RXEN) ; 
     148:	aa e2       	ldi	r26, 0x2A	; 42
     14a:	b0 e0       	ldi	r27, 0x00	; 0
     14c:	ea e2       	ldi	r30, 0x2A	; 42
     14e:	f0 e0       	ldi	r31, 0x00	; 0
     150:	80 81       	ld	r24, Z
     152:	80 61       	ori	r24, 0x10	; 16
     154:	8c 93       	st	X, r24
		#else 
			#error "Pre-build config error in set Parity Config"
		#endif
	#elif u8_USART_USEFULL_DATA_IN_FRAME==u8_USART_8BITS_TO_TRANS
		#if u8_USART_PARITY_CONFIG==u8_USART_PARITY_DISABLE
			Ru8_UBRRH_UCSRC = ((u8_USART_SET<<u8_USART_URSEL)
     156:	e0 e4       	ldi	r30, 0x40	; 64
     158:	f0 e0       	ldi	r31, 0x00	; 0
     15a:	86 e8       	ldi	r24, 0x86	; 134
     15c:	80 83       	st	Z, r24
							  |(u8_USART_SET<<u8_USART_UCSZ1) |(u8_USART_SET<<u8_USART_UCSZ0)) ; 
			CLR_BIT(Ru8_UCSRB,u8_USART_UCSZ2) ; 
     15e:	aa e2       	ldi	r26, 0x2A	; 42
     160:	b0 e0       	ldi	r27, 0x00	; 0
     162:	ea e2       	ldi	r30, 0x2A	; 42
     164:	f0 e0       	ldi	r31, 0x00	; 0
     166:	80 81       	ld	r24, Z
     168:	8b 7f       	andi	r24, 0xFB	; 251
     16a:	8c 93       	st	X, r24
	#else 
		#error "Pre-build config error in set Trans usefull data size "
	#endif 
	
		
	Ru8_UBRRL = u8_USART_BAUD_RATE_9600;
     16c:	e9 e2       	ldi	r30, 0x29	; 41
     16e:	f0 e0       	ldi	r31, 0x00	; 0
     170:	83 e3       	ldi	r24, 0x33	; 51
     172:	80 83       	st	Z, r24

}
     174:	cf 91       	pop	r28
     176:	df 91       	pop	r29
     178:	08 95       	ret

0000017a <USART_u8TransData>:

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//function that transmit data sent in argument to another usart device
uint8_t USART_u8TransData(uint8_t u8_DataSent)
{
     17a:	df 93       	push	r29
     17c:	cf 93       	push	r28
     17e:	00 d0       	rcall	.+0      	; 0x180 <USART_u8TransData+0x6>
     180:	cd b7       	in	r28, 0x3d	; 61
     182:	de b7       	in	r29, 0x3e	; 62
     184:	8a 83       	std	Y+2, r24	; 0x02
	//the state of the data if sent of not
	uint8_t u8_DataState = u8_USART_DATA_NOT_SENT ;
     186:	82 e8       	ldi	r24, 0x82	; 130
     188:	89 83       	std	Y+1, r24	; 0x01
	//make timer0 compare on match interrupt enable to config the time out
	TIMERS_u8IntModesEn(u8_TIMER0_COMPARE_ON_MATCH) ;
     18a:	82 e1       	ldi	r24, 0x12	; 18
     18c:	0e 94 87 03 	call	0x70e	; 0x70e <TIMERS_u8IntModesEn>
	//config the interrupt time as the user want
	TIMER0_u8InterruptWait(u8_MAX_WAIT_IN_MS) ;
     190:	60 ee       	ldi	r22, 0xE0	; 224
     192:	7e e2       	ldi	r23, 0x2E	; 46
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	0e 94 0b 07 	call	0xe16	; 0xe16 <TIMER0_u8InterruptWait>
     19c:	1a c0       	rjmp	.+52     	; 0x1d2 <USART_u8TransData+0x58>
	//time out pulling to make sure if the function reached this time, return to main
	while(gu8_FinishIntWaitFlag!=u8_FINISH_INTERRUPT_WAITING)
	{
		//check if the transmit reg is empty or not and, if so,send the wanted data
		if(GET_BIT(Ru8_UCSRA,u8_USART_UDRE)==u8_USART_DATA_REG_EMPTY)
     19e:	eb e2       	ldi	r30, 0x2B	; 43
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
     1a2:	80 81       	ld	r24, Z
     1a4:	82 95       	swap	r24
     1a6:	86 95       	lsr	r24
     1a8:	87 70       	andi	r24, 0x07	; 7
     1aa:	88 2f       	mov	r24, r24
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	81 70       	andi	r24, 0x01	; 1
     1b0:	90 70       	andi	r25, 0x00	; 0
     1b2:	88 23       	and	r24, r24
     1b4:	71 f0       	breq	.+28     	; 0x1d2 <USART_u8TransData+0x58>
		{
			Ru8_UDR = u8_DataSent ;
     1b6:	ec e2       	ldi	r30, 0x2C	; 44
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	8a 81       	ldd	r24, Y+2	; 0x02
     1bc:	80 83       	st	Z, r24
			SET_BIT(Ru8_UCSRA,u8_USART_TXC) ;
     1be:	ab e2       	ldi	r26, 0x2B	; 43
     1c0:	b0 e0       	ldi	r27, 0x00	; 0
     1c2:	eb e2       	ldi	r30, 0x2B	; 43
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
     1c6:	80 81       	ld	r24, Z
     1c8:	80 64       	ori	r24, 0x40	; 64
     1ca:	8c 93       	st	X, r24
			u8_DataState = u8_USART_DATA_SENT ;
     1cc:	83 e8       	ldi	r24, 0x83	; 131
     1ce:	89 83       	std	Y+1, r24	; 0x01
     1d0:	04 c0       	rjmp	.+8      	; 0x1da <USART_u8TransData+0x60>
	//make timer0 compare on match interrupt enable to config the time out
	TIMERS_u8IntModesEn(u8_TIMER0_COMPARE_ON_MATCH) ;
	//config the interrupt time as the user want
	TIMER0_u8InterruptWait(u8_MAX_WAIT_IN_MS) ;
	//time out pulling to make sure if the function reached this time, return to main
	while(gu8_FinishIntWaitFlag!=u8_FINISH_INTERRUPT_WAITING)
     1d2:	80 91 dc 00 	lds	r24, 0x00DC
     1d6:	86 31       	cpi	r24, 0x16	; 22
     1d8:	11 f7       	brne	.-60     	; 0x19e <USART_u8TransData+0x24>
			break ;
		}

	}
	//disable the interrupt
	TIMERS_u8IntModesDis(u8_TIMER0_COMPARE_ON_MATCH) ;
     1da:	82 e1       	ldi	r24, 0x12	; 18
     1dc:	0e 94 c7 03 	call	0x78e	; 0x78e <TIMERS_u8IntModesDis>
	//return the received data
	return  u8_DataState ; 
     1e0:	89 81       	ldd	r24, Y+1	; 0x01
}
     1e2:	0f 90       	pop	r0
     1e4:	0f 90       	pop	r0
     1e6:	cf 91       	pop	r28
     1e8:	df 91       	pop	r29
     1ea:	08 95       	ret

000001ec <USART_u8ReceiveData>:

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//receive data from another usart device
uint8_t USART_u8ReceiveData(uint8_t* pu8_DataReceive)
{
     1ec:	df 93       	push	r29
     1ee:	cf 93       	push	r28
     1f0:	00 d0       	rcall	.+0      	; 0x1f2 <USART_u8ReceiveData+0x6>
     1f2:	00 d0       	rcall	.+0      	; 0x1f4 <USART_u8ReceiveData+0x8>
     1f4:	cd b7       	in	r28, 0x3d	; 61
     1f6:	de b7       	in	r29, 0x3e	; 62
     1f8:	9b 83       	std	Y+3, r25	; 0x03
     1fa:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_ReturnReciveState = u8_USART_NOT_RECEIVED ;   
     1fc:	8f e8       	ldi	r24, 0x8F	; 143
     1fe:	89 83       	std	Y+1, r24	; 0x01
	if(pu8_DataReceive!=NULL_POINTER)
     200:	8a 81       	ldd	r24, Y+2	; 0x02
     202:	9b 81       	ldd	r25, Y+3	; 0x03
     204:	00 97       	sbiw	r24, 0x00	; 0
     206:	09 f4       	brne	.+2      	; 0x20a <USART_u8ReceiveData+0x1e>
     208:	43 c0       	rjmp	.+134    	; 0x290 <USART_u8ReceiveData+0xa4>
	{
		//config timer to enable interrupt and config time out for receiving
		TIMERS_u8IntModesEn(u8_TIMER0_COMPARE_ON_MATCH) ;
     20a:	82 e1       	ldi	r24, 0x12	; 18
     20c:	0e 94 87 03 	call	0x70e	; 0x70e <TIMERS_u8IntModesEn>
		TIMER0_u8InterruptWait(u8_MAX_WAIT_IN_MS) ;
     210:	60 ee       	ldi	r22, 0xE0	; 224
     212:	7e e2       	ldi	r23, 0x2E	; 46
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	0e 94 0b 07 	call	0xe16	; 0xe16 <TIMER0_u8InterruptWait>
     21c:	31 c0       	rjmp	.+98     	; 0x280 <USART_u8ReceiveData+0x94>
		while(gu8_FinishIntWaitFlag!=u8_FINISH_INTERRUPT_WAITING)
		{
			// when the REG receive data , the flag will set, so we will check the data received and return the state of the data
			if(GET_BIT(Ru8_UCSRA,u8_USART_RXC)==u8_USART_FLAG_SET)
     21e:	eb e2       	ldi	r30, 0x2B	; 43
     220:	f0 e0       	ldi	r31, 0x00	; 0
     222:	80 81       	ld	r24, Z
     224:	88 1f       	adc	r24, r24
     226:	88 27       	eor	r24, r24
     228:	88 1f       	adc	r24, r24
     22a:	81 30       	cpi	r24, 0x01	; 1
     22c:	49 f5       	brne	.+82     	; 0x280 <USART_u8ReceiveData+0x94>
			{
				if(GET_BIT(Ru8_UCSRA,u8_USART_FE)==u8_USART_FLAG_SET)
     22e:	eb e2       	ldi	r30, 0x2B	; 43
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	80 81       	ld	r24, Z
     234:	82 95       	swap	r24
     236:	8f 70       	andi	r24, 0x0F	; 15
     238:	88 2f       	mov	r24, r24
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	81 70       	andi	r24, 0x01	; 1
     23e:	90 70       	andi	r25, 0x00	; 0
     240:	88 23       	and	r24, r24
     242:	19 f0       	breq	.+6      	; 0x24a <USART_u8ReceiveData+0x5e>
				{
					u8_ReturnReciveState = u8_USART_FRAME_ERROR ; 
     244:	8d e8       	ldi	r24, 0x8D	; 141
     246:	89 83       	std	Y+1, r24	; 0x01
     248:	14 c0       	rjmp	.+40     	; 0x272 <USART_u8ReceiveData+0x86>
				}
				else if((GET_BIT(Ru8_UCSRA,u8_USART_DOR)==u8_USART_FLAG_SET))
     24a:	eb e2       	ldi	r30, 0x2B	; 43
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	80 81       	ld	r24, Z
     250:	86 95       	lsr	r24
     252:	86 95       	lsr	r24
     254:	86 95       	lsr	r24
     256:	88 2f       	mov	r24, r24
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	81 70       	andi	r24, 0x01	; 1
     25c:	90 70       	andi	r25, 0x00	; 0
     25e:	88 23       	and	r24, r24
     260:	19 f0       	breq	.+6      	; 0x268 <USART_u8ReceiveData+0x7c>
				{
					u8_ReturnReciveState = u8_USART_DATA_OVER_RUN ; 
     262:	8c e8       	ldi	r24, 0x8C	; 140
     264:	89 83       	std	Y+1, r24	; 0x01
     266:	05 c0       	rjmp	.+10     	; 0x272 <USART_u8ReceiveData+0x86>
				}
				else if((GET_BIT(Ru8_UCSRA,u8_USART_PE)==u8_USART_FLAG_SET) && (u8_USART_PARITY_CONFIG != u8_USART_PARITY_DISABLE))
     268:	eb e2       	ldi	r30, 0x2B	; 43
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
				{
					u8_ReturnReciveState = u8_USART_PARITY_ERROR ; 
				}
				else 
				{
					u8_ReturnReciveState = u8_USART_RECEIVED_CORRECT ; 
     26e:	81 e9       	ldi	r24, 0x91	; 145
     270:	89 83       	std	Y+1, r24	; 0x01
				}
				//return the data received
				*pu8_DataReceive = Ru8_UDR ;
     272:	ec e2       	ldi	r30, 0x2C	; 44
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	80 81       	ld	r24, Z
     278:	ea 81       	ldd	r30, Y+2	; 0x02
     27a:	fb 81       	ldd	r31, Y+3	; 0x03
     27c:	80 83       	st	Z, r24
     27e:	04 c0       	rjmp	.+8      	; 0x288 <USART_u8ReceiveData+0x9c>
	if(pu8_DataReceive!=NULL_POINTER)
	{
		//config timer to enable interrupt and config time out for receiving
		TIMERS_u8IntModesEn(u8_TIMER0_COMPARE_ON_MATCH) ;
		TIMER0_u8InterruptWait(u8_MAX_WAIT_IN_MS) ;
		while(gu8_FinishIntWaitFlag!=u8_FINISH_INTERRUPT_WAITING)
     280:	80 91 dc 00 	lds	r24, 0x00DC
     284:	86 31       	cpi	r24, 0x16	; 22
     286:	59 f6       	brne	.-106    	; 0x21e <USART_u8ReceiveData+0x32>
				//return the data received
				*pu8_DataReceive = Ru8_UDR ;
				break ;
			}
		}
		TIMERS_u8IntModesDis(u8_TIMER0_COMPARE_ON_MATCH) ;
     288:	82 e1       	ldi	r24, 0x12	; 18
     28a:	0e 94 c7 03 	call	0x78e	; 0x78e <TIMERS_u8IntModesDis>
     28e:	02 c0       	rjmp	.+4      	; 0x294 <USART_u8ReceiveData+0xa8>
	}
	else
	{
		u8_ReturnReciveState = u8_USART_RECEIVED_NULL_PTR_ARG ;  
     290:	80 e9       	ldi	r24, 0x90	; 144
     292:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_ReturnReciveState ;
     294:	89 81       	ldd	r24, Y+1	; 0x01
}
     296:	0f 90       	pop	r0
     298:	0f 90       	pop	r0
     29a:	0f 90       	pop	r0
     29c:	0f 90       	pop	r0
     29e:	cf 91       	pop	r28
     2a0:	df 91       	pop	r29
     2a2:	08 95       	ret

000002a4 <USART_u8TransStr>:

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//function the use USART_u8TransData function to transmit string
uint8_t USART_u8TransStr(uint8_t* pu8_StrSent)
{
     2a4:	df 93       	push	r29
     2a6:	cf 93       	push	r28
     2a8:	00 d0       	rcall	.+0      	; 0x2aa <USART_u8TransStr+0x6>
     2aa:	00 d0       	rcall	.+0      	; 0x2ac <USART_u8TransStr+0x8>
     2ac:	cd b7       	in	r28, 0x3d	; 61
     2ae:	de b7       	in	r29, 0x3e	; 62
     2b0:	9c 83       	std	Y+4, r25	; 0x04
     2b2:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8_ReturnTransState = u8_USART_DATA_SENT , u8_indexArr = u8_INTIAL_COUNTER_VAL;
     2b4:	83 e8       	ldi	r24, 0x83	; 131
     2b6:	8a 83       	std	Y+2, r24	; 0x02
     2b8:	19 82       	std	Y+1, r1	; 0x01

	if(pu8_StrSent != NULL_POINTER)
     2ba:	8b 81       	ldd	r24, Y+3	; 0x03
     2bc:	9c 81       	ldd	r25, Y+4	; 0x04
     2be:	00 97       	sbiw	r24, 0x00	; 0
     2c0:	f9 f0       	breq	.+62     	; 0x300 <USART_u8TransStr+0x5c>
     2c2:	0f c0       	rjmp	.+30     	; 0x2e2 <USART_u8TransStr+0x3e>
	{
		while(pu8_StrSent[u8_indexArr] !=NULL_CHAR && u8_ReturnTransState == u8_USART_DATA_SENT)
		{
			u8_ReturnTransState = USART_u8TransData(pu8_StrSent[u8_indexArr])  ;
     2c4:	89 81       	ldd	r24, Y+1	; 0x01
     2c6:	28 2f       	mov	r18, r24
     2c8:	30 e0       	ldi	r19, 0x00	; 0
     2ca:	8b 81       	ldd	r24, Y+3	; 0x03
     2cc:	9c 81       	ldd	r25, Y+4	; 0x04
     2ce:	fc 01       	movw	r30, r24
     2d0:	e2 0f       	add	r30, r18
     2d2:	f3 1f       	adc	r31, r19
     2d4:	80 81       	ld	r24, Z
     2d6:	0e 94 bd 00 	call	0x17a	; 0x17a <USART_u8TransData>
     2da:	8a 83       	std	Y+2, r24	; 0x02
			u8_indexArr++ ;
     2dc:	89 81       	ldd	r24, Y+1	; 0x01
     2de:	8f 5f       	subi	r24, 0xFF	; 255
     2e0:	89 83       	std	Y+1, r24	; 0x01
{
	uint8_t u8_ReturnTransState = u8_USART_DATA_SENT , u8_indexArr = u8_INTIAL_COUNTER_VAL;

	if(pu8_StrSent != NULL_POINTER)
	{
		while(pu8_StrSent[u8_indexArr] !=NULL_CHAR && u8_ReturnTransState == u8_USART_DATA_SENT)
     2e2:	89 81       	ldd	r24, Y+1	; 0x01
     2e4:	28 2f       	mov	r18, r24
     2e6:	30 e0       	ldi	r19, 0x00	; 0
     2e8:	8b 81       	ldd	r24, Y+3	; 0x03
     2ea:	9c 81       	ldd	r25, Y+4	; 0x04
     2ec:	fc 01       	movw	r30, r24
     2ee:	e2 0f       	add	r30, r18
     2f0:	f3 1f       	adc	r31, r19
     2f2:	80 81       	ld	r24, Z
     2f4:	88 23       	and	r24, r24
     2f6:	31 f0       	breq	.+12     	; 0x304 <USART_u8TransStr+0x60>
     2f8:	8a 81       	ldd	r24, Y+2	; 0x02
     2fa:	83 38       	cpi	r24, 0x83	; 131
     2fc:	19 f3       	breq	.-58     	; 0x2c4 <USART_u8TransStr+0x20>
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <USART_u8TransStr+0x60>
		}

	}
	else
	{
		u8_ReturnTransState = u8_USART_DATA_NOT_SENT ;
     300:	82 e8       	ldi	r24, 0x82	; 130
     302:	8a 83       	std	Y+2, r24	; 0x02
	}

	return  u8_ReturnTransState ;
     304:	8a 81       	ldd	r24, Y+2	; 0x02
}
     306:	0f 90       	pop	r0
     308:	0f 90       	pop	r0
     30a:	0f 90       	pop	r0
     30c:	0f 90       	pop	r0
     30e:	cf 91       	pop	r28
     310:	df 91       	pop	r29
     312:	08 95       	ret

00000314 <USART_u8ReceiveStr>:

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//function the use USART_u8ReceiveData function to receive string with fixed size and special char to terminate
uint8_t USART_u8ReceiveStr(uint8_t* pu8_StrReceive, uint8_t u8_strSize,uint8_t u8_terminator)
{
     314:	df 93       	push	r29
     316:	cf 93       	push	r28
     318:	00 d0       	rcall	.+0      	; 0x31a <USART_u8ReceiveStr+0x6>
     31a:	00 d0       	rcall	.+0      	; 0x31c <USART_u8ReceiveStr+0x8>
     31c:	00 d0       	rcall	.+0      	; 0x31e <USART_u8ReceiveStr+0xa>
     31e:	cd b7       	in	r28, 0x3d	; 61
     320:	de b7       	in	r29, 0x3e	; 62
     322:	9c 83       	std	Y+4, r25	; 0x04
     324:	8b 83       	std	Y+3, r24	; 0x03
     326:	6d 83       	std	Y+5, r22	; 0x05
     328:	4e 83       	std	Y+6, r20	; 0x06
	uint8_t u8_ReturnTransState = u8_USART_RECEIVED_CORRECT , u8_indexArr = u8_INTIAL_COUNTER_VAL;
     32a:	81 e9       	ldi	r24, 0x91	; 145
     32c:	8a 83       	std	Y+2, r24	; 0x02
     32e:	19 82       	std	Y+1, r1	; 0x01
	if(pu8_StrReceive != NULL_POINTER)
     330:	8b 81       	ldd	r24, Y+3	; 0x03
     332:	9c 81       	ldd	r25, Y+4	; 0x04
     334:	00 97       	sbiw	r24, 0x00	; 0
     336:	d1 f1       	breq	.+116    	; 0x3ac <USART_u8ReceiveStr+0x98>
	{
		do
		{
			if(u8_ReturnTransState==u8_USART_RECEIVED_CORRECT)
     338:	8a 81       	ldd	r24, Y+2	; 0x02
     33a:	81 39       	cpi	r24, 0x91	; 145
     33c:	e9 f4       	brne	.+58     	; 0x378 <USART_u8ReceiveStr+0x64>
			{
				u8_ReturnTransState = USART_u8ReceiveData(&(pu8_StrReceive[u8_indexArr]))  ;
     33e:	89 81       	ldd	r24, Y+1	; 0x01
     340:	28 2f       	mov	r18, r24
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	8b 81       	ldd	r24, Y+3	; 0x03
     346:	9c 81       	ldd	r25, Y+4	; 0x04
     348:	82 0f       	add	r24, r18
     34a:	93 1f       	adc	r25, r19
     34c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <USART_u8ReceiveData>
     350:	8a 83       	std	Y+2, r24	; 0x02
				u8_indexArr++ ;
     352:	89 81       	ldd	r24, Y+1	; 0x01
     354:	8f 5f       	subi	r24, 0xFF	; 255
     356:	89 83       	std	Y+1, r24	; 0x01
			else
			{
				u8_ReturnTransState = u8_USART_NOT_RECEIVED ;
 				break ;
			}
		}while(pu8_StrReceive[u8_indexArr-1] != u8_terminator && (u8_indexArr<u8_strSize-1)) ;
     358:	89 81       	ldd	r24, Y+1	; 0x01
     35a:	88 2f       	mov	r24, r24
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	9c 01       	movw	r18, r24
     360:	21 50       	subi	r18, 0x01	; 1
     362:	30 40       	sbci	r19, 0x00	; 0
     364:	8b 81       	ldd	r24, Y+3	; 0x03
     366:	9c 81       	ldd	r25, Y+4	; 0x04
     368:	fc 01       	movw	r30, r24
     36a:	e2 0f       	add	r30, r18
     36c:	f3 1f       	adc	r31, r19
     36e:	90 81       	ld	r25, Z
     370:	8e 81       	ldd	r24, Y+6	; 0x06
     372:	98 17       	cp	r25, r24
     374:	71 f0       	breq	.+28     	; 0x392 <USART_u8ReceiveStr+0x7e>
     376:	03 c0       	rjmp	.+6      	; 0x37e <USART_u8ReceiveStr+0x6a>
				u8_ReturnTransState = USART_u8ReceiveData(&(pu8_StrReceive[u8_indexArr]))  ;
				u8_indexArr++ ;
			}
			else
			{
				u8_ReturnTransState = u8_USART_NOT_RECEIVED ;
     378:	8f e8       	ldi	r24, 0x8F	; 143
     37a:	8a 83       	std	Y+2, r24	; 0x02
     37c:	0a c0       	rjmp	.+20     	; 0x392 <USART_u8ReceiveStr+0x7e>
 				break ;
			}
		}while(pu8_StrReceive[u8_indexArr-1] != u8_terminator && (u8_indexArr<u8_strSize-1)) ;
     37e:	89 81       	ldd	r24, Y+1	; 0x01
     380:	28 2f       	mov	r18, r24
     382:	30 e0       	ldi	r19, 0x00	; 0
     384:	8d 81       	ldd	r24, Y+5	; 0x05
     386:	88 2f       	mov	r24, r24
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	01 97       	sbiw	r24, 0x01	; 1
     38c:	28 17       	cp	r18, r24
     38e:	39 07       	cpc	r19, r25
     390:	9c f2       	brlt	.-90     	; 0x338 <USART_u8ReceiveStr+0x24>

		pu8_StrReceive[u8_indexArr-1] = NULL_CHAR ;
     392:	89 81       	ldd	r24, Y+1	; 0x01
     394:	88 2f       	mov	r24, r24
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	9c 01       	movw	r18, r24
     39a:	21 50       	subi	r18, 0x01	; 1
     39c:	30 40       	sbci	r19, 0x00	; 0
     39e:	8b 81       	ldd	r24, Y+3	; 0x03
     3a0:	9c 81       	ldd	r25, Y+4	; 0x04
     3a2:	fc 01       	movw	r30, r24
     3a4:	e2 0f       	add	r30, r18
     3a6:	f3 1f       	adc	r31, r19
     3a8:	10 82       	st	Z, r1
     3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <USART_u8ReceiveStr+0x9c>
	}
	else
	{
		u8_ReturnTransState = u8_USART_RECEIVED_NULL_PTR_ARG ;
     3ac:	80 e9       	ldi	r24, 0x90	; 144
     3ae:	8a 83       	std	Y+2, r24	; 0x02
	}
	return u8_ReturnTransState ;
     3b0:	8a 81       	ldd	r24, Y+2	; 0x02
}
     3b2:	26 96       	adiw	r28, 0x06	; 6
     3b4:	0f b6       	in	r0, 0x3f	; 63
     3b6:	f8 94       	cli
     3b8:	de bf       	out	0x3e, r29	; 62
     3ba:	0f be       	out	0x3f, r0	; 63
     3bc:	cd bf       	out	0x3d, r28	; 61
     3be:	cf 91       	pop	r28
     3c0:	df 91       	pop	r29
     3c2:	08 95       	ret

000003c4 <TIMERS_voidInit>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////


void TIMERS_voidInit(void)
{
     3c4:	df 93       	push	r29
     3c6:	cf 93       	push	r28
     3c8:	cd b7       	in	r28, 0x3d	; 61
     3ca:	de b7       	in	r29, 0x3e	; 62
	#if	u8_TIMER0_MODE_CONFIG==u8_NORMAL_MODE
		CLR_BIT(Ru8_TCCR0,u8_WGM00_BIT) ;
     3cc:	a3 e5       	ldi	r26, 0x53	; 83
     3ce:	b0 e0       	ldi	r27, 0x00	; 0
     3d0:	e3 e5       	ldi	r30, 0x53	; 83
     3d2:	f0 e0       	ldi	r31, 0x00	; 0
     3d4:	80 81       	ld	r24, Z
     3d6:	8f 7b       	andi	r24, 0xBF	; 191
     3d8:	8c 93       	st	X, r24
		CLR_BIT(Ru8_TCCR0,u8_WGM01_BIT) ;
     3da:	a3 e5       	ldi	r26, 0x53	; 83
     3dc:	b0 e0       	ldi	r27, 0x00	; 0
     3de:	e3 e5       	ldi	r30, 0x53	; 83
     3e0:	f0 e0       	ldi	r31, 0x00	; 0
     3e2:	80 81       	ld	r24, Z
     3e4:	87 7f       	andi	r24, 0xF7	; 247
     3e6:	8c 93       	st	X, r24
		CLR_BIT(Ru8_TCCR0,u8_FOC0_BIT) ;
     3e8:	a3 e5       	ldi	r26, 0x53	; 83
     3ea:	b0 e0       	ldi	r27, 0x00	; 0
     3ec:	e3 e5       	ldi	r30, 0x53	; 83
     3ee:	f0 e0       	ldi	r31, 0x00	; 0
     3f0:	80 81       	ld	r24, Z
     3f2:	8f 77       	andi	r24, 0x7F	; 127
     3f4:	8c 93       	st	X, r24
	
	
	
	#if	u8_TIMER0_MODE_CONFIG==u8_NORMAL_MODE||u8_TIMER0_MODE_CONFIG==u8_CTC_MODE
		#if u8_TIMER0_COMP_MATCH_NON_PWM_CONFIG==u8_OC0_DISCONNECTED
			CLR_BIT(Ru8_TCCR0,u8_COM00_BIT) ;
     3f6:	a3 e5       	ldi	r26, 0x53	; 83
     3f8:	b0 e0       	ldi	r27, 0x00	; 0
     3fa:	e3 e5       	ldi	r30, 0x53	; 83
     3fc:	f0 e0       	ldi	r31, 0x00	; 0
     3fe:	80 81       	ld	r24, Z
     400:	8f 7d       	andi	r24, 0xDF	; 223
     402:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_COM01_BIT) ;
     404:	a3 e5       	ldi	r26, 0x53	; 83
     406:	b0 e0       	ldi	r27, 0x00	; 0
     408:	e3 e5       	ldi	r30, 0x53	; 83
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	80 81       	ld	r24, Z
     40e:	8f 7e       	andi	r24, 0xEF	; 239
     410:	8c 93       	st	X, r24
	#elif u8_TIMER0_1_CLOCK_SELECT==u8_INTERNAL_CLK_NO_PRE
		CLR_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
		CLR_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
		SET_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
	#elif u8_TIMER0_1_CLOCK_SELECT==u8_INTERNAL_CLK_PRE_8
		CLR_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     412:	a3 e5       	ldi	r26, 0x53	; 83
     414:	b0 e0       	ldi	r27, 0x00	; 0
     416:	e3 e5       	ldi	r30, 0x53	; 83
     418:	f0 e0       	ldi	r31, 0x00	; 0
     41a:	80 81       	ld	r24, Z
     41c:	8b 7f       	andi	r24, 0xFB	; 251
     41e:	8c 93       	st	X, r24
		SET_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     420:	a3 e5       	ldi	r26, 0x53	; 83
     422:	b0 e0       	ldi	r27, 0x00	; 0
     424:	e3 e5       	ldi	r30, 0x53	; 83
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	80 81       	ld	r24, Z
     42a:	82 60       	ori	r24, 0x02	; 2
     42c:	8c 93       	st	X, r24
		CLR_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     42e:	a3 e5       	ldi	r26, 0x53	; 83
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	e3 e5       	ldi	r30, 0x53	; 83
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	80 81       	ld	r24, Z
     438:	8e 7f       	andi	r24, 0xFE	; 254
     43a:	8c 93       	st	X, r24
		SET_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
	#else
		#error "wrong clock select config"
	#endif

}
     43c:	cf 91       	pop	r28
     43e:	df 91       	pop	r29
     440:	08 95       	ret

00000442 <TIMER0_u8StartWithclockAndPrescalerSelect>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMER0_u8StartWithclockAndPrescalerSelect(uint8_t u8_preScallerVal) 
{
     442:	df 93       	push	r29
     444:	cf 93       	push	r28
     446:	00 d0       	rcall	.+0      	; 0x448 <TIMER0_u8StartWithclockAndPrescalerSelect+0x6>
     448:	00 d0       	rcall	.+0      	; 0x44a <TIMER0_u8StartWithclockAndPrescalerSelect+0x8>
     44a:	cd b7       	in	r28, 0x3d	; 61
     44c:	de b7       	in	r29, 0x3e	; 62
     44e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_ErrorFlag = u8_OK ; 
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_preScallerVal)
     454:	8a 81       	ldd	r24, Y+2	; 0x02
     456:	28 2f       	mov	r18, r24
     458:	30 e0       	ldi	r19, 0x00	; 0
     45a:	3c 83       	std	Y+4, r19	; 0x04
     45c:	2b 83       	std	Y+3, r18	; 0x03
     45e:	8b 81       	ldd	r24, Y+3	; 0x03
     460:	9c 81       	ldd	r25, Y+4	; 0x04
     462:	89 30       	cpi	r24, 0x09	; 9
     464:	91 05       	cpc	r25, r1
     466:	09 f4       	brne	.+2      	; 0x46a <TIMER0_u8StartWithclockAndPrescalerSelect+0x28>
     468:	6b c0       	rjmp	.+214    	; 0x540 <TIMER0_u8StartWithclockAndPrescalerSelect+0xfe>
     46a:	2b 81       	ldd	r18, Y+3	; 0x03
     46c:	3c 81       	ldd	r19, Y+4	; 0x04
     46e:	2a 30       	cpi	r18, 0x0A	; 10
     470:	31 05       	cpc	r19, r1
     472:	8c f4       	brge	.+34     	; 0x496 <TIMER0_u8StartWithclockAndPrescalerSelect+0x54>
     474:	8b 81       	ldd	r24, Y+3	; 0x03
     476:	9c 81       	ldd	r25, Y+4	; 0x04
     478:	87 30       	cpi	r24, 0x07	; 7
     47a:	91 05       	cpc	r25, r1
     47c:	a9 f1       	breq	.+106    	; 0x4e8 <TIMER0_u8StartWithclockAndPrescalerSelect+0xa6>
     47e:	2b 81       	ldd	r18, Y+3	; 0x03
     480:	3c 81       	ldd	r19, Y+4	; 0x04
     482:	28 30       	cpi	r18, 0x08	; 8
     484:	31 05       	cpc	r19, r1
     486:	0c f0       	brlt	.+2      	; 0x48a <TIMER0_u8StartWithclockAndPrescalerSelect+0x48>
     488:	45 c0       	rjmp	.+138    	; 0x514 <TIMER0_u8StartWithclockAndPrescalerSelect+0xd2>
     48a:	8b 81       	ldd	r24, Y+3	; 0x03
     48c:	9c 81       	ldd	r25, Y+4	; 0x04
     48e:	86 30       	cpi	r24, 0x06	; 6
     490:	91 05       	cpc	r25, r1
     492:	a1 f0       	breq	.+40     	; 0x4bc <TIMER0_u8StartWithclockAndPrescalerSelect+0x7a>
     494:	ad c0       	rjmp	.+346    	; 0x5f0 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1ae>
     496:	2b 81       	ldd	r18, Y+3	; 0x03
     498:	3c 81       	ldd	r19, Y+4	; 0x04
     49a:	2b 30       	cpi	r18, 0x0B	; 11
     49c:	31 05       	cpc	r19, r1
     49e:	09 f4       	brne	.+2      	; 0x4a2 <TIMER0_u8StartWithclockAndPrescalerSelect+0x60>
     4a0:	7b c0       	rjmp	.+246    	; 0x598 <TIMER0_u8StartWithclockAndPrescalerSelect+0x156>
     4a2:	8b 81       	ldd	r24, Y+3	; 0x03
     4a4:	9c 81       	ldd	r25, Y+4	; 0x04
     4a6:	8b 30       	cpi	r24, 0x0B	; 11
     4a8:	91 05       	cpc	r25, r1
     4aa:	0c f4       	brge	.+2      	; 0x4ae <TIMER0_u8StartWithclockAndPrescalerSelect+0x6c>
     4ac:	5f c0       	rjmp	.+190    	; 0x56c <TIMER0_u8StartWithclockAndPrescalerSelect+0x12a>
     4ae:	2b 81       	ldd	r18, Y+3	; 0x03
     4b0:	3c 81       	ldd	r19, Y+4	; 0x04
     4b2:	2c 30       	cpi	r18, 0x0C	; 12
     4b4:	31 05       	cpc	r19, r1
     4b6:	09 f4       	brne	.+2      	; 0x4ba <TIMER0_u8StartWithclockAndPrescalerSelect+0x78>
     4b8:	85 c0       	rjmp	.+266    	; 0x5c4 <TIMER0_u8StartWithclockAndPrescalerSelect+0x182>
     4ba:	9a c0       	rjmp	.+308    	; 0x5f0 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1ae>
	{
		case u8_INTERNAL_CLK_NO_PRE:
			CLR_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     4bc:	a3 e5       	ldi	r26, 0x53	; 83
     4be:	b0 e0       	ldi	r27, 0x00	; 0
     4c0:	e3 e5       	ldi	r30, 0x53	; 83
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	80 81       	ld	r24, Z
     4c6:	8b 7f       	andi	r24, 0xFB	; 251
     4c8:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     4ca:	a3 e5       	ldi	r26, 0x53	; 83
     4cc:	b0 e0       	ldi	r27, 0x00	; 0
     4ce:	e3 e5       	ldi	r30, 0x53	; 83
     4d0:	f0 e0       	ldi	r31, 0x00	; 0
     4d2:	80 81       	ld	r24, Z
     4d4:	8d 7f       	andi	r24, 0xFD	; 253
     4d6:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     4d8:	a3 e5       	ldi	r26, 0x53	; 83
     4da:	b0 e0       	ldi	r27, 0x00	; 0
     4dc:	e3 e5       	ldi	r30, 0x53	; 83
     4de:	f0 e0       	ldi	r31, 0x00	; 0
     4e0:	80 81       	ld	r24, Z
     4e2:	81 60       	ori	r24, 0x01	; 1
     4e4:	8c 93       	st	X, r24
     4e6:	85 c0       	rjmp	.+266    	; 0x5f2 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ; 
		case u8_INTERNAL_CLK_PRE_8:
			CLR_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     4e8:	a3 e5       	ldi	r26, 0x53	; 83
     4ea:	b0 e0       	ldi	r27, 0x00	; 0
     4ec:	e3 e5       	ldi	r30, 0x53	; 83
     4ee:	f0 e0       	ldi	r31, 0x00	; 0
     4f0:	80 81       	ld	r24, Z
     4f2:	8b 7f       	andi	r24, 0xFB	; 251
     4f4:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     4f6:	a3 e5       	ldi	r26, 0x53	; 83
     4f8:	b0 e0       	ldi	r27, 0x00	; 0
     4fa:	e3 e5       	ldi	r30, 0x53	; 83
     4fc:	f0 e0       	ldi	r31, 0x00	; 0
     4fe:	80 81       	ld	r24, Z
     500:	82 60       	ori	r24, 0x02	; 2
     502:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     504:	a3 e5       	ldi	r26, 0x53	; 83
     506:	b0 e0       	ldi	r27, 0x00	; 0
     508:	e3 e5       	ldi	r30, 0x53	; 83
     50a:	f0 e0       	ldi	r31, 0x00	; 0
     50c:	80 81       	ld	r24, Z
     50e:	8e 7f       	andi	r24, 0xFE	; 254
     510:	8c 93       	st	X, r24
     512:	6f c0       	rjmp	.+222    	; 0x5f2 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ; 
		case u8_INTERNAL_CLK_PRE_64:
			CLR_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     514:	a3 e5       	ldi	r26, 0x53	; 83
     516:	b0 e0       	ldi	r27, 0x00	; 0
     518:	e3 e5       	ldi	r30, 0x53	; 83
     51a:	f0 e0       	ldi	r31, 0x00	; 0
     51c:	80 81       	ld	r24, Z
     51e:	8b 7f       	andi	r24, 0xFB	; 251
     520:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     522:	a3 e5       	ldi	r26, 0x53	; 83
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	e3 e5       	ldi	r30, 0x53	; 83
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	80 81       	ld	r24, Z
     52c:	82 60       	ori	r24, 0x02	; 2
     52e:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     530:	a3 e5       	ldi	r26, 0x53	; 83
     532:	b0 e0       	ldi	r27, 0x00	; 0
     534:	e3 e5       	ldi	r30, 0x53	; 83
     536:	f0 e0       	ldi	r31, 0x00	; 0
     538:	80 81       	ld	r24, Z
     53a:	81 60       	ori	r24, 0x01	; 1
     53c:	8c 93       	st	X, r24
     53e:	59 c0       	rjmp	.+178    	; 0x5f2 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ;
		case u8_INTERNAL_CLK_PRE_256:
			SET_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     540:	a3 e5       	ldi	r26, 0x53	; 83
     542:	b0 e0       	ldi	r27, 0x00	; 0
     544:	e3 e5       	ldi	r30, 0x53	; 83
     546:	f0 e0       	ldi	r31, 0x00	; 0
     548:	80 81       	ld	r24, Z
     54a:	84 60       	ori	r24, 0x04	; 4
     54c:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     54e:	a3 e5       	ldi	r26, 0x53	; 83
     550:	b0 e0       	ldi	r27, 0x00	; 0
     552:	e3 e5       	ldi	r30, 0x53	; 83
     554:	f0 e0       	ldi	r31, 0x00	; 0
     556:	80 81       	ld	r24, Z
     558:	8d 7f       	andi	r24, 0xFD	; 253
     55a:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     55c:	a3 e5       	ldi	r26, 0x53	; 83
     55e:	b0 e0       	ldi	r27, 0x00	; 0
     560:	e3 e5       	ldi	r30, 0x53	; 83
     562:	f0 e0       	ldi	r31, 0x00	; 0
     564:	80 81       	ld	r24, Z
     566:	8e 7f       	andi	r24, 0xFE	; 254
     568:	8c 93       	st	X, r24
     56a:	43 c0       	rjmp	.+134    	; 0x5f2 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ; 
		case u8_INTERNAL_CLK_PRE_1024:
			SET_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     56c:	a3 e5       	ldi	r26, 0x53	; 83
     56e:	b0 e0       	ldi	r27, 0x00	; 0
     570:	e3 e5       	ldi	r30, 0x53	; 83
     572:	f0 e0       	ldi	r31, 0x00	; 0
     574:	80 81       	ld	r24, Z
     576:	84 60       	ori	r24, 0x04	; 4
     578:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     57a:	a3 e5       	ldi	r26, 0x53	; 83
     57c:	b0 e0       	ldi	r27, 0x00	; 0
     57e:	e3 e5       	ldi	r30, 0x53	; 83
     580:	f0 e0       	ldi	r31, 0x00	; 0
     582:	80 81       	ld	r24, Z
     584:	8d 7f       	andi	r24, 0xFD	; 253
     586:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     588:	a3 e5       	ldi	r26, 0x53	; 83
     58a:	b0 e0       	ldi	r27, 0x00	; 0
     58c:	e3 e5       	ldi	r30, 0x53	; 83
     58e:	f0 e0       	ldi	r31, 0x00	; 0
     590:	80 81       	ld	r24, Z
     592:	81 60       	ori	r24, 0x01	; 1
     594:	8c 93       	st	X, r24
     596:	2d c0       	rjmp	.+90     	; 0x5f2 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ;
		case u8_EXTERNAL_CLK_FALLING : 
			SET_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     598:	a3 e5       	ldi	r26, 0x53	; 83
     59a:	b0 e0       	ldi	r27, 0x00	; 0
     59c:	e3 e5       	ldi	r30, 0x53	; 83
     59e:	f0 e0       	ldi	r31, 0x00	; 0
     5a0:	80 81       	ld	r24, Z
     5a2:	84 60       	ori	r24, 0x04	; 4
     5a4:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     5a6:	a3 e5       	ldi	r26, 0x53	; 83
     5a8:	b0 e0       	ldi	r27, 0x00	; 0
     5aa:	e3 e5       	ldi	r30, 0x53	; 83
     5ac:	f0 e0       	ldi	r31, 0x00	; 0
     5ae:	80 81       	ld	r24, Z
     5b0:	82 60       	ori	r24, 0x02	; 2
     5b2:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     5b4:	a3 e5       	ldi	r26, 0x53	; 83
     5b6:	b0 e0       	ldi	r27, 0x00	; 0
     5b8:	e3 e5       	ldi	r30, 0x53	; 83
     5ba:	f0 e0       	ldi	r31, 0x00	; 0
     5bc:	80 81       	ld	r24, Z
     5be:	8e 7f       	andi	r24, 0xFE	; 254
     5c0:	8c 93       	st	X, r24
     5c2:	17 c0       	rjmp	.+46     	; 0x5f2 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ;
		case u8_EXTERNAL_CLK_RISING:
			SET_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     5c4:	a3 e5       	ldi	r26, 0x53	; 83
     5c6:	b0 e0       	ldi	r27, 0x00	; 0
     5c8:	e3 e5       	ldi	r30, 0x53	; 83
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	80 81       	ld	r24, Z
     5ce:	84 60       	ori	r24, 0x04	; 4
     5d0:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     5d2:	a3 e5       	ldi	r26, 0x53	; 83
     5d4:	b0 e0       	ldi	r27, 0x00	; 0
     5d6:	e3 e5       	ldi	r30, 0x53	; 83
     5d8:	f0 e0       	ldi	r31, 0x00	; 0
     5da:	80 81       	ld	r24, Z
     5dc:	82 60       	ori	r24, 0x02	; 2
     5de:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     5e0:	a3 e5       	ldi	r26, 0x53	; 83
     5e2:	b0 e0       	ldi	r27, 0x00	; 0
     5e4:	e3 e5       	ldi	r30, 0x53	; 83
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	80 81       	ld	r24, Z
     5ea:	81 60       	ori	r24, 0x01	; 1
     5ec:	8c 93       	st	X, r24
     5ee:	01 c0       	rjmp	.+2      	; 0x5f2 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ; 
		
		default : u8_ErrorFlag = u8_NOK ; 
     5f0:	19 82       	std	Y+1, r1	; 0x01
		break ;
	}
	return u8_ErrorFlag ; 
     5f2:	89 81       	ldd	r24, Y+1	; 0x01
}
     5f4:	0f 90       	pop	r0
     5f6:	0f 90       	pop	r0
     5f8:	0f 90       	pop	r0
     5fa:	0f 90       	pop	r0
     5fc:	cf 91       	pop	r28
     5fe:	df 91       	pop	r29
     600:	08 95       	ret

00000602 <TIMER0_voidstop>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void TIMER0_voidstop(void)
{
     602:	df 93       	push	r29
     604:	cf 93       	push	r28
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     60a:	a3 e5       	ldi	r26, 0x53	; 83
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e3 e5       	ldi	r30, 0x53	; 83
     610:	f0 e0       	ldi	r31, 0x00	; 0
     612:	80 81       	ld	r24, Z
     614:	8b 7f       	andi	r24, 0xFB	; 251
     616:	8c 93       	st	X, r24
	CLR_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     618:	a3 e5       	ldi	r26, 0x53	; 83
     61a:	b0 e0       	ldi	r27, 0x00	; 0
     61c:	e3 e5       	ldi	r30, 0x53	; 83
     61e:	f0 e0       	ldi	r31, 0x00	; 0
     620:	80 81       	ld	r24, Z
     622:	8d 7f       	andi	r24, 0xFD	; 253
     624:	8c 93       	st	X, r24
	CLR_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     626:	a3 e5       	ldi	r26, 0x53	; 83
     628:	b0 e0       	ldi	r27, 0x00	; 0
     62a:	e3 e5       	ldi	r30, 0x53	; 83
     62c:	f0 e0       	ldi	r31, 0x00	; 0
     62e:	80 81       	ld	r24, Z
     630:	8e 7f       	andi	r24, 0xFE	; 254
     632:	8c 93       	st	X, r24
}
     634:	cf 91       	pop	r28
     636:	df 91       	pop	r29
     638:	08 95       	ret

0000063a <TIMERS_u8ClearIntFlag>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMERS_u8ClearIntFlag(uint8_t u8_wantedIntClearFlag)
{
     63a:	df 93       	push	r29
     63c:	cf 93       	push	r28
     63e:	00 d0       	rcall	.+0      	; 0x640 <TIMERS_u8ClearIntFlag+0x6>
     640:	00 d0       	rcall	.+0      	; 0x642 <TIMERS_u8ClearIntFlag+0x8>
     642:	cd b7       	in	r28, 0x3d	; 61
     644:	de b7       	in	r29, 0x3e	; 62
     646:	8a 83       	std	Y+2, r24	; 0x02
		uint8_t u8_ErrorFlag = u8_OK ; 
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_wantedIntClearFlag)
     64c:	8a 81       	ldd	r24, Y+2	; 0x02
     64e:	28 2f       	mov	r18, r24
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	3c 83       	std	Y+4, r19	; 0x04
     654:	2b 83       	std	Y+3, r18	; 0x03
     656:	8b 81       	ldd	r24, Y+3	; 0x03
     658:	9c 81       	ldd	r25, Y+4	; 0x04
     65a:	81 31       	cpi	r24, 0x11	; 17
     65c:	91 05       	cpc	r25, r1
     65e:	31 f0       	breq	.+12     	; 0x66c <TIMERS_u8ClearIntFlag+0x32>
     660:	2b 81       	ldd	r18, Y+3	; 0x03
     662:	3c 81       	ldd	r19, Y+4	; 0x04
     664:	22 31       	cpi	r18, 0x12	; 18
     666:	31 05       	cpc	r19, r1
     668:	49 f0       	breq	.+18     	; 0x67c <TIMERS_u8ClearIntFlag+0x42>
     66a:	10 c0       	rjmp	.+32     	; 0x68c <TIMERS_u8ClearIntFlag+0x52>
	{
		case u8_TIMER0_OVER_FLOW			: SET_BIT(Ru8_TIFR,u8_TOV0_BIT) ;
     66c:	a8 e5       	ldi	r26, 0x58	; 88
     66e:	b0 e0       	ldi	r27, 0x00	; 0
     670:	e8 e5       	ldi	r30, 0x58	; 88
     672:	f0 e0       	ldi	r31, 0x00	; 0
     674:	80 81       	ld	r24, Z
     676:	81 60       	ori	r24, 0x01	; 1
     678:	8c 93       	st	X, r24
     67a:	09 c0       	rjmp	.+18     	; 0x68e <TIMERS_u8ClearIntFlag+0x54>
											  break ;
		case u8_TIMER0_COMPARE_ON_MATCH		: SET_BIT(Ru8_TIFR,u8_OCF0_BIT) ;
     67c:	a8 e5       	ldi	r26, 0x58	; 88
     67e:	b0 e0       	ldi	r27, 0x00	; 0
     680:	e8 e5       	ldi	r30, 0x58	; 88
     682:	f0 e0       	ldi	r31, 0x00	; 0
     684:	80 81       	ld	r24, Z
     686:	82 60       	ori	r24, 0x02	; 2
     688:	8c 93       	st	X, r24
     68a:	01 c0       	rjmp	.+2      	; 0x68e <TIMERS_u8ClearIntFlag+0x54>
											  break ;
		default								: u8_ErrorFlag = u8_NOK ;
     68c:	19 82       	std	Y+1, r1	; 0x01
											  break ; 
	}
	return u8_ErrorFlag ; 
     68e:	89 81       	ldd	r24, Y+1	; 0x01
}
     690:	0f 90       	pop	r0
     692:	0f 90       	pop	r0
     694:	0f 90       	pop	r0
     696:	0f 90       	pop	r0
     698:	cf 91       	pop	r28
     69a:	df 91       	pop	r29
     69c:	08 95       	ret

0000069e <TIMERS_u8GetIntFlag>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMERS_u8GetIntFlag(uint8_t u8_wantedIntClearFlag,uint8_t* pu8_retturnIntFlag)
{
     69e:	df 93       	push	r29
     6a0:	cf 93       	push	r28
     6a2:	00 d0       	rcall	.+0      	; 0x6a4 <TIMERS_u8GetIntFlag+0x6>
     6a4:	00 d0       	rcall	.+0      	; 0x6a6 <TIMERS_u8GetIntFlag+0x8>
     6a6:	00 d0       	rcall	.+0      	; 0x6a8 <TIMERS_u8GetIntFlag+0xa>
     6a8:	cd b7       	in	r28, 0x3d	; 61
     6aa:	de b7       	in	r29, 0x3e	; 62
     6ac:	8a 83       	std	Y+2, r24	; 0x02
     6ae:	7c 83       	std	Y+4, r23	; 0x04
     6b0:	6b 83       	std	Y+3, r22	; 0x03
		uint8_t u8_ErrorFlag = u8_OK ; 
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_wantedIntClearFlag)
     6b6:	8a 81       	ldd	r24, Y+2	; 0x02
     6b8:	28 2f       	mov	r18, r24
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	3e 83       	std	Y+6, r19	; 0x06
     6be:	2d 83       	std	Y+5, r18	; 0x05
     6c0:	8d 81       	ldd	r24, Y+5	; 0x05
     6c2:	9e 81       	ldd	r25, Y+6	; 0x06
     6c4:	81 31       	cpi	r24, 0x11	; 17
     6c6:	91 05       	cpc	r25, r1
     6c8:	31 f0       	breq	.+12     	; 0x6d6 <TIMERS_u8GetIntFlag+0x38>
     6ca:	2d 81       	ldd	r18, Y+5	; 0x05
     6cc:	3e 81       	ldd	r19, Y+6	; 0x06
     6ce:	22 31       	cpi	r18, 0x12	; 18
     6d0:	31 05       	cpc	r19, r1
     6d2:	49 f0       	breq	.+18     	; 0x6e6 <TIMERS_u8GetIntFlag+0x48>
     6d4:	11 c0       	rjmp	.+34     	; 0x6f8 <TIMERS_u8GetIntFlag+0x5a>
	{
		case u8_TIMER0_OVER_FLOW			: (*pu8_retturnIntFlag) = GET_BIT(Ru8_TIFR,u8_TOV0_BIT) ;
     6d6:	e8 e5       	ldi	r30, 0x58	; 88
     6d8:	f0 e0       	ldi	r31, 0x00	; 0
     6da:	80 81       	ld	r24, Z
     6dc:	81 70       	andi	r24, 0x01	; 1
     6de:	eb 81       	ldd	r30, Y+3	; 0x03
     6e0:	fc 81       	ldd	r31, Y+4	; 0x04
     6e2:	80 83       	st	Z, r24
     6e4:	0a c0       	rjmp	.+20     	; 0x6fa <TIMERS_u8GetIntFlag+0x5c>
											  break ;
		case u8_TIMER0_COMPARE_ON_MATCH		: (*pu8_retturnIntFlag) = GET_BIT(Ru8_TIFR,u8_OCF0_BIT) ;
     6e6:	e8 e5       	ldi	r30, 0x58	; 88
     6e8:	f0 e0       	ldi	r31, 0x00	; 0
     6ea:	80 81       	ld	r24, Z
     6ec:	86 95       	lsr	r24
     6ee:	81 70       	andi	r24, 0x01	; 1
     6f0:	eb 81       	ldd	r30, Y+3	; 0x03
     6f2:	fc 81       	ldd	r31, Y+4	; 0x04
     6f4:	80 83       	st	Z, r24
     6f6:	01 c0       	rjmp	.+2      	; 0x6fa <TIMERS_u8GetIntFlag+0x5c>
											  break ;
		default								: u8_ErrorFlag = u8_NOK ;
     6f8:	19 82       	std	Y+1, r1	; 0x01
											  break ; 
	}
	return u8_ErrorFlag ; 
     6fa:	89 81       	ldd	r24, Y+1	; 0x01
}
     6fc:	26 96       	adiw	r28, 0x06	; 6
     6fe:	0f b6       	in	r0, 0x3f	; 63
     700:	f8 94       	cli
     702:	de bf       	out	0x3e, r29	; 62
     704:	0f be       	out	0x3f, r0	; 63
     706:	cd bf       	out	0x3d, r28	; 61
     708:	cf 91       	pop	r28
     70a:	df 91       	pop	r29
     70c:	08 95       	ret

0000070e <TIMERS_u8IntModesEn>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMERS_u8IntModesEn(uint8_t u8_wantedIntModeEn)
{
     70e:	df 93       	push	r29
     710:	cf 93       	push	r28
     712:	00 d0       	rcall	.+0      	; 0x714 <TIMERS_u8IntModesEn+0x6>
     714:	00 d0       	rcall	.+0      	; 0x716 <TIMERS_u8IntModesEn+0x8>
     716:	cd b7       	in	r28, 0x3d	; 61
     718:	de b7       	in	r29, 0x3e	; 62
     71a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_ErrorFlag = u8_OK ; 
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_wantedIntModeEn)
     720:	8a 81       	ldd	r24, Y+2	; 0x02
     722:	28 2f       	mov	r18, r24
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	3c 83       	std	Y+4, r19	; 0x04
     728:	2b 83       	std	Y+3, r18	; 0x03
     72a:	8b 81       	ldd	r24, Y+3	; 0x03
     72c:	9c 81       	ldd	r25, Y+4	; 0x04
     72e:	81 31       	cpi	r24, 0x11	; 17
     730:	91 05       	cpc	r25, r1
     732:	31 f0       	breq	.+12     	; 0x740 <TIMERS_u8IntModesEn+0x32>
     734:	2b 81       	ldd	r18, Y+3	; 0x03
     736:	3c 81       	ldd	r19, Y+4	; 0x04
     738:	22 31       	cpi	r18, 0x12	; 18
     73a:	31 05       	cpc	r19, r1
     73c:	81 f0       	breq	.+32     	; 0x75e <TIMERS_u8IntModesEn+0x50>
     73e:	1e c0       	rjmp	.+60     	; 0x77c <TIMERS_u8IntModesEn+0x6e>
	{
		case u8_TIMER0_OVER_FLOW			:  SET_BIT(Ru8_TIFR,u8_TOV0_BIT) ;
     740:	a8 e5       	ldi	r26, 0x58	; 88
     742:	b0 e0       	ldi	r27, 0x00	; 0
     744:	e8 e5       	ldi	r30, 0x58	; 88
     746:	f0 e0       	ldi	r31, 0x00	; 0
     748:	80 81       	ld	r24, Z
     74a:	81 60       	ori	r24, 0x01	; 1
     74c:	8c 93       	st	X, r24
											   SET_BIT(Ru8_TIMSK,u8_TOIE0_BIT);
     74e:	a9 e5       	ldi	r26, 0x59	; 89
     750:	b0 e0       	ldi	r27, 0x00	; 0
     752:	e9 e5       	ldi	r30, 0x59	; 89
     754:	f0 e0       	ldi	r31, 0x00	; 0
     756:	80 81       	ld	r24, Z
     758:	81 60       	ori	r24, 0x01	; 1
     75a:	8c 93       	st	X, r24
     75c:	10 c0       	rjmp	.+32     	; 0x77e <TIMERS_u8IntModesEn+0x70>
											   break ; 
		case u8_TIMER0_COMPARE_ON_MATCH		:  SET_BIT(Ru8_TIFR,u8_OCF0_BIT) ;
     75e:	a8 e5       	ldi	r26, 0x58	; 88
     760:	b0 e0       	ldi	r27, 0x00	; 0
     762:	e8 e5       	ldi	r30, 0x58	; 88
     764:	f0 e0       	ldi	r31, 0x00	; 0
     766:	80 81       	ld	r24, Z
     768:	82 60       	ori	r24, 0x02	; 2
     76a:	8c 93       	st	X, r24
											   SET_BIT(Ru8_TIMSK,u8_OCIE0_BIT);
     76c:	a9 e5       	ldi	r26, 0x59	; 89
     76e:	b0 e0       	ldi	r27, 0x00	; 0
     770:	e9 e5       	ldi	r30, 0x59	; 89
     772:	f0 e0       	ldi	r31, 0x00	; 0
     774:	80 81       	ld	r24, Z
     776:	82 60       	ori	r24, 0x02	; 2
     778:	8c 93       	st	X, r24
     77a:	01 c0       	rjmp	.+2      	; 0x77e <TIMERS_u8IntModesEn+0x70>
											   break ;
		default 							:  u8_ErrorFlag = u8_NOK ; 
     77c:	19 82       	std	Y+1, r1	; 0x01
											   break ; 
	}
	return u8_ErrorFlag ; 
     77e:	89 81       	ldd	r24, Y+1	; 0x01
}
     780:	0f 90       	pop	r0
     782:	0f 90       	pop	r0
     784:	0f 90       	pop	r0
     786:	0f 90       	pop	r0
     788:	cf 91       	pop	r28
     78a:	df 91       	pop	r29
     78c:	08 95       	ret

0000078e <TIMERS_u8IntModesDis>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMERS_u8IntModesDis(uint8_t u8_wantedIntModeDis)
{
     78e:	df 93       	push	r29
     790:	cf 93       	push	r28
     792:	00 d0       	rcall	.+0      	; 0x794 <TIMERS_u8IntModesDis+0x6>
     794:	00 d0       	rcall	.+0      	; 0x796 <TIMERS_u8IntModesDis+0x8>
     796:	cd b7       	in	r28, 0x3d	; 61
     798:	de b7       	in	r29, 0x3e	; 62
     79a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_ErrorFlag = u8_OK ; 
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_wantedIntModeDis)
     7a0:	8a 81       	ldd	r24, Y+2	; 0x02
     7a2:	28 2f       	mov	r18, r24
     7a4:	30 e0       	ldi	r19, 0x00	; 0
     7a6:	3c 83       	std	Y+4, r19	; 0x04
     7a8:	2b 83       	std	Y+3, r18	; 0x03
     7aa:	8b 81       	ldd	r24, Y+3	; 0x03
     7ac:	9c 81       	ldd	r25, Y+4	; 0x04
     7ae:	81 31       	cpi	r24, 0x11	; 17
     7b0:	91 05       	cpc	r25, r1
     7b2:	31 f0       	breq	.+12     	; 0x7c0 <TIMERS_u8IntModesDis+0x32>
     7b4:	2b 81       	ldd	r18, Y+3	; 0x03
     7b6:	3c 81       	ldd	r19, Y+4	; 0x04
     7b8:	22 31       	cpi	r18, 0x12	; 18
     7ba:	31 05       	cpc	r19, r1
     7bc:	49 f0       	breq	.+18     	; 0x7d0 <TIMERS_u8IntModesDis+0x42>
     7be:	10 c0       	rjmp	.+32     	; 0x7e0 <TIMERS_u8IntModesDis+0x52>
	{
		case u8_TIMER0_OVER_FLOW			:  CLR_BIT(Ru8_TIMSK,u8_TOIE0_BIT);
     7c0:	a9 e5       	ldi	r26, 0x59	; 89
     7c2:	b0 e0       	ldi	r27, 0x00	; 0
     7c4:	e9 e5       	ldi	r30, 0x59	; 89
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	80 81       	ld	r24, Z
     7ca:	8e 7f       	andi	r24, 0xFE	; 254
     7cc:	8c 93       	st	X, r24
     7ce:	09 c0       	rjmp	.+18     	; 0x7e2 <TIMERS_u8IntModesDis+0x54>
											   break ; 
		case u8_TIMER0_COMPARE_ON_MATCH		:  CLR_BIT(Ru8_TIMSK,u8_OCIE0_BIT);
     7d0:	a9 e5       	ldi	r26, 0x59	; 89
     7d2:	b0 e0       	ldi	r27, 0x00	; 0
     7d4:	e9 e5       	ldi	r30, 0x59	; 89
     7d6:	f0 e0       	ldi	r31, 0x00	; 0
     7d8:	80 81       	ld	r24, Z
     7da:	8d 7f       	andi	r24, 0xFD	; 253
     7dc:	8c 93       	st	X, r24
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <TIMERS_u8IntModesDis+0x54>
											   break ;
		default 							:  u8_ErrorFlag = u8_NOK ; 
     7e0:	19 82       	std	Y+1, r1	; 0x01
											   break ; 
	}
	return u8_ErrorFlag ; 
     7e2:	89 81       	ldd	r24, Y+1	; 0x01
}
     7e4:	0f 90       	pop	r0
     7e6:	0f 90       	pop	r0
     7e8:	0f 90       	pop	r0
     7ea:	0f 90       	pop	r0
     7ec:	cf 91       	pop	r28
     7ee:	df 91       	pop	r29
     7f0:	08 95       	ret

000007f2 <Timer0_u8setOverFlowRegTicksBeforeOV>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t Timer0_u8setOverFlowRegTicksBeforeOV(uint8_t u8_wantedTicksBeforeOV)
{
     7f2:	df 93       	push	r29
     7f4:	cf 93       	push	r28
     7f6:	00 d0       	rcall	.+0      	; 0x7f8 <Timer0_u8setOverFlowRegTicksBeforeOV+0x6>
     7f8:	0f 92       	push	r0
     7fa:	cd b7       	in	r28, 0x3d	; 61
     7fc:	de b7       	in	r29, 0x3e	; 62
     7fe:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8_ErrorFlag = u8_OK ; 
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_SetTimer0CounterReg ; 
	if(u8_wantedTicksBeforeOV<=u8_MAX_8BIT_REG_HOLD)
	{
		u8_SetTimer0CounterReg = u8_MAX_8BIT_REG_HOLD-u8_wantedTicksBeforeOV ; 
     804:	8b 81       	ldd	r24, Y+3	; 0x03
     806:	80 95       	com	r24
     808:	89 83       	std	Y+1, r24	; 0x01
		Ru8_TCNT0=u8_SetTimer0CounterReg ;
     80a:	e2 e5       	ldi	r30, 0x52	; 82
     80c:	f0 e0       	ldi	r31, 0x00	; 0
     80e:	89 81       	ldd	r24, Y+1	; 0x01
     810:	80 83       	st	Z, r24
	}
	else 
	{
		u8_ErrorFlag = u8_NOK ; 
	}
	return u8_ErrorFlag ; 
     812:	8a 81       	ldd	r24, Y+2	; 0x02
}
     814:	0f 90       	pop	r0
     816:	0f 90       	pop	r0
     818:	0f 90       	pop	r0
     81a:	cf 91       	pop	r28
     81c:	df 91       	pop	r29
     81e:	08 95       	ret

00000820 <Timer0_u8setCompareRegTicksBeforeOV>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t Timer0_u8setCompareRegTicksBeforeOV(uint8_t u8_wantedTicksToCompare)
{
     820:	df 93       	push	r29
     822:	cf 93       	push	r28
     824:	00 d0       	rcall	.+0      	; 0x826 <Timer0_u8setCompareRegTicksBeforeOV+0x6>
     826:	cd b7       	in	r28, 0x3d	; 61
     828:	de b7       	in	r29, 0x3e	; 62
     82a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_ErrorFlag = u8_OK ; 
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	89 83       	std	Y+1, r24	; 0x01
	if(u8_wantedTicksToCompare<=u8_MAX_8BIT_REG_HOLD)
	{
		Ru8_OCR0 = u8_wantedTicksToCompare ;
     830:	ec e5       	ldi	r30, 0x5C	; 92
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	8a 81       	ldd	r24, Y+2	; 0x02
     836:	80 83       	st	Z, r24
	}
	else 
	{
		u8_ErrorFlag = u8_NOK ; 
	}
	return u8_ErrorFlag ; 
     838:	89 81       	ldd	r24, Y+1	; 0x01
}
     83a:	0f 90       	pop	r0
     83c:	0f 90       	pop	r0
     83e:	cf 91       	pop	r28
     840:	df 91       	pop	r29
     842:	08 95       	ret

00000844 <TIMER0_u8setCallBack>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMER0_u8setCallBack(uint8_t u8_wantedISRModeToSet,void(*ISRFuncToSet)(void)) 
{
     844:	df 93       	push	r29
     846:	cf 93       	push	r28
     848:	00 d0       	rcall	.+0      	; 0x84a <TIMER0_u8setCallBack+0x6>
     84a:	00 d0       	rcall	.+0      	; 0x84c <TIMER0_u8setCallBack+0x8>
     84c:	00 d0       	rcall	.+0      	; 0x84e <TIMER0_u8setCallBack+0xa>
     84e:	cd b7       	in	r28, 0x3d	; 61
     850:	de b7       	in	r29, 0x3e	; 62
     852:	8a 83       	std	Y+2, r24	; 0x02
     854:	7c 83       	std	Y+4, r23	; 0x04
     856:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8_ErrorFlag = u8_OK ; 
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	89 83       	std	Y+1, r24	; 0x01
	if(ISRFuncToSet!=NULL_POINTER)
     85c:	8b 81       	ldd	r24, Y+3	; 0x03
     85e:	9c 81       	ldd	r25, Y+4	; 0x04
     860:	00 97       	sbiw	r24, 0x00	; 0
     862:	01 f1       	breq	.+64     	; 0x8a4 <__stack+0x45>
	{
		switch(u8_wantedISRModeToSet)
     864:	8a 81       	ldd	r24, Y+2	; 0x02
     866:	28 2f       	mov	r18, r24
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	3e 83       	std	Y+6, r19	; 0x06
     86c:	2d 83       	std	Y+5, r18	; 0x05
     86e:	8d 81       	ldd	r24, Y+5	; 0x05
     870:	9e 81       	ldd	r25, Y+6	; 0x06
     872:	81 31       	cpi	r24, 0x11	; 17
     874:	91 05       	cpc	r25, r1
     876:	31 f0       	breq	.+12     	; 0x884 <__stack+0x25>
     878:	2d 81       	ldd	r18, Y+5	; 0x05
     87a:	3e 81       	ldd	r19, Y+6	; 0x06
     87c:	22 31       	cpi	r18, 0x12	; 18
     87e:	31 05       	cpc	r19, r1
     880:	41 f0       	breq	.+16     	; 0x892 <__stack+0x33>
     882:	0e c0       	rjmp	.+28     	; 0x8a0 <__stack+0x41>
		{
			case u8_TIMER0_OVER_FLOW			:  Timer0OverFlowSetCallBackISR = ISRFuncToSet ; 
     884:	8b 81       	ldd	r24, Y+3	; 0x03
     886:	9c 81       	ldd	r25, Y+4	; 0x04
     888:	90 93 e1 00 	sts	0x00E1, r25
     88c:	80 93 e0 00 	sts	0x00E0, r24
     890:	0a c0       	rjmp	.+20     	; 0x8a6 <__stack+0x47>
												   break ; 
			case u8_TIMER0_COMPARE_ON_MATCH		:  Timer0CompareMatchSetCallBackISR = ISRFuncToSet ; 
     892:	8b 81       	ldd	r24, Y+3	; 0x03
     894:	9c 81       	ldd	r25, Y+4	; 0x04
     896:	90 93 df 00 	sts	0x00DF, r25
     89a:	80 93 de 00 	sts	0x00DE, r24
     89e:	03 c0       	rjmp	.+6      	; 0x8a6 <__stack+0x47>
											       break ;
			default 							:  u8_ErrorFlag = u8_NOK ; 
     8a0:	19 82       	std	Y+1, r1	; 0x01
     8a2:	01 c0       	rjmp	.+2      	; 0x8a6 <__stack+0x47>
											       break ; 
		}
	}
	else 
	{
		u8_ErrorFlag = u8_NOK ; 
     8a4:	19 82       	std	Y+1, r1	; 0x01
	}
	return u8_ErrorFlag ; 
     8a6:	89 81       	ldd	r24, Y+1	; 0x01
}
     8a8:	26 96       	adiw	r28, 0x06	; 6
     8aa:	0f b6       	in	r0, 0x3f	; 63
     8ac:	f8 94       	cli
     8ae:	de bf       	out	0x3e, r29	; 62
     8b0:	0f be       	out	0x3f, r0	; 63
     8b2:	cd bf       	out	0x3d, r28	; 61
     8b4:	cf 91       	pop	r28
     8b6:	df 91       	pop	r29
     8b8:	08 95       	ret

000008ba <__vector_10>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void __vector_10 (void)      __attribute__((signal));
void __vector_10 (void)
{
     8ba:	1f 92       	push	r1
     8bc:	0f 92       	push	r0
     8be:	0f b6       	in	r0, 0x3f	; 63
     8c0:	0f 92       	push	r0
     8c2:	11 24       	eor	r1, r1
     8c4:	2f 93       	push	r18
     8c6:	3f 93       	push	r19
     8c8:	4f 93       	push	r20
     8ca:	5f 93       	push	r21
     8cc:	6f 93       	push	r22
     8ce:	7f 93       	push	r23
     8d0:	8f 93       	push	r24
     8d2:	9f 93       	push	r25
     8d4:	af 93       	push	r26
     8d6:	bf 93       	push	r27
     8d8:	ef 93       	push	r30
     8da:	ff 93       	push	r31
     8dc:	df 93       	push	r29
     8de:	cf 93       	push	r28
     8e0:	cd b7       	in	r28, 0x3d	; 61
     8e2:	de b7       	in	r29, 0x3e	; 62
	if(Timer0CompareMatchSetCallBackISR!=NULL_POINTER)
     8e4:	80 91 de 00 	lds	r24, 0x00DE
     8e8:	90 91 df 00 	lds	r25, 0x00DF
     8ec:	00 97       	sbiw	r24, 0x00	; 0
     8ee:	29 f0       	breq	.+10     	; 0x8fa <__vector_10+0x40>
	{
		Timer0CompareMatchSetCallBackISR();
     8f0:	e0 91 de 00 	lds	r30, 0x00DE
     8f4:	f0 91 df 00 	lds	r31, 0x00DF
     8f8:	09 95       	icall
	}
	else 
	{
		//do nothing
	}
}
     8fa:	cf 91       	pop	r28
     8fc:	df 91       	pop	r29
     8fe:	ff 91       	pop	r31
     900:	ef 91       	pop	r30
     902:	bf 91       	pop	r27
     904:	af 91       	pop	r26
     906:	9f 91       	pop	r25
     908:	8f 91       	pop	r24
     90a:	7f 91       	pop	r23
     90c:	6f 91       	pop	r22
     90e:	5f 91       	pop	r21
     910:	4f 91       	pop	r20
     912:	3f 91       	pop	r19
     914:	2f 91       	pop	r18
     916:	0f 90       	pop	r0
     918:	0f be       	out	0x3f, r0	; 63
     91a:	0f 90       	pop	r0
     91c:	1f 90       	pop	r1
     91e:	18 95       	reti

00000920 <__vector_11>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void __vector_11 (void)      __attribute__((signal));
void __vector_11 (void)
{
     920:	1f 92       	push	r1
     922:	0f 92       	push	r0
     924:	0f b6       	in	r0, 0x3f	; 63
     926:	0f 92       	push	r0
     928:	11 24       	eor	r1, r1
     92a:	2f 93       	push	r18
     92c:	3f 93       	push	r19
     92e:	4f 93       	push	r20
     930:	5f 93       	push	r21
     932:	6f 93       	push	r22
     934:	7f 93       	push	r23
     936:	8f 93       	push	r24
     938:	9f 93       	push	r25
     93a:	af 93       	push	r26
     93c:	bf 93       	push	r27
     93e:	ef 93       	push	r30
     940:	ff 93       	push	r31
     942:	df 93       	push	r29
     944:	cf 93       	push	r28
     946:	cd b7       	in	r28, 0x3d	; 61
     948:	de b7       	in	r29, 0x3e	; 62
	if(Timer0OverFlowSetCallBackISR!=NULL_POINTER)
     94a:	80 91 e0 00 	lds	r24, 0x00E0
     94e:	90 91 e1 00 	lds	r25, 0x00E1
     952:	00 97       	sbiw	r24, 0x00	; 0
     954:	29 f0       	breq	.+10     	; 0x960 <__vector_11+0x40>
	{
		Timer0OverFlowSetCallBackISR() ;
     956:	e0 91 e0 00 	lds	r30, 0x00E0
     95a:	f0 91 e1 00 	lds	r31, 0x00E1
     95e:	09 95       	icall
	}
	else 
	{
		//do nothing
	}
}
     960:	cf 91       	pop	r28
     962:	df 91       	pop	r29
     964:	ff 91       	pop	r31
     966:	ef 91       	pop	r30
     968:	bf 91       	pop	r27
     96a:	af 91       	pop	r26
     96c:	9f 91       	pop	r25
     96e:	8f 91       	pop	r24
     970:	7f 91       	pop	r23
     972:	6f 91       	pop	r22
     974:	5f 91       	pop	r21
     976:	4f 91       	pop	r20
     978:	3f 91       	pop	r19
     97a:	2f 91       	pop	r18
     97c:	0f 90       	pop	r0
     97e:	0f be       	out	0x3f, r0	; 63
     980:	0f 90       	pop	r0
     982:	1f 90       	pop	r1
     984:	18 95       	reti

00000986 <TIMER0_u8BusyWaitMS>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//busy wait with prescaller 8
uint8_t TIMER0_u8BusyWaitMS(uint32_t u32_BusyTimeInMilliSec)
{
     986:	0f 93       	push	r16
     988:	1f 93       	push	r17
     98a:	df 93       	push	r29
     98c:	cf 93       	push	r28
     98e:	cd b7       	in	r28, 0x3d	; 61
     990:	de b7       	in	r29, 0x3e	; 62
     992:	c9 54       	subi	r28, 0x49	; 73
     994:	d0 40       	sbci	r29, 0x00	; 0
     996:	0f b6       	in	r0, 0x3f	; 63
     998:	f8 94       	cli
     99a:	de bf       	out	0x3e, r29	; 62
     99c:	0f be       	out	0x3f, r0	; 63
     99e:	cd bf       	out	0x3d, r28	; 61
     9a0:	6b 87       	std	Y+11, r22	; 0x0b
     9a2:	7c 87       	std	Y+12, r23	; 0x0c
     9a4:	8d 87       	std	Y+13, r24	; 0x0d
     9a6:	9e 87       	std	Y+14, r25	; 0x0e
	uint8_t u8_Timer0FlagIfUsed = u8_TIMER0_FLAG_NOT_USED ;
     9a8:	83 e1       	ldi	r24, 0x13	; 19
     9aa:	89 83       	std	Y+1, r24	; 0x01
	if(gu8_FlagIfTimer0Used== u8_TIMER0_FLAG_NOT_USED)
     9ac:	80 91 dd 00 	lds	r24, 0x00DD
     9b0:	83 31       	cpi	r24, 0x13	; 19
     9b2:	09 f0       	breq	.+2      	; 0x9b6 <TIMER0_u8BusyWaitMS+0x30>
     9b4:	c4 c1       	rjmp	.+904    	; 0xd3e <TIMER0_u8BusyWaitMS+0x3b8>
	{
		volatile uint64_t u64_BusyWaitcounter = u8_INTIAL_COUNTER_VAL ;
     9b6:	1a 82       	std	Y+2, r1	; 0x02
     9b8:	1b 82       	std	Y+3, r1	; 0x03
     9ba:	1c 82       	std	Y+4, r1	; 0x04
     9bc:	1d 82       	std	Y+5, r1	; 0x05
     9be:	1e 82       	std	Y+6, r1	; 0x06
     9c0:	1f 82       	std	Y+7, r1	; 0x07
     9c2:	18 86       	std	Y+8, r1	; 0x08
     9c4:	19 86       	std	Y+9, r1	; 0x09
		volatile uint8_t u8_CheckCompareFlag ;
		TIMERS_u8IntModesDis(u8_TIMER0_OVER_FLOW) ;
     9c6:	81 e1       	ldi	r24, 0x11	; 17
     9c8:	0e 94 c7 03 	call	0x78e	; 0x78e <TIMERS_u8IntModesDis>
		TIMERS_u8IntModesDis(u8_TIMER0_COMPARE_ON_MATCH) ;
     9cc:	82 e1       	ldi	r24, 0x12	; 18
     9ce:	0e 94 c7 03 	call	0x78e	; 0x78e <TIMERS_u8IntModesDis>
		TIMER0_u8StartWithclockAndPrescalerSelect(u8_INTERNAL_CLK_PRE_8) ;
     9d2:	87 e0       	ldi	r24, 0x07	; 7
     9d4:	0e 94 21 02 	call	0x442	; 0x442 <TIMER0_u8StartWithclockAndPrescalerSelect>
		TIMERS_u8ClearIntFlag(u8_TIMER0_COMPARE_ON_MATCH) ;
     9d8:	82 e1       	ldi	r24, 0x12	; 18
     9da:	0e 94 1d 03 	call	0x63a	; 0x63a <TIMERS_u8ClearIntFlag>
		Timer0_u8setCompareRegTicksBeforeOV(u8_NUM_OF_COUNTS_FOR_250_uS_with_8_pre) ;
     9de:	8a ef       	ldi	r24, 0xFA	; 250
     9e0:	0e 94 10 04 	call	0x820	; 0x820 <Timer0_u8setCompareRegTicksBeforeOV>
		Timer0_u8setOverFlowRegTicksBeforeOV(u8_MAX_TIMER0_COUNTS) ;
     9e4:	8f ef       	ldi	r24, 0xFF	; 255
     9e6:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <Timer0_u8setOverFlowRegTicksBeforeOV>
     9ea:	3a c1       	rjmp	.+628    	; 0xc60 <TIMER0_u8BusyWaitMS+0x2da>
		while(u64_BusyWaitcounter <=(uint64_t)(u32_BusyTimeInMilliSec*u8_NUMBER_OF_COUNTS_TO_COMP_1mS_with_8_pre))
		{
			TIMERS_u8GetIntFlag(u8_TIMER0_COMPARE_ON_MATCH,(&u8_CheckCompareFlag)) ;
     9ec:	9e 01       	movw	r18, r28
     9ee:	26 5f       	subi	r18, 0xF6	; 246
     9f0:	3f 4f       	sbci	r19, 0xFF	; 255
     9f2:	82 e1       	ldi	r24, 0x12	; 18
     9f4:	b9 01       	movw	r22, r18
     9f6:	0e 94 4f 03 	call	0x69e	; 0x69e <TIMERS_u8GetIntFlag>
			if(u8_CheckCompareFlag == u8_Flag_RAISED )
     9fa:	8a 85       	ldd	r24, Y+10	; 0x0a
     9fc:	81 30       	cpi	r24, 0x01	; 1
     9fe:	09 f0       	breq	.+2      	; 0xa02 <TIMER0_u8BusyWaitMS+0x7c>
     a00:	2f c1       	rjmp	.+606    	; 0xc60 <TIMER0_u8BusyWaitMS+0x2da>
			{
				TIMERS_u8ClearIntFlag(u8_TIMER0_COMPARE_ON_MATCH) ;
     a02:	82 e1       	ldi	r24, 0x12	; 18
     a04:	0e 94 1d 03 	call	0x63a	; 0x63a <TIMERS_u8ClearIntFlag>
				u64_BusyWaitcounter++ ;
     a08:	0a 81       	ldd	r16, Y+2	; 0x02
     a0a:	0f 8f       	std	Y+31, r16	; 0x1f
     a0c:	1b 81       	ldd	r17, Y+3	; 0x03
     a0e:	18 a3       	std	Y+32, r17	; 0x20
     a10:	2c 81       	ldd	r18, Y+4	; 0x04
     a12:	29 a3       	std	Y+33, r18	; 0x21
     a14:	3d 81       	ldd	r19, Y+5	; 0x05
     a16:	3a a3       	std	Y+34, r19	; 0x22
     a18:	4e 81       	ldd	r20, Y+6	; 0x06
     a1a:	4b a3       	std	Y+35, r20	; 0x23
     a1c:	5f 81       	ldd	r21, Y+7	; 0x07
     a1e:	5c a3       	std	Y+36, r21	; 0x24
     a20:	68 85       	ldd	r22, Y+8	; 0x08
     a22:	6d a3       	std	Y+37, r22	; 0x25
     a24:	79 85       	ldd	r23, Y+9	; 0x09
     a26:	7e a3       	std	Y+38, r23	; 0x26
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	8f a3       	std	Y+39, r24	; 0x27
     a2c:	18 a6       	std	Y+40, r1	; 0x28
     a2e:	19 a6       	std	Y+41, r1	; 0x29
     a30:	1a a6       	std	Y+42, r1	; 0x2a
     a32:	1b a6       	std	Y+43, r1	; 0x2b
     a34:	1c a6       	std	Y+44, r1	; 0x2c
     a36:	1d a6       	std	Y+45, r1	; 0x2d
     a38:	1e a6       	std	Y+46, r1	; 0x2e
     a3a:	9f 8d       	ldd	r25, Y+31	; 0x1f
     a3c:	0f a1       	ldd	r16, Y+39	; 0x27
     a3e:	90 0f       	add	r25, r16
     a40:	9f a7       	std	Y+47, r25	; 0x2f
     a42:	11 e0       	ldi	r17, 0x01	; 1
     a44:	1f ab       	std	Y+55, r17	; 0x37
     a46:	2f a5       	ldd	r18, Y+47	; 0x2f
     a48:	3f 8d       	ldd	r19, Y+31	; 0x1f
     a4a:	23 17       	cp	r18, r19
     a4c:	08 f0       	brcs	.+2      	; 0xa50 <TIMER0_u8BusyWaitMS+0xca>
     a4e:	1f aa       	std	Y+55, r1	; 0x37
     a50:	48 a1       	ldd	r20, Y+32	; 0x20
     a52:	58 a5       	ldd	r21, Y+40	; 0x28
     a54:	45 0f       	add	r20, r21
     a56:	48 ab       	std	Y+48, r20	; 0x30
     a58:	61 e0       	ldi	r22, 0x01	; 1
     a5a:	68 af       	std	Y+56, r22	; 0x38
     a5c:	78 a9       	ldd	r23, Y+48	; 0x30
     a5e:	88 a1       	ldd	r24, Y+32	; 0x20
     a60:	78 17       	cp	r23, r24
     a62:	08 f0       	brcs	.+2      	; 0xa66 <TIMER0_u8BusyWaitMS+0xe0>
     a64:	18 ae       	std	Y+56, r1	; 0x38
     a66:	9f a9       	ldd	r25, Y+55	; 0x37
     a68:	08 a9       	ldd	r16, Y+48	; 0x30
     a6a:	90 0f       	add	r25, r16
     a6c:	99 af       	std	Y+57, r25	; 0x39
     a6e:	11 e0       	ldi	r17, 0x01	; 1
     a70:	1a af       	std	Y+58, r17	; 0x3a
     a72:	29 ad       	ldd	r18, Y+57	; 0x39
     a74:	38 a9       	ldd	r19, Y+48	; 0x30
     a76:	23 17       	cp	r18, r19
     a78:	08 f0       	brcs	.+2      	; 0xa7c <TIMER0_u8BusyWaitMS+0xf6>
     a7a:	1a ae       	std	Y+58, r1	; 0x3a
     a7c:	48 ad       	ldd	r20, Y+56	; 0x38
     a7e:	5a ad       	ldd	r21, Y+58	; 0x3a
     a80:	45 2b       	or	r20, r21
     a82:	48 af       	std	Y+56, r20	; 0x38
     a84:	69 ad       	ldd	r22, Y+57	; 0x39
     a86:	68 ab       	std	Y+48, r22	; 0x30
     a88:	79 a1       	ldd	r23, Y+33	; 0x21
     a8a:	89 a5       	ldd	r24, Y+41	; 0x29
     a8c:	78 0f       	add	r23, r24
     a8e:	79 ab       	std	Y+49, r23	; 0x31
     a90:	91 e0       	ldi	r25, 0x01	; 1
     a92:	9b af       	std	Y+59, r25	; 0x3b
     a94:	09 a9       	ldd	r16, Y+49	; 0x31
     a96:	19 a1       	ldd	r17, Y+33	; 0x21
     a98:	01 17       	cp	r16, r17
     a9a:	08 f0       	brcs	.+2      	; 0xa9e <TIMER0_u8BusyWaitMS+0x118>
     a9c:	1b ae       	std	Y+59, r1	; 0x3b
     a9e:	28 ad       	ldd	r18, Y+56	; 0x38
     aa0:	39 a9       	ldd	r19, Y+49	; 0x31
     aa2:	23 0f       	add	r18, r19
     aa4:	2c af       	std	Y+60, r18	; 0x3c
     aa6:	41 e0       	ldi	r20, 0x01	; 1
     aa8:	4d af       	std	Y+61, r20	; 0x3d
     aaa:	5c ad       	ldd	r21, Y+60	; 0x3c
     aac:	69 a9       	ldd	r22, Y+49	; 0x31
     aae:	56 17       	cp	r21, r22
     ab0:	08 f0       	brcs	.+2      	; 0xab4 <TIMER0_u8BusyWaitMS+0x12e>
     ab2:	1d ae       	std	Y+61, r1	; 0x3d
     ab4:	7b ad       	ldd	r23, Y+59	; 0x3b
     ab6:	8d ad       	ldd	r24, Y+61	; 0x3d
     ab8:	78 2b       	or	r23, r24
     aba:	7b af       	std	Y+59, r23	; 0x3b
     abc:	9c ad       	ldd	r25, Y+60	; 0x3c
     abe:	99 ab       	std	Y+49, r25	; 0x31
     ac0:	0a a1       	ldd	r16, Y+34	; 0x22
     ac2:	1a a5       	ldd	r17, Y+42	; 0x2a
     ac4:	01 0f       	add	r16, r17
     ac6:	0a ab       	std	Y+50, r16	; 0x32
     ac8:	21 e0       	ldi	r18, 0x01	; 1
     aca:	2e af       	std	Y+62, r18	; 0x3e
     acc:	3a a9       	ldd	r19, Y+50	; 0x32
     ace:	4a a1       	ldd	r20, Y+34	; 0x22
     ad0:	34 17       	cp	r19, r20
     ad2:	08 f0       	brcs	.+2      	; 0xad6 <TIMER0_u8BusyWaitMS+0x150>
     ad4:	1e ae       	std	Y+62, r1	; 0x3e
     ad6:	5b ad       	ldd	r21, Y+59	; 0x3b
     ad8:	6a a9       	ldd	r22, Y+50	; 0x32
     ada:	56 0f       	add	r21, r22
     adc:	5f af       	std	Y+63, r21	; 0x3f
     ade:	71 e0       	ldi	r23, 0x01	; 1
     ae0:	21 96       	adiw	r28, 0x01	; 1
     ae2:	7f af       	std	Y+63, r23	; 0x3f
     ae4:	21 97       	sbiw	r28, 0x01	; 1
     ae6:	8f ad       	ldd	r24, Y+63	; 0x3f
     ae8:	9a a9       	ldd	r25, Y+50	; 0x32
     aea:	89 17       	cp	r24, r25
     aec:	18 f0       	brcs	.+6      	; 0xaf4 <TIMER0_u8BusyWaitMS+0x16e>
     aee:	21 96       	adiw	r28, 0x01	; 1
     af0:	1f ae       	std	Y+63, r1	; 0x3f
     af2:	21 97       	sbiw	r28, 0x01	; 1
     af4:	0e ad       	ldd	r16, Y+62	; 0x3e
     af6:	21 96       	adiw	r28, 0x01	; 1
     af8:	1f ad       	ldd	r17, Y+63	; 0x3f
     afa:	21 97       	sbiw	r28, 0x01	; 1
     afc:	01 2b       	or	r16, r17
     afe:	0e af       	std	Y+62, r16	; 0x3e
     b00:	2f ad       	ldd	r18, Y+63	; 0x3f
     b02:	2a ab       	std	Y+50, r18	; 0x32
     b04:	3b a1       	ldd	r19, Y+35	; 0x23
     b06:	4b a5       	ldd	r20, Y+43	; 0x2b
     b08:	34 0f       	add	r19, r20
     b0a:	3b ab       	std	Y+51, r19	; 0x33
     b0c:	51 e0       	ldi	r21, 0x01	; 1
     b0e:	22 96       	adiw	r28, 0x02	; 2
     b10:	5f af       	std	Y+63, r21	; 0x3f
     b12:	22 97       	sbiw	r28, 0x02	; 2
     b14:	6b a9       	ldd	r22, Y+51	; 0x33
     b16:	7b a1       	ldd	r23, Y+35	; 0x23
     b18:	67 17       	cp	r22, r23
     b1a:	18 f0       	brcs	.+6      	; 0xb22 <TIMER0_u8BusyWaitMS+0x19c>
     b1c:	22 96       	adiw	r28, 0x02	; 2
     b1e:	1f ae       	std	Y+63, r1	; 0x3f
     b20:	22 97       	sbiw	r28, 0x02	; 2
     b22:	8e ad       	ldd	r24, Y+62	; 0x3e
     b24:	9b a9       	ldd	r25, Y+51	; 0x33
     b26:	89 0f       	add	r24, r25
     b28:	23 96       	adiw	r28, 0x03	; 3
     b2a:	8f af       	std	Y+63, r24	; 0x3f
     b2c:	23 97       	sbiw	r28, 0x03	; 3
     b2e:	01 e0       	ldi	r16, 0x01	; 1
     b30:	24 96       	adiw	r28, 0x04	; 4
     b32:	0f af       	std	Y+63, r16	; 0x3f
     b34:	24 97       	sbiw	r28, 0x04	; 4
     b36:	23 96       	adiw	r28, 0x03	; 3
     b38:	1f ad       	ldd	r17, Y+63	; 0x3f
     b3a:	23 97       	sbiw	r28, 0x03	; 3
     b3c:	2b a9       	ldd	r18, Y+51	; 0x33
     b3e:	12 17       	cp	r17, r18
     b40:	18 f0       	brcs	.+6      	; 0xb48 <TIMER0_u8BusyWaitMS+0x1c2>
     b42:	24 96       	adiw	r28, 0x04	; 4
     b44:	1f ae       	std	Y+63, r1	; 0x3f
     b46:	24 97       	sbiw	r28, 0x04	; 4
     b48:	22 96       	adiw	r28, 0x02	; 2
     b4a:	3f ad       	ldd	r19, Y+63	; 0x3f
     b4c:	22 97       	sbiw	r28, 0x02	; 2
     b4e:	24 96       	adiw	r28, 0x04	; 4
     b50:	4f ad       	ldd	r20, Y+63	; 0x3f
     b52:	24 97       	sbiw	r28, 0x04	; 4
     b54:	34 2b       	or	r19, r20
     b56:	22 96       	adiw	r28, 0x02	; 2
     b58:	3f af       	std	Y+63, r19	; 0x3f
     b5a:	22 97       	sbiw	r28, 0x02	; 2
     b5c:	23 96       	adiw	r28, 0x03	; 3
     b5e:	5f ad       	ldd	r21, Y+63	; 0x3f
     b60:	23 97       	sbiw	r28, 0x03	; 3
     b62:	5b ab       	std	Y+51, r21	; 0x33
     b64:	6c a1       	ldd	r22, Y+36	; 0x24
     b66:	7c a5       	ldd	r23, Y+44	; 0x2c
     b68:	67 0f       	add	r22, r23
     b6a:	6c ab       	std	Y+52, r22	; 0x34
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	25 96       	adiw	r28, 0x05	; 5
     b70:	8f af       	std	Y+63, r24	; 0x3f
     b72:	25 97       	sbiw	r28, 0x05	; 5
     b74:	9c a9       	ldd	r25, Y+52	; 0x34
     b76:	0c a1       	ldd	r16, Y+36	; 0x24
     b78:	90 17       	cp	r25, r16
     b7a:	18 f0       	brcs	.+6      	; 0xb82 <TIMER0_u8BusyWaitMS+0x1fc>
     b7c:	25 96       	adiw	r28, 0x05	; 5
     b7e:	1f ae       	std	Y+63, r1	; 0x3f
     b80:	25 97       	sbiw	r28, 0x05	; 5
     b82:	22 96       	adiw	r28, 0x02	; 2
     b84:	1f ad       	ldd	r17, Y+63	; 0x3f
     b86:	22 97       	sbiw	r28, 0x02	; 2
     b88:	2c a9       	ldd	r18, Y+52	; 0x34
     b8a:	12 0f       	add	r17, r18
     b8c:	26 96       	adiw	r28, 0x06	; 6
     b8e:	1f af       	std	Y+63, r17	; 0x3f
     b90:	26 97       	sbiw	r28, 0x06	; 6
     b92:	31 e0       	ldi	r19, 0x01	; 1
     b94:	27 96       	adiw	r28, 0x07	; 7
     b96:	3f af       	std	Y+63, r19	; 0x3f
     b98:	27 97       	sbiw	r28, 0x07	; 7
     b9a:	26 96       	adiw	r28, 0x06	; 6
     b9c:	4f ad       	ldd	r20, Y+63	; 0x3f
     b9e:	26 97       	sbiw	r28, 0x06	; 6
     ba0:	5c a9       	ldd	r21, Y+52	; 0x34
     ba2:	45 17       	cp	r20, r21
     ba4:	18 f0       	brcs	.+6      	; 0xbac <TIMER0_u8BusyWaitMS+0x226>
     ba6:	27 96       	adiw	r28, 0x07	; 7
     ba8:	1f ae       	std	Y+63, r1	; 0x3f
     baa:	27 97       	sbiw	r28, 0x07	; 7
     bac:	25 96       	adiw	r28, 0x05	; 5
     bae:	6f ad       	ldd	r22, Y+63	; 0x3f
     bb0:	25 97       	sbiw	r28, 0x05	; 5
     bb2:	27 96       	adiw	r28, 0x07	; 7
     bb4:	7f ad       	ldd	r23, Y+63	; 0x3f
     bb6:	27 97       	sbiw	r28, 0x07	; 7
     bb8:	67 2b       	or	r22, r23
     bba:	25 96       	adiw	r28, 0x05	; 5
     bbc:	6f af       	std	Y+63, r22	; 0x3f
     bbe:	25 97       	sbiw	r28, 0x05	; 5
     bc0:	26 96       	adiw	r28, 0x06	; 6
     bc2:	8f ad       	ldd	r24, Y+63	; 0x3f
     bc4:	26 97       	sbiw	r28, 0x06	; 6
     bc6:	8c ab       	std	Y+52, r24	; 0x34
     bc8:	9d a1       	ldd	r25, Y+37	; 0x25
     bca:	0d a5       	ldd	r16, Y+45	; 0x2d
     bcc:	90 0f       	add	r25, r16
     bce:	9d ab       	std	Y+53, r25	; 0x35
     bd0:	11 e0       	ldi	r17, 0x01	; 1
     bd2:	28 96       	adiw	r28, 0x08	; 8
     bd4:	1f af       	std	Y+63, r17	; 0x3f
     bd6:	28 97       	sbiw	r28, 0x08	; 8
     bd8:	2d a9       	ldd	r18, Y+53	; 0x35
     bda:	3d a1       	ldd	r19, Y+37	; 0x25
     bdc:	23 17       	cp	r18, r19
     bde:	18 f0       	brcs	.+6      	; 0xbe6 <TIMER0_u8BusyWaitMS+0x260>
     be0:	28 96       	adiw	r28, 0x08	; 8
     be2:	1f ae       	std	Y+63, r1	; 0x3f
     be4:	28 97       	sbiw	r28, 0x08	; 8
     be6:	25 96       	adiw	r28, 0x05	; 5
     be8:	4f ad       	ldd	r20, Y+63	; 0x3f
     bea:	25 97       	sbiw	r28, 0x05	; 5
     bec:	5d a9       	ldd	r21, Y+53	; 0x35
     bee:	45 0f       	add	r20, r21
     bf0:	29 96       	adiw	r28, 0x09	; 9
     bf2:	4f af       	std	Y+63, r20	; 0x3f
     bf4:	29 97       	sbiw	r28, 0x09	; 9
     bf6:	61 e0       	ldi	r22, 0x01	; 1
     bf8:	2a 96       	adiw	r28, 0x0a	; 10
     bfa:	6f af       	std	Y+63, r22	; 0x3f
     bfc:	2a 97       	sbiw	r28, 0x0a	; 10
     bfe:	29 96       	adiw	r28, 0x09	; 9
     c00:	7f ad       	ldd	r23, Y+63	; 0x3f
     c02:	29 97       	sbiw	r28, 0x09	; 9
     c04:	8d a9       	ldd	r24, Y+53	; 0x35
     c06:	78 17       	cp	r23, r24
     c08:	18 f0       	brcs	.+6      	; 0xc10 <TIMER0_u8BusyWaitMS+0x28a>
     c0a:	2a 96       	adiw	r28, 0x0a	; 10
     c0c:	1f ae       	std	Y+63, r1	; 0x3f
     c0e:	2a 97       	sbiw	r28, 0x0a	; 10
     c10:	28 96       	adiw	r28, 0x08	; 8
     c12:	9f ad       	ldd	r25, Y+63	; 0x3f
     c14:	28 97       	sbiw	r28, 0x08	; 8
     c16:	2a 96       	adiw	r28, 0x0a	; 10
     c18:	0f ad       	ldd	r16, Y+63	; 0x3f
     c1a:	2a 97       	sbiw	r28, 0x0a	; 10
     c1c:	90 2b       	or	r25, r16
     c1e:	28 96       	adiw	r28, 0x08	; 8
     c20:	9f af       	std	Y+63, r25	; 0x3f
     c22:	28 97       	sbiw	r28, 0x08	; 8
     c24:	29 96       	adiw	r28, 0x09	; 9
     c26:	1f ad       	ldd	r17, Y+63	; 0x3f
     c28:	29 97       	sbiw	r28, 0x09	; 9
     c2a:	1d ab       	std	Y+53, r17	; 0x35
     c2c:	2e a1       	ldd	r18, Y+38	; 0x26
     c2e:	3e a5       	ldd	r19, Y+46	; 0x2e
     c30:	23 0f       	add	r18, r19
     c32:	2e ab       	std	Y+54, r18	; 0x36
     c34:	28 96       	adiw	r28, 0x08	; 8
     c36:	8f ad       	ldd	r24, Y+63	; 0x3f
     c38:	28 97       	sbiw	r28, 0x08	; 8
     c3a:	4e a9       	ldd	r20, Y+54	; 0x36
     c3c:	84 0f       	add	r24, r20
     c3e:	8e ab       	std	Y+54, r24	; 0x36
     c40:	2f a5       	ldd	r18, Y+47	; 0x2f
     c42:	38 a9       	ldd	r19, Y+48	; 0x30
     c44:	49 a9       	ldd	r20, Y+49	; 0x31
     c46:	5a a9       	ldd	r21, Y+50	; 0x32
     c48:	6b a9       	ldd	r22, Y+51	; 0x33
     c4a:	7c a9       	ldd	r23, Y+52	; 0x34
     c4c:	8d a9       	ldd	r24, Y+53	; 0x35
     c4e:	9e a9       	ldd	r25, Y+54	; 0x36
     c50:	2a 83       	std	Y+2, r18	; 0x02
     c52:	3b 83       	std	Y+3, r19	; 0x03
     c54:	4c 83       	std	Y+4, r20	; 0x04
     c56:	5d 83       	std	Y+5, r21	; 0x05
     c58:	6e 83       	std	Y+6, r22	; 0x06
     c5a:	7f 83       	std	Y+7, r23	; 0x07
     c5c:	88 87       	std	Y+8, r24	; 0x08
     c5e:	99 87       	std	Y+9, r25	; 0x09
		TIMERS_u8IntModesDis(u8_TIMER0_COMPARE_ON_MATCH) ;
		TIMER0_u8StartWithclockAndPrescalerSelect(u8_INTERNAL_CLK_PRE_8) ;
		TIMERS_u8ClearIntFlag(u8_TIMER0_COMPARE_ON_MATCH) ;
		Timer0_u8setCompareRegTicksBeforeOV(u8_NUM_OF_COUNTS_FOR_250_uS_with_8_pre) ;
		Timer0_u8setOverFlowRegTicksBeforeOV(u8_MAX_TIMER0_COUNTS) ;
		while(u64_BusyWaitcounter <=(uint64_t)(u32_BusyTimeInMilliSec*u8_NUMBER_OF_COUNTS_TO_COMP_1mS_with_8_pre))
     c60:	8b 85       	ldd	r24, Y+11	; 0x0b
     c62:	9c 85       	ldd	r25, Y+12	; 0x0c
     c64:	ad 85       	ldd	r26, Y+13	; 0x0d
     c66:	be 85       	ldd	r27, Y+14	; 0x0e
     c68:	88 0f       	add	r24, r24
     c6a:	99 1f       	adc	r25, r25
     c6c:	aa 1f       	adc	r26, r26
     c6e:	bb 1f       	adc	r27, r27
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	aa 1f       	adc	r26, r26
     c76:	bb 1f       	adc	r27, r27
     c78:	8c 01       	movw	r16, r24
     c7a:	9d 01       	movw	r18, r26
     c7c:	40 e0       	ldi	r20, 0x00	; 0
     c7e:	50 e0       	ldi	r21, 0x00	; 0
     c80:	60 e0       	ldi	r22, 0x00	; 0
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	0f 8b       	std	Y+23, r16	; 0x17
     c86:	18 8f       	std	Y+24, r17	; 0x18
     c88:	29 8f       	std	Y+25, r18	; 0x19
     c8a:	3a 8f       	std	Y+26, r19	; 0x1a
     c8c:	4b 8f       	std	Y+27, r20	; 0x1b
     c8e:	5c 8f       	std	Y+28, r21	; 0x1c
     c90:	6d 8f       	std	Y+29, r22	; 0x1d
     c92:	7e 8f       	std	Y+30, r23	; 0x1e
     c94:	1a 81       	ldd	r17, Y+2	; 0x02
     c96:	1f 87       	std	Y+15, r17	; 0x0f
     c98:	2b 81       	ldd	r18, Y+3	; 0x03
     c9a:	28 8b       	std	Y+16, r18	; 0x10
     c9c:	3c 81       	ldd	r19, Y+4	; 0x04
     c9e:	39 8b       	std	Y+17, r19	; 0x11
     ca0:	4d 81       	ldd	r20, Y+5	; 0x05
     ca2:	4a 8b       	std	Y+18, r20	; 0x12
     ca4:	5e 81       	ldd	r21, Y+6	; 0x06
     ca6:	5b 8b       	std	Y+19, r21	; 0x13
     ca8:	6f 81       	ldd	r22, Y+7	; 0x07
     caa:	6c 8b       	std	Y+20, r22	; 0x14
     cac:	78 85       	ldd	r23, Y+8	; 0x08
     cae:	7d 8b       	std	Y+21, r23	; 0x15
     cb0:	89 85       	ldd	r24, Y+9	; 0x09
     cb2:	8e 8b       	std	Y+22, r24	; 0x16
     cb4:	9e 89       	ldd	r25, Y+22	; 0x16
     cb6:	0e 8d       	ldd	r16, Y+30	; 0x1e
     cb8:	09 17       	cp	r16, r25
     cba:	08 f4       	brcc	.+2      	; 0xcbe <TIMER0_u8BusyWaitMS+0x338>
     cbc:	42 c0       	rjmp	.+132    	; 0xd42 <TIMER0_u8BusyWaitMS+0x3bc>
     cbe:	1e 89       	ldd	r17, Y+22	; 0x16
     cc0:	2e 8d       	ldd	r18, Y+30	; 0x1e
     cc2:	12 17       	cp	r17, r18
     cc4:	09 f0       	breq	.+2      	; 0xcc8 <TIMER0_u8BusyWaitMS+0x342>
     cc6:	92 ce       	rjmp	.-732    	; 0x9ec <TIMER0_u8BusyWaitMS+0x66>
     cc8:	3d 89       	ldd	r19, Y+21	; 0x15
     cca:	4d 8d       	ldd	r20, Y+29	; 0x1d
     ccc:	43 17       	cp	r20, r19
     cce:	c8 f1       	brcs	.+114    	; 0xd42 <TIMER0_u8BusyWaitMS+0x3bc>
     cd0:	5d 89       	ldd	r21, Y+21	; 0x15
     cd2:	6d 8d       	ldd	r22, Y+29	; 0x1d
     cd4:	56 17       	cp	r21, r22
     cd6:	09 f0       	breq	.+2      	; 0xcda <TIMER0_u8BusyWaitMS+0x354>
     cd8:	89 ce       	rjmp	.-750    	; 0x9ec <TIMER0_u8BusyWaitMS+0x66>
     cda:	7c 89       	ldd	r23, Y+20	; 0x14
     cdc:	8c 8d       	ldd	r24, Y+28	; 0x1c
     cde:	87 17       	cp	r24, r23
     ce0:	80 f1       	brcs	.+96     	; 0xd42 <TIMER0_u8BusyWaitMS+0x3bc>
     ce2:	9c 89       	ldd	r25, Y+20	; 0x14
     ce4:	0c 8d       	ldd	r16, Y+28	; 0x1c
     ce6:	90 17       	cp	r25, r16
     ce8:	09 f0       	breq	.+2      	; 0xcec <TIMER0_u8BusyWaitMS+0x366>
     cea:	80 ce       	rjmp	.-768    	; 0x9ec <TIMER0_u8BusyWaitMS+0x66>
     cec:	1b 89       	ldd	r17, Y+19	; 0x13
     cee:	2b 8d       	ldd	r18, Y+27	; 0x1b
     cf0:	21 17       	cp	r18, r17
     cf2:	38 f1       	brcs	.+78     	; 0xd42 <TIMER0_u8BusyWaitMS+0x3bc>
     cf4:	3b 89       	ldd	r19, Y+19	; 0x13
     cf6:	4b 8d       	ldd	r20, Y+27	; 0x1b
     cf8:	34 17       	cp	r19, r20
     cfa:	09 f0       	breq	.+2      	; 0xcfe <TIMER0_u8BusyWaitMS+0x378>
     cfc:	77 ce       	rjmp	.-786    	; 0x9ec <TIMER0_u8BusyWaitMS+0x66>
     cfe:	5a 89       	ldd	r21, Y+18	; 0x12
     d00:	6a 8d       	ldd	r22, Y+26	; 0x1a
     d02:	65 17       	cp	r22, r21
     d04:	f0 f0       	brcs	.+60     	; 0xd42 <TIMER0_u8BusyWaitMS+0x3bc>
     d06:	7a 89       	ldd	r23, Y+18	; 0x12
     d08:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d0a:	78 17       	cp	r23, r24
     d0c:	09 f0       	breq	.+2      	; 0xd10 <TIMER0_u8BusyWaitMS+0x38a>
     d0e:	6e ce       	rjmp	.-804    	; 0x9ec <TIMER0_u8BusyWaitMS+0x66>
     d10:	99 89       	ldd	r25, Y+17	; 0x11
     d12:	09 8d       	ldd	r16, Y+25	; 0x19
     d14:	09 17       	cp	r16, r25
     d16:	a8 f0       	brcs	.+42     	; 0xd42 <TIMER0_u8BusyWaitMS+0x3bc>
     d18:	19 89       	ldd	r17, Y+17	; 0x11
     d1a:	29 8d       	ldd	r18, Y+25	; 0x19
     d1c:	12 17       	cp	r17, r18
     d1e:	09 f0       	breq	.+2      	; 0xd22 <TIMER0_u8BusyWaitMS+0x39c>
     d20:	65 ce       	rjmp	.-822    	; 0x9ec <TIMER0_u8BusyWaitMS+0x66>
     d22:	38 89       	ldd	r19, Y+16	; 0x10
     d24:	48 8d       	ldd	r20, Y+24	; 0x18
     d26:	43 17       	cp	r20, r19
     d28:	60 f0       	brcs	.+24     	; 0xd42 <TIMER0_u8BusyWaitMS+0x3bc>
     d2a:	58 89       	ldd	r21, Y+16	; 0x10
     d2c:	68 8d       	ldd	r22, Y+24	; 0x18
     d2e:	56 17       	cp	r21, r22
     d30:	09 f0       	breq	.+2      	; 0xd34 <TIMER0_u8BusyWaitMS+0x3ae>
     d32:	5c ce       	rjmp	.-840    	; 0x9ec <TIMER0_u8BusyWaitMS+0x66>
     d34:	7f 85       	ldd	r23, Y+15	; 0x0f
     d36:	8f 89       	ldd	r24, Y+23	; 0x17
     d38:	87 17       	cp	r24, r23
     d3a:	18 f0       	brcs	.+6      	; 0xd42 <TIMER0_u8BusyWaitMS+0x3bc>
     d3c:	57 ce       	rjmp	.-850    	; 0x9ec <TIMER0_u8BusyWaitMS+0x66>
			}
		}
	}
	else
	{
		u8_Timer0FlagIfUsed = u8_TIMER0_FLAG_USED ;
     d3e:	84 e1       	ldi	r24, 0x14	; 20
     d40:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_Timer0FlagIfUsed ;
     d42:	89 81       	ldd	r24, Y+1	; 0x01
	
}
     d44:	c7 5b       	subi	r28, 0xB7	; 183
     d46:	df 4f       	sbci	r29, 0xFF	; 255
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	f8 94       	cli
     d4c:	de bf       	out	0x3e, r29	; 62
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	cd bf       	out	0x3d, r28	; 61
     d52:	cf 91       	pop	r28
     d54:	df 91       	pop	r29
     d56:	1f 91       	pop	r17
     d58:	0f 91       	pop	r16
     d5a:	08 95       	ret

00000d5c <TIMER0_u8BusyWaitUS>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//busy wait with prescaller 8
uint8_t TIMER0_u8BusyWaitUS(uint32_t u32_BusyTimeInMicroSec)
{
     d5c:	df 93       	push	r29
     d5e:	cf 93       	push	r28
     d60:	cd b7       	in	r28, 0x3d	; 61
     d62:	de b7       	in	r29, 0x3e	; 62
     d64:	2a 97       	sbiw	r28, 0x0a	; 10
     d66:	0f b6       	in	r0, 0x3f	; 63
     d68:	f8 94       	cli
     d6a:	de bf       	out	0x3e, r29	; 62
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	cd bf       	out	0x3d, r28	; 61
     d70:	6f 83       	std	Y+7, r22	; 0x07
     d72:	78 87       	std	Y+8, r23	; 0x08
     d74:	89 87       	std	Y+9, r24	; 0x09
     d76:	9a 87       	std	Y+10, r25	; 0x0a
	uint8_t u8_Timer0FlagIfUsed = u8_TIMER0_FLAG_NOT_USED ;
     d78:	83 e1       	ldi	r24, 0x13	; 19
     d7a:	89 83       	std	Y+1, r24	; 0x01
	if(gu8_FlagIfTimer0Used== u8_TIMER0_FLAG_NOT_USED)
     d7c:	80 91 dd 00 	lds	r24, 0x00DD
     d80:	83 31       	cpi	r24, 0x13	; 19
     d82:	e9 f5       	brne	.+122    	; 0xdfe <TIMER0_u8BusyWaitUS+0xa2>
	{
		volatile uint32_t u32_BusyWaitcounter = u8_INTIAL_COUNTER_VAL ;
     d84:	1a 82       	std	Y+2, r1	; 0x02
     d86:	1b 82       	std	Y+3, r1	; 0x03
     d88:	1c 82       	std	Y+4, r1	; 0x04
     d8a:	1d 82       	std	Y+5, r1	; 0x05
		volatile uint8_t u8_CheckCompareFlag ;
		TIMERS_u8IntModesDis(u8_TIMER0_OVER_FLOW) ;
     d8c:	81 e1       	ldi	r24, 0x11	; 17
     d8e:	0e 94 c7 03 	call	0x78e	; 0x78e <TIMERS_u8IntModesDis>
		TIMERS_u8IntModesDis(u8_TIMER0_COMPARE_ON_MATCH) ;
     d92:	82 e1       	ldi	r24, 0x12	; 18
     d94:	0e 94 c7 03 	call	0x78e	; 0x78e <TIMERS_u8IntModesDis>
		TIMER0_u8StartWithclockAndPrescalerSelect(u8_INTERNAL_CLK_PRE_8) ;
     d98:	87 e0       	ldi	r24, 0x07	; 7
     d9a:	0e 94 21 02 	call	0x442	; 0x442 <TIMER0_u8StartWithclockAndPrescalerSelect>
		TIMERS_u8ClearIntFlag(u8_TIMER0_COMPARE_ON_MATCH) ;
     d9e:	82 e1       	ldi	r24, 0x12	; 18
     da0:	0e 94 1d 03 	call	0x63a	; 0x63a <TIMERS_u8ClearIntFlag>
		Timer0_u8setCompareRegTicksBeforeOV(u8_NUM_OF_COUNTS_FOR_250_uS_with_8_pre) ;
     da4:	8a ef       	ldi	r24, 0xFA	; 250
     da6:	0e 94 10 04 	call	0x820	; 0x820 <Timer0_u8setCompareRegTicksBeforeOV>
		Timer0_u8setOverFlowRegTicksBeforeOV(u8_MAX_TIMER0_COUNTS) ;
     daa:	8f ef       	ldi	r24, 0xFF	; 255
     dac:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <Timer0_u8setOverFlowRegTicksBeforeOV>
     db0:	18 c0       	rjmp	.+48     	; 0xde2 <TIMER0_u8BusyWaitUS+0x86>
		while(u32_BusyWaitcounter <=u32_BusyTimeInMicroSec)
		{
			TIMERS_u8GetIntFlag(u8_TIMER0_COMPARE_ON_MATCH,(&u8_CheckCompareFlag)) ;
     db2:	9e 01       	movw	r18, r28
     db4:	2a 5f       	subi	r18, 0xFA	; 250
     db6:	3f 4f       	sbci	r19, 0xFF	; 255
     db8:	82 e1       	ldi	r24, 0x12	; 18
     dba:	b9 01       	movw	r22, r18
     dbc:	0e 94 4f 03 	call	0x69e	; 0x69e <TIMERS_u8GetIntFlag>
			if(u8_CheckCompareFlag == u8_Flag_RAISED )
     dc0:	8e 81       	ldd	r24, Y+6	; 0x06
     dc2:	81 30       	cpi	r24, 0x01	; 1
     dc4:	71 f4       	brne	.+28     	; 0xde2 <TIMER0_u8BusyWaitUS+0x86>
			{
				TIMERS_u8ClearIntFlag(u8_TIMER0_COMPARE_ON_MATCH) ;
     dc6:	82 e1       	ldi	r24, 0x12	; 18
     dc8:	0e 94 1d 03 	call	0x63a	; 0x63a <TIMERS_u8ClearIntFlag>
				u32_BusyWaitcounter++ ;
     dcc:	8a 81       	ldd	r24, Y+2	; 0x02
     dce:	9b 81       	ldd	r25, Y+3	; 0x03
     dd0:	ac 81       	ldd	r26, Y+4	; 0x04
     dd2:	bd 81       	ldd	r27, Y+5	; 0x05
     dd4:	01 96       	adiw	r24, 0x01	; 1
     dd6:	a1 1d       	adc	r26, r1
     dd8:	b1 1d       	adc	r27, r1
     dda:	8a 83       	std	Y+2, r24	; 0x02
     ddc:	9b 83       	std	Y+3, r25	; 0x03
     dde:	ac 83       	std	Y+4, r26	; 0x04
     de0:	bd 83       	std	Y+5, r27	; 0x05
		TIMERS_u8IntModesDis(u8_TIMER0_COMPARE_ON_MATCH) ;
		TIMER0_u8StartWithclockAndPrescalerSelect(u8_INTERNAL_CLK_PRE_8) ;
		TIMERS_u8ClearIntFlag(u8_TIMER0_COMPARE_ON_MATCH) ;
		Timer0_u8setCompareRegTicksBeforeOV(u8_NUM_OF_COUNTS_FOR_250_uS_with_8_pre) ;
		Timer0_u8setOverFlowRegTicksBeforeOV(u8_MAX_TIMER0_COUNTS) ;
		while(u32_BusyWaitcounter <=u32_BusyTimeInMicroSec)
     de2:	2a 81       	ldd	r18, Y+2	; 0x02
     de4:	3b 81       	ldd	r19, Y+3	; 0x03
     de6:	4c 81       	ldd	r20, Y+4	; 0x04
     de8:	5d 81       	ldd	r21, Y+5	; 0x05
     dea:	8f 81       	ldd	r24, Y+7	; 0x07
     dec:	98 85       	ldd	r25, Y+8	; 0x08
     dee:	a9 85       	ldd	r26, Y+9	; 0x09
     df0:	ba 85       	ldd	r27, Y+10	; 0x0a
     df2:	82 17       	cp	r24, r18
     df4:	93 07       	cpc	r25, r19
     df6:	a4 07       	cpc	r26, r20
     df8:	b5 07       	cpc	r27, r21
     dfa:	d8 f6       	brcc	.-74     	; 0xdb2 <TIMER0_u8BusyWaitUS+0x56>
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <TIMER0_u8BusyWaitUS+0xa6>
			}
		}
	}
	else
	{
		u8_Timer0FlagIfUsed = u8_TIMER0_FLAG_USED ;
     dfe:	84 e1       	ldi	r24, 0x14	; 20
     e00:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_Timer0FlagIfUsed ;
     e02:	89 81       	ldd	r24, Y+1	; 0x01
	
}
     e04:	2a 96       	adiw	r28, 0x0a	; 10
     e06:	0f b6       	in	r0, 0x3f	; 63
     e08:	f8 94       	cli
     e0a:	de bf       	out	0x3e, r29	; 62
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	cd bf       	out	0x3d, r28	; 61
     e10:	cf 91       	pop	r28
     e12:	df 91       	pop	r29
     e14:	08 95       	ret

00000e16 <TIMER0_u8InterruptWait>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMER0_u8InterruptWait(uint32_t u32_BusyTimeInMilliSec)
{
     e16:	df 93       	push	r29
     e18:	cf 93       	push	r28
     e1a:	00 d0       	rcall	.+0      	; 0xe1c <TIMER0_u8InterruptWait+0x6>
     e1c:	00 d0       	rcall	.+0      	; 0xe1e <TIMER0_u8InterruptWait+0x8>
     e1e:	0f 92       	push	r0
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
     e24:	6a 83       	std	Y+2, r22	; 0x02
     e26:	7b 83       	std	Y+3, r23	; 0x03
     e28:	8c 83       	std	Y+4, r24	; 0x04
     e2a:	9d 83       	std	Y+5, r25	; 0x05
	uint8_t u8_Timer0FlagIfUsed = u8_TIMER0_FLAG_NOT_USED ;
     e2c:	83 e1       	ldi	r24, 0x13	; 19
     e2e:	89 83       	std	Y+1, r24	; 0x01
	if(gu8_FlagIfTimer0Used==u8_TIMER0_FLAG_NOT_USED &&gu8_FinishIntWaitFlag != u8_BEGIN_INTERRUPT_WAITING )
     e30:	80 91 dd 00 	lds	r24, 0x00DD
     e34:	83 31       	cpi	r24, 0x13	; 19
     e36:	09 f0       	breq	.+2      	; 0xe3a <TIMER0_u8InterruptWait+0x24>
     e38:	3f c0       	rjmp	.+126    	; 0xeb8 <TIMER0_u8InterruptWait+0xa2>
     e3a:	80 91 dc 00 	lds	r24, 0x00DC
     e3e:	87 31       	cpi	r24, 0x17	; 23
     e40:	d9 f1       	breq	.+118    	; 0xeb8 <TIMER0_u8InterruptWait+0xa2>
	{
		gu64_IntWaitcounter = (uint64_t)(u32_BusyTimeInMilliSec*u8_NUMBER_OF_COUNTS_TO_COMP_1mS_with_8_pre) ;
     e42:	8a 81       	ldd	r24, Y+2	; 0x02
     e44:	9b 81       	ldd	r25, Y+3	; 0x03
     e46:	ac 81       	ldd	r26, Y+4	; 0x04
     e48:	bd 81       	ldd	r27, Y+5	; 0x05
     e4a:	88 0f       	add	r24, r24
     e4c:	99 1f       	adc	r25, r25
     e4e:	aa 1f       	adc	r26, r26
     e50:	bb 1f       	adc	r27, r27
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	aa 1f       	adc	r26, r26
     e58:	bb 1f       	adc	r27, r27
     e5a:	9c 01       	movw	r18, r24
     e5c:	ad 01       	movw	r20, r26
     e5e:	60 e0       	ldi	r22, 0x00	; 0
     e60:	70 e0       	ldi	r23, 0x00	; 0
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	20 93 e2 00 	sts	0x00E2, r18
     e6a:	30 93 e3 00 	sts	0x00E3, r19
     e6e:	40 93 e4 00 	sts	0x00E4, r20
     e72:	50 93 e5 00 	sts	0x00E5, r21
     e76:	60 93 e6 00 	sts	0x00E6, r22
     e7a:	70 93 e7 00 	sts	0x00E7, r23
     e7e:	80 93 e8 00 	sts	0x00E8, r24
     e82:	90 93 e9 00 	sts	0x00E9, r25
		Timer0_u8setCompareRegTicksBeforeOV(u8_NUM_OF_COUNTS_FOR_250_uS_with_8_pre) ;
     e86:	8a ef       	ldi	r24, 0xFA	; 250
     e88:	0e 94 10 04 	call	0x820	; 0x820 <Timer0_u8setCompareRegTicksBeforeOV>
		Timer0_u8setOverFlowRegTicksBeforeOV(u8_MAX_TIMER0_COUNTS) ;
     e8c:	8f ef       	ldi	r24, 0xFF	; 255
     e8e:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <Timer0_u8setOverFlowRegTicksBeforeOV>
		gu8_FlagIfTimer0Used = u8_TIMER0_FLAG_USED ;
     e92:	84 e1       	ldi	r24, 0x14	; 20
     e94:	80 93 dd 00 	sts	0x00DD, r24
		TIMERS_u8IntModesEn(u8_TIMER0_COMPARE_ON_MATCH);
     e98:	82 e1       	ldi	r24, 0x12	; 18
     e9a:	0e 94 87 03 	call	0x70e	; 0x70e <TIMERS_u8IntModesEn>
		TIMER0_u8setCallBack(u8_TIMER0_COMPARE_ON_MATCH,void_IntWaitControlFlagCount) ;
     e9e:	27 e6       	ldi	r18, 0x67	; 103
     ea0:	37 e0       	ldi	r19, 0x07	; 7
     ea2:	82 e1       	ldi	r24, 0x12	; 18
     ea4:	b9 01       	movw	r22, r18
     ea6:	0e 94 22 04 	call	0x844	; 0x844 <TIMER0_u8setCallBack>
		TIMER0_u8StartWithclockAndPrescalerSelect(u8_INTERNAL_CLK_PRE_8) ;
     eaa:	87 e0       	ldi	r24, 0x07	; 7
     eac:	0e 94 21 02 	call	0x442	; 0x442 <TIMER0_u8StartWithclockAndPrescalerSelect>
		gu8_FinishIntWaitFlag = u8_BEGIN_INTERRUPT_WAITING ;
     eb0:	87 e1       	ldi	r24, 0x17	; 23
     eb2:	80 93 dc 00 	sts	0x00DC, r24
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <TIMER0_u8InterruptWait+0xa6>

	}
	else
	{
		u8_Timer0FlagIfUsed = u8_TIMER0_FLAG_USED ;
     eb8:	84 e1       	ldi	r24, 0x14	; 20
     eba:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_Timer0FlagIfUsed ;
     ebc:	89 81       	ldd	r24, Y+1	; 0x01
}
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	cf 91       	pop	r28
     eca:	df 91       	pop	r29
     ecc:	08 95       	ret

00000ece <void_IntWaitControlFlagCount>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void void_IntWaitControlFlagCount(void)
{
     ece:	df 93       	push	r29
     ed0:	cf 93       	push	r28
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
     ed6:	ab 97       	sbiw	r28, 0x2b	; 43
     ed8:	0f b6       	in	r0, 0x3f	; 63
     eda:	f8 94       	cli
     edc:	de bf       	out	0x3e, r29	; 62
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	cd bf       	out	0x3d, r28	; 61

	if(gu8_FlagIfTimer0Used==u8_TIMER0_FLAG_USED&&gu64_IntWaitcounter > u8_INTIAL_COUNTER_VAL)
     ee2:	80 91 dd 00 	lds	r24, 0x00DD
     ee6:	84 31       	cpi	r24, 0x14	; 20
     ee8:	09 f0       	breq	.+2      	; 0xeec <void_IntWaitControlFlagCount+0x1e>
     eea:	17 c1       	rjmp	.+558    	; 0x111a <void_IntWaitControlFlagCount+0x24c>
     eec:	20 91 e2 00 	lds	r18, 0x00E2
     ef0:	30 91 e3 00 	lds	r19, 0x00E3
     ef4:	40 91 e4 00 	lds	r20, 0x00E4
     ef8:	50 91 e5 00 	lds	r21, 0x00E5
     efc:	60 91 e6 00 	lds	r22, 0x00E6
     f00:	70 91 e7 00 	lds	r23, 0x00E7
     f04:	80 91 e8 00 	lds	r24, 0x00E8
     f08:	90 91 e9 00 	lds	r25, 0x00E9
     f0c:	e2 2f       	mov	r30, r18
     f0e:	e3 2b       	or	r30, r19
     f10:	e4 2b       	or	r30, r20
     f12:	e5 2b       	or	r30, r21
     f14:	e6 2b       	or	r30, r22
     f16:	e7 2b       	or	r30, r23
     f18:	e8 2b       	or	r30, r24
     f1a:	e9 2b       	or	r30, r25
     f1c:	ee 23       	and	r30, r30
     f1e:	09 f4       	brne	.+2      	; 0xf22 <void_IntWaitControlFlagCount+0x54>
     f20:	fc c0       	rjmp	.+504    	; 0x111a <void_IntWaitControlFlagCount+0x24c>
	{
		gu64_IntWaitcounter-- ;
     f22:	80 91 e2 00 	lds	r24, 0x00E2
     f26:	89 83       	std	Y+1, r24	; 0x01
     f28:	90 91 e3 00 	lds	r25, 0x00E3
     f2c:	9a 83       	std	Y+2, r25	; 0x02
     f2e:	80 91 e4 00 	lds	r24, 0x00E4
     f32:	8b 83       	std	Y+3, r24	; 0x03
     f34:	90 91 e5 00 	lds	r25, 0x00E5
     f38:	9c 83       	std	Y+4, r25	; 0x04
     f3a:	80 91 e6 00 	lds	r24, 0x00E6
     f3e:	8d 83       	std	Y+5, r24	; 0x05
     f40:	90 91 e7 00 	lds	r25, 0x00E7
     f44:	9e 83       	std	Y+6, r25	; 0x06
     f46:	80 91 e8 00 	lds	r24, 0x00E8
     f4a:	8f 83       	std	Y+7, r24	; 0x07
     f4c:	90 91 e9 00 	lds	r25, 0x00E9
     f50:	98 87       	std	Y+8, r25	; 0x08
     f52:	8f ef       	ldi	r24, 0xFF	; 255
     f54:	89 87       	std	Y+9, r24	; 0x09
     f56:	9f ef       	ldi	r25, 0xFF	; 255
     f58:	9a 87       	std	Y+10, r25	; 0x0a
     f5a:	8f ef       	ldi	r24, 0xFF	; 255
     f5c:	8b 87       	std	Y+11, r24	; 0x0b
     f5e:	9f ef       	ldi	r25, 0xFF	; 255
     f60:	9c 87       	std	Y+12, r25	; 0x0c
     f62:	8f ef       	ldi	r24, 0xFF	; 255
     f64:	8d 87       	std	Y+13, r24	; 0x0d
     f66:	9f ef       	ldi	r25, 0xFF	; 255
     f68:	9e 87       	std	Y+14, r25	; 0x0e
     f6a:	8f ef       	ldi	r24, 0xFF	; 255
     f6c:	8f 87       	std	Y+15, r24	; 0x0f
     f6e:	9f ef       	ldi	r25, 0xFF	; 255
     f70:	98 8b       	std	Y+16, r25	; 0x10
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	99 85       	ldd	r25, Y+9	; 0x09
     f76:	89 0f       	add	r24, r25
     f78:	89 8b       	std	Y+17, r24	; 0x11
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	89 8f       	std	Y+25, r24	; 0x19
     f7e:	99 89       	ldd	r25, Y+17	; 0x11
     f80:	89 81       	ldd	r24, Y+1	; 0x01
     f82:	98 17       	cp	r25, r24
     f84:	08 f0       	brcs	.+2      	; 0xf88 <void_IntWaitControlFlagCount+0xba>
     f86:	19 8e       	std	Y+25, r1	; 0x19
     f88:	9a 81       	ldd	r25, Y+2	; 0x02
     f8a:	8a 85       	ldd	r24, Y+10	; 0x0a
     f8c:	98 0f       	add	r25, r24
     f8e:	9a 8b       	std	Y+18, r25	; 0x12
     f90:	91 e0       	ldi	r25, 0x01	; 1
     f92:	9a 8f       	std	Y+26, r25	; 0x1a
     f94:	8a 89       	ldd	r24, Y+18	; 0x12
     f96:	9a 81       	ldd	r25, Y+2	; 0x02
     f98:	89 17       	cp	r24, r25
     f9a:	08 f0       	brcs	.+2      	; 0xf9e <void_IntWaitControlFlagCount+0xd0>
     f9c:	1a 8e       	std	Y+26, r1	; 0x1a
     f9e:	89 8d       	ldd	r24, Y+25	; 0x19
     fa0:	9a 89       	ldd	r25, Y+18	; 0x12
     fa2:	89 0f       	add	r24, r25
     fa4:	8b 8f       	std	Y+27, r24	; 0x1b
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	8c 8f       	std	Y+28, r24	; 0x1c
     faa:	9b 8d       	ldd	r25, Y+27	; 0x1b
     fac:	8a 89       	ldd	r24, Y+18	; 0x12
     fae:	98 17       	cp	r25, r24
     fb0:	08 f0       	brcs	.+2      	; 0xfb4 <void_IntWaitControlFlagCount+0xe6>
     fb2:	1c 8e       	std	Y+28, r1	; 0x1c
     fb4:	9a 8d       	ldd	r25, Y+26	; 0x1a
     fb6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     fb8:	98 2b       	or	r25, r24
     fba:	9a 8f       	std	Y+26, r25	; 0x1a
     fbc:	9b 8d       	ldd	r25, Y+27	; 0x1b
     fbe:	9a 8b       	std	Y+18, r25	; 0x12
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	9b 85       	ldd	r25, Y+11	; 0x0b
     fc4:	89 0f       	add	r24, r25
     fc6:	8b 8b       	std	Y+19, r24	; 0x13
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	8d 8f       	std	Y+29, r24	; 0x1d
     fcc:	9b 89       	ldd	r25, Y+19	; 0x13
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
     fd0:	98 17       	cp	r25, r24
     fd2:	08 f0       	brcs	.+2      	; 0xfd6 <void_IntWaitControlFlagCount+0x108>
     fd4:	1d 8e       	std	Y+29, r1	; 0x1d
     fd6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     fd8:	8b 89       	ldd	r24, Y+19	; 0x13
     fda:	98 0f       	add	r25, r24
     fdc:	9e 8f       	std	Y+30, r25	; 0x1e
     fde:	91 e0       	ldi	r25, 0x01	; 1
     fe0:	9f 8f       	std	Y+31, r25	; 0x1f
     fe2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fe4:	9b 89       	ldd	r25, Y+19	; 0x13
     fe6:	89 17       	cp	r24, r25
     fe8:	08 f0       	brcs	.+2      	; 0xfec <void_IntWaitControlFlagCount+0x11e>
     fea:	1f 8e       	std	Y+31, r1	; 0x1f
     fec:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fee:	9f 8d       	ldd	r25, Y+31	; 0x1f
     ff0:	89 2b       	or	r24, r25
     ff2:	8d 8f       	std	Y+29, r24	; 0x1d
     ff4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ff6:	8b 8b       	std	Y+19, r24	; 0x13
     ff8:	9c 81       	ldd	r25, Y+4	; 0x04
     ffa:	8c 85       	ldd	r24, Y+12	; 0x0c
     ffc:	98 0f       	add	r25, r24
     ffe:	9c 8b       	std	Y+20, r25	; 0x14
    1000:	91 e0       	ldi	r25, 0x01	; 1
    1002:	98 a3       	std	Y+32, r25	; 0x20
    1004:	8c 89       	ldd	r24, Y+20	; 0x14
    1006:	9c 81       	ldd	r25, Y+4	; 0x04
    1008:	89 17       	cp	r24, r25
    100a:	08 f0       	brcs	.+2      	; 0x100e <void_IntWaitControlFlagCount+0x140>
    100c:	18 a2       	std	Y+32, r1	; 0x20
    100e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1010:	9c 89       	ldd	r25, Y+20	; 0x14
    1012:	89 0f       	add	r24, r25
    1014:	89 a3       	std	Y+33, r24	; 0x21
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	8a a3       	std	Y+34, r24	; 0x22
    101a:	99 a1       	ldd	r25, Y+33	; 0x21
    101c:	8c 89       	ldd	r24, Y+20	; 0x14
    101e:	98 17       	cp	r25, r24
    1020:	08 f0       	brcs	.+2      	; 0x1024 <void_IntWaitControlFlagCount+0x156>
    1022:	1a a2       	std	Y+34, r1	; 0x22
    1024:	98 a1       	ldd	r25, Y+32	; 0x20
    1026:	8a a1       	ldd	r24, Y+34	; 0x22
    1028:	98 2b       	or	r25, r24
    102a:	98 a3       	std	Y+32, r25	; 0x20
    102c:	99 a1       	ldd	r25, Y+33	; 0x21
    102e:	9c 8b       	std	Y+20, r25	; 0x14
    1030:	8d 81       	ldd	r24, Y+5	; 0x05
    1032:	9d 85       	ldd	r25, Y+13	; 0x0d
    1034:	89 0f       	add	r24, r25
    1036:	8d 8b       	std	Y+21, r24	; 0x15
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	8b a3       	std	Y+35, r24	; 0x23
    103c:	9d 89       	ldd	r25, Y+21	; 0x15
    103e:	8d 81       	ldd	r24, Y+5	; 0x05
    1040:	98 17       	cp	r25, r24
    1042:	08 f0       	brcs	.+2      	; 0x1046 <void_IntWaitControlFlagCount+0x178>
    1044:	1b a2       	std	Y+35, r1	; 0x23
    1046:	98 a1       	ldd	r25, Y+32	; 0x20
    1048:	8d 89       	ldd	r24, Y+21	; 0x15
    104a:	98 0f       	add	r25, r24
    104c:	9c a3       	std	Y+36, r25	; 0x24
    104e:	91 e0       	ldi	r25, 0x01	; 1
    1050:	9d a3       	std	Y+37, r25	; 0x25
    1052:	8c a1       	ldd	r24, Y+36	; 0x24
    1054:	9d 89       	ldd	r25, Y+21	; 0x15
    1056:	89 17       	cp	r24, r25
    1058:	08 f0       	brcs	.+2      	; 0x105c <void_IntWaitControlFlagCount+0x18e>
    105a:	1d a2       	std	Y+37, r1	; 0x25
    105c:	8b a1       	ldd	r24, Y+35	; 0x23
    105e:	9d a1       	ldd	r25, Y+37	; 0x25
    1060:	89 2b       	or	r24, r25
    1062:	8b a3       	std	Y+35, r24	; 0x23
    1064:	8c a1       	ldd	r24, Y+36	; 0x24
    1066:	8d 8b       	std	Y+21, r24	; 0x15
    1068:	9e 81       	ldd	r25, Y+6	; 0x06
    106a:	8e 85       	ldd	r24, Y+14	; 0x0e
    106c:	98 0f       	add	r25, r24
    106e:	9e 8b       	std	Y+22, r25	; 0x16
    1070:	91 e0       	ldi	r25, 0x01	; 1
    1072:	9e a3       	std	Y+38, r25	; 0x26
    1074:	8e 89       	ldd	r24, Y+22	; 0x16
    1076:	9e 81       	ldd	r25, Y+6	; 0x06
    1078:	89 17       	cp	r24, r25
    107a:	08 f0       	brcs	.+2      	; 0x107e <void_IntWaitControlFlagCount+0x1b0>
    107c:	1e a2       	std	Y+38, r1	; 0x26
    107e:	8b a1       	ldd	r24, Y+35	; 0x23
    1080:	9e 89       	ldd	r25, Y+22	; 0x16
    1082:	89 0f       	add	r24, r25
    1084:	8f a3       	std	Y+39, r24	; 0x27
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	88 a7       	std	Y+40, r24	; 0x28
    108a:	9f a1       	ldd	r25, Y+39	; 0x27
    108c:	8e 89       	ldd	r24, Y+22	; 0x16
    108e:	98 17       	cp	r25, r24
    1090:	08 f0       	brcs	.+2      	; 0x1094 <void_IntWaitControlFlagCount+0x1c6>
    1092:	18 a6       	std	Y+40, r1	; 0x28
    1094:	9e a1       	ldd	r25, Y+38	; 0x26
    1096:	88 a5       	ldd	r24, Y+40	; 0x28
    1098:	98 2b       	or	r25, r24
    109a:	9e a3       	std	Y+38, r25	; 0x26
    109c:	9f a1       	ldd	r25, Y+39	; 0x27
    109e:	9e 8b       	std	Y+22, r25	; 0x16
    10a0:	8f 81       	ldd	r24, Y+7	; 0x07
    10a2:	9f 85       	ldd	r25, Y+15	; 0x0f
    10a4:	89 0f       	add	r24, r25
    10a6:	8f 8b       	std	Y+23, r24	; 0x17
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	89 a7       	std	Y+41, r24	; 0x29
    10ac:	9f 89       	ldd	r25, Y+23	; 0x17
    10ae:	8f 81       	ldd	r24, Y+7	; 0x07
    10b0:	98 17       	cp	r25, r24
    10b2:	08 f0       	brcs	.+2      	; 0x10b6 <void_IntWaitControlFlagCount+0x1e8>
    10b4:	19 a6       	std	Y+41, r1	; 0x29
    10b6:	9e a1       	ldd	r25, Y+38	; 0x26
    10b8:	8f 89       	ldd	r24, Y+23	; 0x17
    10ba:	98 0f       	add	r25, r24
    10bc:	9a a7       	std	Y+42, r25	; 0x2a
    10be:	91 e0       	ldi	r25, 0x01	; 1
    10c0:	9b a7       	std	Y+43, r25	; 0x2b
    10c2:	8a a5       	ldd	r24, Y+42	; 0x2a
    10c4:	9f 89       	ldd	r25, Y+23	; 0x17
    10c6:	89 17       	cp	r24, r25
    10c8:	08 f0       	brcs	.+2      	; 0x10cc <void_IntWaitControlFlagCount+0x1fe>
    10ca:	1b a6       	std	Y+43, r1	; 0x2b
    10cc:	89 a5       	ldd	r24, Y+41	; 0x29
    10ce:	9b a5       	ldd	r25, Y+43	; 0x2b
    10d0:	89 2b       	or	r24, r25
    10d2:	89 a7       	std	Y+41, r24	; 0x29
    10d4:	8a a5       	ldd	r24, Y+42	; 0x2a
    10d6:	8f 8b       	std	Y+23, r24	; 0x17
    10d8:	98 85       	ldd	r25, Y+8	; 0x08
    10da:	88 89       	ldd	r24, Y+16	; 0x10
    10dc:	98 0f       	add	r25, r24
    10de:	98 8f       	std	Y+24, r25	; 0x18
    10e0:	89 a5       	ldd	r24, Y+41	; 0x29
    10e2:	98 8d       	ldd	r25, Y+24	; 0x18
    10e4:	89 0f       	add	r24, r25
    10e6:	88 8f       	std	Y+24, r24	; 0x18
    10e8:	29 89       	ldd	r18, Y+17	; 0x11
    10ea:	3a 89       	ldd	r19, Y+18	; 0x12
    10ec:	4b 89       	ldd	r20, Y+19	; 0x13
    10ee:	5c 89       	ldd	r21, Y+20	; 0x14
    10f0:	6d 89       	ldd	r22, Y+21	; 0x15
    10f2:	7e 89       	ldd	r23, Y+22	; 0x16
    10f4:	8f 89       	ldd	r24, Y+23	; 0x17
    10f6:	98 8d       	ldd	r25, Y+24	; 0x18
    10f8:	20 93 e2 00 	sts	0x00E2, r18
    10fc:	30 93 e3 00 	sts	0x00E3, r19
    1100:	40 93 e4 00 	sts	0x00E4, r20
    1104:	50 93 e5 00 	sts	0x00E5, r21
    1108:	60 93 e6 00 	sts	0x00E6, r22
    110c:	70 93 e7 00 	sts	0x00E7, r23
    1110:	80 93 e8 00 	sts	0x00E8, r24
    1114:	90 93 e9 00 	sts	0x00E9, r25
    1118:	06 c0       	rjmp	.+12     	; 0x1126 <void_IntWaitControlFlagCount+0x258>
	}
	else
	{
		gu8_FlagIfTimer0Used = u8_TIMER0_FLAG_NOT_USED ;
    111a:	83 e1       	ldi	r24, 0x13	; 19
    111c:	80 93 dd 00 	sts	0x00DD, r24
		gu8_FinishIntWaitFlag = u8_FINISH_INTERRUPT_WAITING ;
    1120:	86 e1       	ldi	r24, 0x16	; 22
    1122:	80 93 dc 00 	sts	0x00DC, r24
	}
}
    1126:	ab 96       	adiw	r28, 0x2b	; 43
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	f8 94       	cli
    112c:	de bf       	out	0x3e, r29	; 62
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	cd bf       	out	0x3d, r28	; 61
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <I2C_voidMasterInit>:
#include "I2C_private.h"
#include "I2C_interface.h"


void I2C_voidMasterInit(void) 
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62

		Ru8_TWBR = 0x70 ;
    1140:	e0 e2       	ldi	r30, 0x20	; 32
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 e7       	ldi	r24, 0x70	; 112
    1146:	80 83       	st	Z, r24
		CLR_BIT(Ru8_TWSR,u8_I2C_TWPS1) ;
    1148:	a1 e2       	ldi	r26, 0x21	; 33
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e1 e2       	ldi	r30, 0x21	; 33
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	8d 7f       	andi	r24, 0xFD	; 253
    1154:	8c 93       	st	X, r24
		CLR_BIT(Ru8_TWSR,u8_I2C_TWPS0) ;
    1156:	a1 e2       	ldi	r26, 0x21	; 33
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e1 e2       	ldi	r30, 0x21	; 33
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	8e 7f       	andi	r24, 0xFE	; 254
    1162:	8c 93       	st	X, r24

		Ru8_TWCR = ((u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWEA)|(u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWEN)) ; 
    1164:	e6 e5       	ldi	r30, 0x56	; 86
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	84 e4       	ldi	r24, 0x44	; 68
    116a:	80 83       	st	Z, r24
}
    116c:	cf 91       	pop	r28
    116e:	df 91       	pop	r29
    1170:	08 95       	ret

00001172 <I2C_u8MasterStartReq>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//return start state if it done successfully or not 
uint8_t I2C_u8MasterStartReq(void)  
{
    1172:	df 93       	push	r29
    1174:	cf 93       	push	r28
    1176:	0f 92       	push	r0
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_StartState = u8_I2C_START_FAILED ;  
    117c:	8a e0       	ldi	r24, 0x0A	; 10
    117e:	89 83       	std	Y+1, r24	; 0x01
	/*set start condion to begin the start req., make I2C Enable, and Clear int flag 
	 *so that we can send start condition (no operation can done without clearing int flag )
	 */
	Ru8_TWCR = ((u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWSTA)|(u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWEN)|(u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWINT)
    1180:	e6 e5       	ldi	r30, 0x56	; 86
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	84 ee       	ldi	r24, 0xE4	; 228
    1186:	80 83       	st	Z, r24
				|(u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWEA)) ;

	while(GET_BIT(Ru8_TWCR,u8_I2C_TWINT) != u8_I2C_FLAG_SET) ;
    1188:	e6 e5       	ldi	r30, 0x56	; 86
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	88 1f       	adc	r24, r24
    1190:	88 27       	eor	r24, r24
    1192:	88 1f       	adc	r24, r24
    1194:	81 30       	cpi	r24, 0x01	; 1
    1196:	c1 f7       	brne	.-16     	; 0x1188 <I2C_u8MasterStartReq+0x16>

	if((Ru8_TWSR & u8_I2C_MASK_PRESCALE)==u8_I2C_START_SEND_SUCCESSFULLY)  //start send successfully
    1198:	e1 e2       	ldi	r30, 0x21	; 33
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	88 2f       	mov	r24, r24
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	88 7f       	andi	r24, 0xF8	; 248
    11a4:	90 70       	andi	r25, 0x00	; 0
    11a6:	88 30       	cpi	r24, 0x08	; 8
    11a8:	91 05       	cpc	r25, r1
    11aa:	11 f4       	brne	.+4      	; 0x11b0 <I2C_u8MasterStartReq+0x3e>
	{
		u8_StartState = u8_I2C_START_DONE ;
    11ac:	8b e0       	ldi	r24, 0x0B	; 11
    11ae:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8_StartState ; 
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b2:	0f 90       	pop	r0
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	08 95       	ret

000011ba <I2C_u8MasterRepeatStart>:

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t I2C_u8MasterRepeatStart(void) 
{
    11ba:	df 93       	push	r29
    11bc:	cf 93       	push	r28
    11be:	0f 92       	push	r0
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_StartState = u8_I2C_START_FAILED ;
    11c4:	8a e0       	ldi	r24, 0x0A	; 10
    11c6:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Repeat start to the last address by clearing TWINT , make a start condition ,and make I2C enabled 
	 */
	Ru8_TWCR = ((u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWSTA)|(u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWEN)|(u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWINT)
    11c8:	e6 e5       	ldi	r30, 0x56	; 86
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	84 ee       	ldi	r24, 0xE4	; 228
    11ce:	80 83       	st	Z, r24
			   |(u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWEA)) ;
	while(GET_BIT(Ru8_TWCR,u8_I2C_TWINT) != u8_I2C_FLAG_SET) ;
    11d0:	e6 e5       	ldi	r30, 0x56	; 86
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	88 1f       	adc	r24, r24
    11d8:	88 27       	eor	r24, r24
    11da:	88 1f       	adc	r24, r24
    11dc:	81 30       	cpi	r24, 0x01	; 1
    11de:	c1 f7       	brne	.-16     	; 0x11d0 <I2C_u8MasterRepeatStart+0x16>
	if((Ru8_TWSR & u8_I2C_MASK_PRESCALE)==u8_I2C_REPEAT_START_SEND_SUCCESSFULLY)  //start send successfully
    11e0:	e1 e2       	ldi	r30, 0x21	; 33
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	88 2f       	mov	r24, r24
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	88 7f       	andi	r24, 0xF8	; 248
    11ec:	90 70       	andi	r25, 0x00	; 0
    11ee:	80 31       	cpi	r24, 0x10	; 16
    11f0:	91 05       	cpc	r25, r1
    11f2:	11 f4       	brne	.+4      	; 0x11f8 <I2C_u8MasterRepeatStart+0x3e>
	{
		u8_StartState = u8_I2C_START_DONE ;
    11f4:	8b e0       	ldi	r24, 0x0B	; 11
    11f6:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8_StartState ; 
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    11fa:	0f 90       	pop	r0
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	08 95       	ret

00001202 <I2C_voidMasterSendSLAWrite>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// master send a slave address and wanted to read from the SLA
void I2C_voidMasterSendSLAWrite(uint8_t u8_SLA)
{
    1202:	df 93       	push	r29
    1204:	cf 93       	push	r28
    1206:	0f 92       	push	r0
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
    120c:	89 83       	std	Y+1, r24	; 0x01
	//make TWDR set with wanted slave address and make LSB = 0 to be in write operation 
	Ru8_TWDR = (u8_SLA<<u8_I2C_TWD1)  ;
    120e:	e3 e2       	ldi	r30, 0x23	; 35
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	88 0f       	add	r24, r24
    1216:	80 83       	st	Z, r24
	/*make I2C Enable and Clear int flag so that we can load TWDR (no operation can done without clearing int flag) 
	 *and clear condition start bit */
	Ru8_TWCR = ((u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWEN) |(u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWINT)|(u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWEA)) ;
    1218:	e6 e5       	ldi	r30, 0x56	; 86
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	84 ec       	ldi	r24, 0xC4	; 196
    121e:	80 83       	st	Z, r24
	
	// wait until the Master sends the SLA address with write operation 
	while(GET_BIT(Ru8_TWCR,u8_I2C_TWINT) != u8_I2C_FLAG_SET) ; 
    1220:	e6 e5       	ldi	r30, 0x56	; 86
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	88 1f       	adc	r24, r24
    1228:	88 27       	eor	r24, r24
    122a:	88 1f       	adc	r24, r24
    122c:	81 30       	cpi	r24, 0x01	; 1
    122e:	c1 f7       	brne	.-16     	; 0x1220 <I2C_voidMasterSendSLAWrite+0x1e>
    1230:	13 c0       	rjmp	.+38     	; 0x1258 <I2C_voidMasterSendSLAWrite+0x56>
	
	// wait until Ack. is received and if Ack is not received repeat start and send address again until the Ack is received. 
	while(((Ru8_TWSR & u8_I2C_MASK_PRESCALE)!=u8_I2C_SLA_W_ACK_RECEIVED))
	{
		// master will repeat start in case ACK is not reached.  
		I2C_u8MasterRepeatStart() ;
    1232:	0e 94 dd 08 	call	0x11ba	; 0x11ba <I2C_u8MasterRepeatStart>
		
  	   //make TWDR set with wanted slave address and make LSB = 0 to be in write operation 
		Ru8_TWDR = (u8_SLA<<u8_I2C_SET_BIT_TO_ONE)  ;
    1236:	e3 e2       	ldi	r30, 0x23	; 35
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	89 81       	ldd	r24, Y+1	; 0x01
    123c:	88 0f       	add	r24, r24
    123e:	80 83       	st	Z, r24
		
	/*make I2C Enable and Clear int flag so that we can load TWDR (no operation can done without clearing int flag) 
	 *and clear condition start bit */
	 Ru8_TWCR = ((u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWEN) |(u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWINT)) ;
    1240:	e6 e5       	ldi	r30, 0x56	; 86
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	84 e8       	ldi	r24, 0x84	; 132
    1246:	80 83       	st	Z, r24
	
		// wait until the Master sends the SLA address with write operation 
		while(GET_BIT(Ru8_TWCR,u8_I2C_TWINT) != u8_I2C_FLAG_SET) ;
    1248:	e6 e5       	ldi	r30, 0x56	; 86
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	88 1f       	adc	r24, r24
    1250:	88 27       	eor	r24, r24
    1252:	88 1f       	adc	r24, r24
    1254:	81 30       	cpi	r24, 0x01	; 1
    1256:	c1 f7       	brne	.-16     	; 0x1248 <I2C_voidMasterSendSLAWrite+0x46>
	
	// wait until the Master sends the SLA address with write operation 
	while(GET_BIT(Ru8_TWCR,u8_I2C_TWINT) != u8_I2C_FLAG_SET) ; 
	
	// wait until Ack. is received and if Ack is not received repeat start and send address again until the Ack is received. 
	while(((Ru8_TWSR & u8_I2C_MASK_PRESCALE)!=u8_I2C_SLA_W_ACK_RECEIVED))
    1258:	e1 e2       	ldi	r30, 0x21	; 33
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	88 2f       	mov	r24, r24
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	88 7f       	andi	r24, 0xF8	; 248
    1264:	90 70       	andi	r25, 0x00	; 0
    1266:	88 31       	cpi	r24, 0x18	; 24
    1268:	91 05       	cpc	r25, r1
    126a:	19 f7       	brne	.-58     	; 0x1232 <I2C_voidMasterSendSLAWrite+0x30>
	
		// wait until the Master sends the SLA address with write operation 
		while(GET_BIT(Ru8_TWCR,u8_I2C_TWINT) != u8_I2C_FLAG_SET) ;
	}

}
    126c:	0f 90       	pop	r0
    126e:	cf 91       	pop	r28
    1270:	df 91       	pop	r29
    1272:	08 95       	ret

00001274 <I2C_voidMasterSendSLARead>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// master send a slave address and wanted to read from the SLA
void I2C_voidMasterSendSLARead(uint8_t u8_SLA)
{
    1274:	df 93       	push	r29
    1276:	cf 93       	push	r28
    1278:	0f 92       	push	r0
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
    127e:	89 83       	std	Y+1, r24	; 0x01
	//make TWDR set with wanted slave address and make LSB = 1 to be in read operation 
	Ru8_TWDR = (u8_SLA<<u8_I2C_TWD1)| u8_SET_READ_MODE  ;
    1280:	e3 e2       	ldi	r30, 0x23	; 35
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	89 81       	ldd	r24, Y+1	; 0x01
    1286:	88 2f       	mov	r24, r24
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	88 0f       	add	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	81 60       	ori	r24, 0x01	; 1
    1290:	80 83       	st	Z, r24
	
	//make I2C Enable and Clear int flag so that we can load TWDR (no operation can done without clearing int flag)
	Ru8_TWCR = ((u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWEN) |(u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWINT) |(u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWEA)) ;
    1292:	e6 e5       	ldi	r30, 0x56	; 86
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	84 ec       	ldi	r24, 0xC4	; 196
    1298:	80 83       	st	Z, r24
	
	// wait until the Master sends the SLA address with read operation 
	while(GET_BIT(Ru8_TWCR,u8_I2C_TWINT) != u8_I2C_FLAG_SET) ; 
    129a:	e6 e5       	ldi	r30, 0x56	; 86
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	88 1f       	adc	r24, r24
    12a2:	88 27       	eor	r24, r24
    12a4:	88 1f       	adc	r24, r24
    12a6:	81 30       	cpi	r24, 0x01	; 1
    12a8:	c1 f7       	brne	.-16     	; 0x129a <I2C_voidMasterSendSLARead+0x26>
    12aa:	17 c0       	rjmp	.+46     	; 0x12da <I2C_voidMasterSendSLARead+0x66>
	
	// wait until Ack. is received and if Ack is not received repeat start and send address again until the Ack is received. 
	while((Ru8_TWSR & u8_I2C_MASK_PRESCALE)!=u8_I2C_SLA_R_ACK_RECEIVED)
	{
		// master will repeat start in case ACK is not reached.  
		I2C_u8MasterRepeatStart() ; 
    12ac:	0e 94 dd 08 	call	0x11ba	; 0x11ba <I2C_u8MasterRepeatStart>

		//make TWDR set with wanted slave address and make LSB = 1 to be in read operation 
		Ru8_TWDR = (u8_SLA<<u8_I2C_TWD1)| u8_SET_READ_MODE  ;
    12b0:	e3 e2       	ldi	r30, 0x23	; 35
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
    12b6:	88 2f       	mov	r24, r24
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	81 60       	ori	r24, 0x01	; 1
    12c0:	80 83       	st	Z, r24
		
		//make I2C Enable and Clear int flag so that we can load TWDR (no operation can done without clearing int flag)
		Ru8_TWCR = ((u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWEN) |(u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWINT)) ; 
    12c2:	e6 e5       	ldi	r30, 0x56	; 86
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	84 e8       	ldi	r24, 0x84	; 132
    12c8:	80 83       	st	Z, r24
	
		// wait until the Master sends the SLA address with read operation 
		while(GET_BIT(Ru8_TWCR,u8_I2C_TWINT) != u8_I2C_FLAG_SET) ; 
    12ca:	e6 e5       	ldi	r30, 0x56	; 86
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	88 1f       	adc	r24, r24
    12d2:	88 27       	eor	r24, r24
    12d4:	88 1f       	adc	r24, r24
    12d6:	81 30       	cpi	r24, 0x01	; 1
    12d8:	c1 f7       	brne	.-16     	; 0x12ca <I2C_voidMasterSendSLARead+0x56>
	
	// wait until the Master sends the SLA address with read operation 
	while(GET_BIT(Ru8_TWCR,u8_I2C_TWINT) != u8_I2C_FLAG_SET) ; 
	
	// wait until Ack. is received and if Ack is not received repeat start and send address again until the Ack is received. 
	while((Ru8_TWSR & u8_I2C_MASK_PRESCALE)!=u8_I2C_SLA_R_ACK_RECEIVED)
    12da:	e1 e2       	ldi	r30, 0x21	; 33
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	88 2f       	mov	r24, r24
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	88 7f       	andi	r24, 0xF8	; 248
    12e6:	90 70       	andi	r25, 0x00	; 0
    12e8:	80 34       	cpi	r24, 0x40	; 64
    12ea:	91 05       	cpc	r25, r1
    12ec:	f9 f6       	brne	.-66     	; 0x12ac <I2C_voidMasterSendSLARead+0x38>
		Ru8_TWCR = ((u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWEN) |(u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWINT)) ; 
	
		// wait until the Master sends the SLA address with read operation 
		while(GET_BIT(Ru8_TWCR,u8_I2C_TWINT) != u8_I2C_FLAG_SET) ; 
	}
}
    12ee:	0f 90       	pop	r0
    12f0:	cf 91       	pop	r28
    12f2:	df 91       	pop	r29
    12f4:	08 95       	ret

000012f6 <I2C_voidMasterWriteData>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t I2C_voidMasterWriteData(uint8_t u8_DataWantedToSend)
{
    12f6:	df 93       	push	r29
    12f8:	cf 93       	push	r28
    12fa:	00 d0       	rcall	.+0      	; 0x12fc <I2C_voidMasterWriteData+0x6>
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_ErrorState = u8_I2C_INTIAL_VAL ;
    1302:	19 82       	std	Y+1, r1	; 0x01
	// put the data needed to send in the send reg. 
	Ru8_TWDR = u8_DataWantedToSend ; 
    1304:	e3 e2       	ldi	r30, 0x23	; 35
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	80 83       	st	Z, r24
	
	//make I2C Enable and Clear int flag so that we can load TWDR (no operation can done without clearing int flag)
	Ru8_TWCR = ((u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWEN) |(u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWINT)|(u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWEA)) ;
    130c:	e6 e5       	ldi	r30, 0x56	; 86
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	84 ec       	ldi	r24, 0xC4	; 196
    1312:	80 83       	st	Z, r24
	
	// wait until the Master sends the data send .
	while(GET_BIT(Ru8_TWCR,u8_I2C_TWINT) != u8_I2C_FLAG_SET) ; 
    1314:	e6 e5       	ldi	r30, 0x56	; 86
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	88 1f       	adc	r24, r24
    131c:	88 27       	eor	r24, r24
    131e:	88 1f       	adc	r24, r24
    1320:	81 30       	cpi	r24, 0x01	; 1
    1322:	c1 f7       	brne	.-16     	; 0x1314 <I2C_voidMasterWriteData+0x1e>
	
	if((Ru8_TWSR & u8_I2C_MASK_PRESCALE)== u8_I2C_DATA_W_ACK_RECEIVED)
    1324:	e1 e2       	ldi	r30, 0x21	; 33
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	88 2f       	mov	r24, r24
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	88 7f       	andi	r24, 0xF8	; 248
    1330:	90 70       	andi	r25, 0x00	; 0
    1332:	88 32       	cpi	r24, 0x28	; 40
    1334:	91 05       	cpc	r25, r1
    1336:	19 f4       	brne	.+6      	; 0x133e <I2C_voidMasterWriteData+0x48>
	{
		u8_ErrorState = u8_SENT_DATA_DONE ;
    1338:	80 e1       	ldi	r24, 0x10	; 16
    133a:	89 83       	std	Y+1, r24	; 0x01
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <I2C_voidMasterWriteData+0x4c>
	}
	else
	{
		u8_ErrorState = u8_SENT_DATA_FAILED ;
    133e:	8f e0       	ldi	r24, 0x0F	; 15
    1340:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_ErrorState ;
    1342:	89 81       	ldd	r24, Y+1	; 0x01
}
    1344:	0f 90       	pop	r0
    1346:	0f 90       	pop	r0
    1348:	cf 91       	pop	r28
    134a:	df 91       	pop	r29
    134c:	08 95       	ret

0000134e <I2C_u8MasterReadData>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//function that read from slave and return error state if the argument is wrong
uint8_t I2C_u8MasterReadData(uint8_t* u8_ReadData,uint8_t u8_ReceiveAgain)
{
    134e:	df 93       	push	r29
    1350:	cf 93       	push	r28
    1352:	00 d0       	rcall	.+0      	; 0x1354 <I2C_u8MasterReadData+0x6>
    1354:	00 d0       	rcall	.+0      	; 0x1356 <I2C_u8MasterReadData+0x8>
    1356:	cd b7       	in	r28, 0x3d	; 61
    1358:	de b7       	in	r29, 0x3e	; 62
    135a:	9b 83       	std	Y+3, r25	; 0x03
    135c:	8a 83       	std	Y+2, r24	; 0x02
    135e:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t u8_ErrorState = u8_I2C_INTIAL_VAL ;
    1360:	19 82       	std	Y+1, r1	; 0x01
	if((u8_ReceiveAgain==u8_I2C_RECEIVE_MORE_WORDS || u8_ReceiveAgain==u8_I2C_RECEIVE_COMPLETE) && u8_ReadData!=NULL_POINTER )
    1362:	8c 81       	ldd	r24, Y+4	; 0x04
    1364:	8b 30       	cpi	r24, 0x0B	; 11
    1366:	21 f0       	breq	.+8      	; 0x1370 <I2C_u8MasterReadData+0x22>
    1368:	8c 81       	ldd	r24, Y+4	; 0x04
    136a:	8a 30       	cpi	r24, 0x0A	; 10
    136c:	09 f0       	breq	.+2      	; 0x1370 <I2C_u8MasterReadData+0x22>
    136e:	4c c0       	rjmp	.+152    	; 0x1408 <I2C_u8MasterReadData+0xba>
    1370:	8a 81       	ldd	r24, Y+2	; 0x02
    1372:	9b 81       	ldd	r25, Y+3	; 0x03
    1374:	00 97       	sbiw	r24, 0x00	; 0
    1376:	09 f4       	brne	.+2      	; 0x137a <I2C_u8MasterReadData+0x2c>
    1378:	47 c0       	rjmp	.+142    	; 0x1408 <I2C_u8MasterReadData+0xba>
	{
		if(u8_ReceiveAgain==u8_I2C_RECEIVE_MORE_WORDS)
    137a:	8c 81       	ldd	r24, Y+4	; 0x04
    137c:	8b 30       	cpi	r24, 0x0B	; 11
    137e:	11 f5       	brne	.+68     	; 0x13c4 <I2C_u8MasterReadData+0x76>
		{
			/*make I2C Enable and Clear int flag so that we can load TWDR (no operation can done without clearing int flag)
			 *and make the slave ACK when the data received*/
			Ru8_TWCR = (u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWEN) |(u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWINT)|(u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWEA) ; 
    1380:	e6 e5       	ldi	r30, 0x56	; 86
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	84 ec       	ldi	r24, 0xC4	; 196
    1386:	80 83       	st	Z, r24
			// wait until the Master Receive the data sent .
			while(GET_BIT(Ru8_TWCR,u8_I2C_TWINT) != u8_I2C_FLAG_SET) ; 
    1388:	e6 e5       	ldi	r30, 0x56	; 86
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	88 1f       	adc	r24, r24
    1390:	88 27       	eor	r24, r24
    1392:	88 1f       	adc	r24, r24
    1394:	81 30       	cpi	r24, 0x01	; 1
    1396:	c1 f7       	brne	.-16     	; 0x1388 <I2C_u8MasterReadData+0x3a>

			if((Ru8_TWSR & u8_I2C_MASK_PRESCALE)== u8_I2C_DATA_R_ACK_RECEIVED_ACK_RETURN)
    1398:	e1 e2       	ldi	r30, 0x21	; 33
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	88 2f       	mov	r24, r24
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	88 7f       	andi	r24, 0xF8	; 248
    13a4:	90 70       	andi	r25, 0x00	; 0
    13a6:	80 35       	cpi	r24, 0x50	; 80
    13a8:	91 05       	cpc	r25, r1
    13aa:	49 f4       	brne	.+18     	; 0x13be <I2C_u8MasterReadData+0x70>
			{
				u8_ErrorState =u8_I2C_READ_DONE_SUCCESSFULLY ; 
    13ac:	8c e0       	ldi	r24, 0x0C	; 12
    13ae:	89 83       	std	Y+1, r24	; 0x01
				*u8_ReadData = Ru8_TWDR ;
    13b0:	e3 e2       	ldi	r30, 0x23	; 35
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	ea 81       	ldd	r30, Y+2	; 0x02
    13b8:	fb 81       	ldd	r31, Y+3	; 0x03
    13ba:	80 83       	st	Z, r24
    13bc:	27 c0       	rjmp	.+78     	; 0x140c <I2C_u8MasterReadData+0xbe>
			}
			else 
			{
				u8_ErrorState =u8_I2C_READ_FAILED; 
    13be:	8d e0       	ldi	r24, 0x0D	; 13
    13c0:	89 83       	std	Y+1, r24	; 0x01
    13c2:	24 c0       	rjmp	.+72     	; 0x140c <I2C_u8MasterReadData+0xbe>
			}
		}
		else 
		{
			//make I2C Enable and Clear int flag so that we can load TWDR (no operation can done without clearing int flag)
			Ru8_TWCR = (u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWEN) |(u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWINT) ; 
    13c4:	e6 e5       	ldi	r30, 0x56	; 86
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	84 e8       	ldi	r24, 0x84	; 132
    13ca:	80 83       	st	Z, r24
			while(GET_BIT(Ru8_TWCR,u8_I2C_TWINT) != u8_I2C_FLAG_SET) ; 
    13cc:	e6 e5       	ldi	r30, 0x56	; 86
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	88 1f       	adc	r24, r24
    13d4:	88 27       	eor	r24, r24
    13d6:	88 1f       	adc	r24, r24
    13d8:	81 30       	cpi	r24, 0x01	; 1
    13da:	c1 f7       	brne	.-16     	; 0x13cc <I2C_u8MasterReadData+0x7e>
			if((Ru8_TWSR & u8_I2C_MASK_PRESCALE)== u8_I2C_DATA_R_ACK_RECEIVED_ACK_NOT_RETURN)
    13dc:	e1 e2       	ldi	r30, 0x21	; 33
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	88 2f       	mov	r24, r24
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	88 7f       	andi	r24, 0xF8	; 248
    13e8:	90 70       	andi	r25, 0x00	; 0
    13ea:	88 35       	cpi	r24, 0x58	; 88
    13ec:	91 05       	cpc	r25, r1
    13ee:	49 f4       	brne	.+18     	; 0x1402 <I2C_u8MasterReadData+0xb4>
			{
				u8_ErrorState =u8_I2C_READ_DONE_SUCCESSFULLY ; 
    13f0:	8c e0       	ldi	r24, 0x0C	; 12
    13f2:	89 83       	std	Y+1, r24	; 0x01
				*u8_ReadData = Ru8_TWDR ;
    13f4:	e3 e2       	ldi	r30, 0x23	; 35
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	ea 81       	ldd	r30, Y+2	; 0x02
    13fc:	fb 81       	ldd	r31, Y+3	; 0x03
    13fe:	80 83       	st	Z, r24
    1400:	05 c0       	rjmp	.+10     	; 0x140c <I2C_u8MasterReadData+0xbe>
			}
			else 
			{
				u8_ErrorState =u8_I2C_READ_FAILED; 
    1402:	8d e0       	ldi	r24, 0x0D	; 13
    1404:	89 83       	std	Y+1, r24	; 0x01
    1406:	02 c0       	rjmp	.+4      	; 0x140c <I2C_u8MasterReadData+0xbe>


	}
	else 
	{
		u8_ErrorState = u8_I2C_ARG_ERROR ; 
    1408:	8e e0       	ldi	r24, 0x0E	; 14
    140a:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_ErrorState ;
    140c:	89 81       	ldd	r24, Y+1	; 0x01
}
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	cf 91       	pop	r28
    1418:	df 91       	pop	r29
    141a:	08 95       	ret

0000141c <I2C_voidMasterStop>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void I2C_voidMasterStop(void)
{	
    141c:	df 93       	push	r29
    141e:	cf 93       	push	r28
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
	/*make I2C Enable and Clear int flag so that we can load TWDR (no operation can done without clearing int flag)
	 * and set condion stop bit to stop sending */
	Ru8_TWCR = (u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWEN) |(u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWINT) | (u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWSTO) ; 	
    1424:	e6 e5       	ldi	r30, 0x56	; 86
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	84 e9       	ldi	r24, 0x94	; 148
    142a:	80 83       	st	Z, r24
}
    142c:	cf 91       	pop	r28
    142e:	df 91       	pop	r29
    1430:	08 95       	ret

00001432 <I2C_voidSlaveInit>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void I2C_voidSlaveInit(uint8_t u8_SlaveAddress)
{
    1432:	df 93       	push	r29
    1434:	cf 93       	push	r28
    1436:	0f 92       	push	r0
    1438:	cd b7       	in	r28, 0x3d	; 61
    143a:	de b7       	in	r29, 0x3e	; 62
    143c:	89 83       	std	Y+1, r24	; 0x01
	// make general call off and set slave address to intiate the slave mode of I2C
	Ru8_TWAR = u8_SlaveAddress << u8_I2C_TWA0 ;
    143e:	e2 e2       	ldi	r30, 0x22	; 34
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	89 81       	ldd	r24, Y+1	; 0x01
    1444:	88 0f       	add	r24, r24
    1446:	80 83       	st	Z, r24
	// initialize tWCR by setting TWEN to 1 to ENABLE the two wire interface and setting TWEA to 1 to Enable the slave to receive ack.
	Ru8_TWCR = ((u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWEN) |(u8_I2C_SET_BIT_TO_ONE<<u8_I2C_TWEA)) ;
    1448:	e6 e5       	ldi	r30, 0x56	; 86
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	84 e4       	ldi	r24, 0x44	; 68
    144e:	80 83       	st	Z, r24
}
    1450:	0f 90       	pop	r0
    1452:	cf 91       	pop	r28
    1454:	df 91       	pop	r29
    1456:	08 95       	ret

00001458 <I2C_slaveReadAckReturned>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //
uint8_t I2C_slaveReadAckReturned(void)
{
    1458:	df 93       	push	r29
    145a:	cf 93       	push	r28
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
	//set ack. , clear TWINT to wait the new actio and make the I2C enabled
	Ru8_TWCR = ((u8_I2C_SET_BIT_TO_ONE << u8_I2C_TWINT) | (u8_I2C_SET_BIT_TO_ONE<< u8_I2C_TWEA) | (u8_I2C_SET_BIT_TO_ONE << u8_I2C_TWEN));
    1460:	e6 e5       	ldi	r30, 0x56	; 86
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	84 ec       	ldi	r24, 0xC4	; 196
    1466:	80 83       	st	Z, r24
	//wait until data received
	while(GET_BIT(Ru8_TWCR,u8_I2C_TWINT) != u8_I2C_FLAG_SET);
    1468:	e6 e5       	ldi	r30, 0x56	; 86
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	88 1f       	adc	r24, r24
    1470:	88 27       	eor	r24, r24
    1472:	88 1f       	adc	r24, r24
    1474:	81 30       	cpi	r24, 0x01	; 1
    1476:	c1 f7       	brne	.-16     	; 0x1468 <I2C_slaveReadAckReturned+0x10>
	//return the data received
	return Ru8_TWDR;
    1478:	e3 e2       	ldi	r30, 0x23	; 35
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
}
    147e:	cf 91       	pop	r28
    1480:	df 91       	pop	r29
    1482:	08 95       	ret

00001484 <I2C_slaveAckRead>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void I2C_slaveAckRead(void)
{
    1484:	df 93       	push	r29
    1486:	cf 93       	push	r28
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
	//wait until the SLW+W received by slave
	while((Ru8_TWSR & 0xF8) != u8_I2C_SLAVE_ADDRESS_CALLED_SLAW) ;
    148c:	e1 e2       	ldi	r30, 0x21	; 33
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	88 2f       	mov	r24, r24
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	88 7f       	andi	r24, 0xF8	; 248
    1498:	90 70       	andi	r25, 0x00	; 0
    149a:	80 36       	cpi	r24, 0x60	; 96
    149c:	91 05       	cpc	r25, r1
    149e:	b1 f7       	brne	.-20     	; 0x148c <I2C_slaveAckRead+0x8>
	//set ack. , clear TWINT to wait the new action and make the I2C enabled
	Ru8_TWCR = ((u8_I2C_SET_BIT_TO_ONE << u8_I2C_TWINT) | (u8_I2C_SET_BIT_TO_ONE<< u8_I2C_TWEA) | (u8_I2C_SET_BIT_TO_ONE << u8_I2C_TWEN));
    14a0:	e6 e5       	ldi	r30, 0x56	; 86
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	84 ec       	ldi	r24, 0xC4	; 196
    14a6:	80 83       	st	Z, r24
	//wait until master receive the ACK.
	while  (GET_BIT(Ru8_TWCR,u8_I2C_TWINT) != u8_I2C_FLAG_SET);
    14a8:	e6 e5       	ldi	r30, 0x56	; 86
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	88 1f       	adc	r24, r24
    14b0:	88 27       	eor	r24, r24
    14b2:	88 1f       	adc	r24, r24
    14b4:	81 30       	cpi	r24, 0x01	; 1
    14b6:	c1 f7       	brne	.-16     	; 0x14a8 <I2C_slaveAckRead+0x24>

}
    14b8:	cf 91       	pop	r28
    14ba:	df 91       	pop	r29
    14bc:	08 95       	ret

000014be <DIO_u8SetPinVal>:
#include "dio_interface.h"
#include "dio_private.h"


uint8_t DIO_u8SetPinVal(uint8_t u8_PortNum,uint8_t u8_PinNum,uint8_t u8_PinState)     
{
    14be:	df 93       	push	r29
    14c0:	cf 93       	push	r28
    14c2:	00 d0       	rcall	.+0      	; 0x14c4 <DIO_u8SetPinVal+0x6>
    14c4:	00 d0       	rcall	.+0      	; 0x14c6 <DIO_u8SetPinVal+0x8>
    14c6:	00 d0       	rcall	.+0      	; 0x14c8 <DIO_u8SetPinVal+0xa>
    14c8:	cd b7       	in	r28, 0x3d	; 61
    14ca:	de b7       	in	r29, 0x3e	; 62
    14cc:	8a 83       	std	Y+2, r24	; 0x02
    14ce:	6b 83       	std	Y+3, r22	; 0x03
    14d0:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t u8_ErrorState = u8_DIO_OK;
    14d2:	82 e0       	ldi	r24, 0x02	; 2
    14d4:	89 83       	std	Y+1, r24	; 0x01
	if(u8_PinNum>=u8_DIO_PIN0 && u8_PinNum<=u8_DIO_PIN7)
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	88 30       	cpi	r24, 0x08	; 8
    14da:	08 f0       	brcs	.+2      	; 0x14de <DIO_u8SetPinVal+0x20>
    14dc:	ee c0       	rjmp	.+476    	; 0x16ba <DIO_u8SetPinVal+0x1fc>
	{
		switch(u8_PortNum)
    14de:	8a 81       	ldd	r24, Y+2	; 0x02
    14e0:	28 2f       	mov	r18, r24
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	3e 83       	std	Y+6, r19	; 0x06
    14e6:	2d 83       	std	Y+5, r18	; 0x05
    14e8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ea:	9e 81       	ldd	r25, Y+6	; 0x06
    14ec:	89 30       	cpi	r24, 0x09	; 9
    14ee:	91 05       	cpc	r25, r1
    14f0:	09 f4       	brne	.+2      	; 0x14f4 <DIO_u8SetPinVal+0x36>
    14f2:	4a c0       	rjmp	.+148    	; 0x1588 <DIO_u8SetPinVal+0xca>
    14f4:	2d 81       	ldd	r18, Y+5	; 0x05
    14f6:	3e 81       	ldd	r19, Y+6	; 0x06
    14f8:	2a 30       	cpi	r18, 0x0A	; 10
    14fa:	31 05       	cpc	r19, r1
    14fc:	34 f4       	brge	.+12     	; 0x150a <DIO_u8SetPinVal+0x4c>
    14fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1500:	9e 81       	ldd	r25, Y+6	; 0x06
    1502:	88 30       	cpi	r24, 0x08	; 8
    1504:	91 05       	cpc	r25, r1
    1506:	71 f0       	breq	.+28     	; 0x1524 <DIO_u8SetPinVal+0x66>
    1508:	d5 c0       	rjmp	.+426    	; 0x16b4 <DIO_u8SetPinVal+0x1f6>
    150a:	2d 81       	ldd	r18, Y+5	; 0x05
    150c:	3e 81       	ldd	r19, Y+6	; 0x06
    150e:	2a 30       	cpi	r18, 0x0A	; 10
    1510:	31 05       	cpc	r19, r1
    1512:	09 f4       	brne	.+2      	; 0x1516 <DIO_u8SetPinVal+0x58>
    1514:	6b c0       	rjmp	.+214    	; 0x15ec <DIO_u8SetPinVal+0x12e>
    1516:	8d 81       	ldd	r24, Y+5	; 0x05
    1518:	9e 81       	ldd	r25, Y+6	; 0x06
    151a:	8b 30       	cpi	r24, 0x0B	; 11
    151c:	91 05       	cpc	r25, r1
    151e:	09 f4       	brne	.+2      	; 0x1522 <DIO_u8SetPinVal+0x64>
    1520:	97 c0       	rjmp	.+302    	; 0x1650 <DIO_u8SetPinVal+0x192>
    1522:	c8 c0       	rjmp	.+400    	; 0x16b4 <DIO_u8SetPinVal+0x1f6>
		{
			case u8_DIO_PORTA: if(u8_PinState == u8_DIO_PIN_LOW)
    1524:	8c 81       	ldd	r24, Y+4	; 0x04
    1526:	88 23       	and	r24, r24
    1528:	a9 f4       	brne	.+42     	; 0x1554 <DIO_u8SetPinVal+0x96>
								{
									CLR_BIT(Ru8_PORTA,u8_PinNum) ;
    152a:	ab e3       	ldi	r26, 0x3B	; 59
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	eb e3       	ldi	r30, 0x3B	; 59
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	48 2f       	mov	r20, r24
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	02 2e       	mov	r0, r18
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <DIO_u8SetPinVal+0x8a>
    1544:	88 0f       	add	r24, r24
    1546:	99 1f       	adc	r25, r25
    1548:	0a 94       	dec	r0
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <DIO_u8SetPinVal+0x86>
    154c:	80 95       	com	r24
    154e:	84 23       	and	r24, r20
    1550:	8c 93       	st	X, r24
    1552:	b5 c0       	rjmp	.+362    	; 0x16be <DIO_u8SetPinVal+0x200>
								}
								else if(u8_PinState == u8_DIO_PIN_HIGH)
    1554:	8c 81       	ldd	r24, Y+4	; 0x04
    1556:	81 30       	cpi	r24, 0x01	; 1
    1558:	a1 f4       	brne	.+40     	; 0x1582 <DIO_u8SetPinVal+0xc4>
								{
									SET_BIT(Ru8_PORTA,u8_PinNum) ;
    155a:	ab e3       	ldi	r26, 0x3B	; 59
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	eb e3       	ldi	r30, 0x3B	; 59
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	48 2f       	mov	r20, r24
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	02 2e       	mov	r0, r18
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <DIO_u8SetPinVal+0xba>
    1574:	88 0f       	add	r24, r24
    1576:	99 1f       	adc	r25, r25
    1578:	0a 94       	dec	r0
    157a:	e2 f7       	brpl	.-8      	; 0x1574 <DIO_u8SetPinVal+0xb6>
    157c:	84 2b       	or	r24, r20
    157e:	8c 93       	st	X, r24
    1580:	9e c0       	rjmp	.+316    	; 0x16be <DIO_u8SetPinVal+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
    1582:	83 e0       	ldi	r24, 0x03	; 3
    1584:	89 83       	std	Y+1, r24	; 0x01
    1586:	9b c0       	rjmp	.+310    	; 0x16be <DIO_u8SetPinVal+0x200>
								}

							   break;
							   
			case u8_DIO_PORTB:	if(u8_PinState == u8_DIO_PIN_LOW)
    1588:	8c 81       	ldd	r24, Y+4	; 0x04
    158a:	88 23       	and	r24, r24
    158c:	a9 f4       	brne	.+42     	; 0x15b8 <DIO_u8SetPinVal+0xfa>
								{
									CLR_BIT(Ru8_PORTB,u8_PinNum) ;
    158e:	a8 e3       	ldi	r26, 0x38	; 56
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	e8 e3       	ldi	r30, 0x38	; 56
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	48 2f       	mov	r20, r24
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	02 2e       	mov	r0, r18
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <DIO_u8SetPinVal+0xee>
    15a8:	88 0f       	add	r24, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	0a 94       	dec	r0
    15ae:	e2 f7       	brpl	.-8      	; 0x15a8 <DIO_u8SetPinVal+0xea>
    15b0:	80 95       	com	r24
    15b2:	84 23       	and	r24, r20
    15b4:	8c 93       	st	X, r24
    15b6:	83 c0       	rjmp	.+262    	; 0x16be <DIO_u8SetPinVal+0x200>
								}
								else if(u8_PinState == u8_DIO_PIN_HIGH)
    15b8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ba:	81 30       	cpi	r24, 0x01	; 1
    15bc:	a1 f4       	brne	.+40     	; 0x15e6 <DIO_u8SetPinVal+0x128>
								{
									SET_BIT(Ru8_PORTB,u8_PinNum) ;
    15be:	a8 e3       	ldi	r26, 0x38	; 56
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	e8 e3       	ldi	r30, 0x38	; 56
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	48 2f       	mov	r20, r24
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	28 2f       	mov	r18, r24
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	02 2e       	mov	r0, r18
    15d6:	02 c0       	rjmp	.+4      	; 0x15dc <DIO_u8SetPinVal+0x11e>
    15d8:	88 0f       	add	r24, r24
    15da:	99 1f       	adc	r25, r25
    15dc:	0a 94       	dec	r0
    15de:	e2 f7       	brpl	.-8      	; 0x15d8 <DIO_u8SetPinVal+0x11a>
    15e0:	84 2b       	or	r24, r20
    15e2:	8c 93       	st	X, r24
    15e4:	6c c0       	rjmp	.+216    	; 0x16be <DIO_u8SetPinVal+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
    15e6:	83 e0       	ldi	r24, 0x03	; 3
    15e8:	89 83       	std	Y+1, r24	; 0x01
    15ea:	69 c0       	rjmp	.+210    	; 0x16be <DIO_u8SetPinVal+0x200>
								}
							   break;
							   
			case u8_DIO_PORTC:  if(u8_PinState == u8_DIO_PIN_LOW)
    15ec:	8c 81       	ldd	r24, Y+4	; 0x04
    15ee:	88 23       	and	r24, r24
    15f0:	a9 f4       	brne	.+42     	; 0x161c <DIO_u8SetPinVal+0x15e>
								{
									CLR_BIT(Ru8_PORTC,u8_PinNum) ;
    15f2:	a5 e3       	ldi	r26, 0x35	; 53
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e5 e3       	ldi	r30, 0x35	; 53
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	48 2f       	mov	r20, r24
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	02 2e       	mov	r0, r18
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <DIO_u8SetPinVal+0x152>
    160c:	88 0f       	add	r24, r24
    160e:	99 1f       	adc	r25, r25
    1610:	0a 94       	dec	r0
    1612:	e2 f7       	brpl	.-8      	; 0x160c <DIO_u8SetPinVal+0x14e>
    1614:	80 95       	com	r24
    1616:	84 23       	and	r24, r20
    1618:	8c 93       	st	X, r24
    161a:	51 c0       	rjmp	.+162    	; 0x16be <DIO_u8SetPinVal+0x200>
								}
								else if(u8_PinState == u8_DIO_PIN_HIGH)
    161c:	8c 81       	ldd	r24, Y+4	; 0x04
    161e:	81 30       	cpi	r24, 0x01	; 1
    1620:	a1 f4       	brne	.+40     	; 0x164a <DIO_u8SetPinVal+0x18c>
								{
									SET_BIT(Ru8_PORTC,u8_PinNum) ;
    1622:	a5 e3       	ldi	r26, 0x35	; 53
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	e5 e3       	ldi	r30, 0x35	; 53
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	48 2f       	mov	r20, r24
    162e:	8b 81       	ldd	r24, Y+3	; 0x03
    1630:	28 2f       	mov	r18, r24
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	02 2e       	mov	r0, r18
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <DIO_u8SetPinVal+0x182>
    163c:	88 0f       	add	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	0a 94       	dec	r0
    1642:	e2 f7       	brpl	.-8      	; 0x163c <DIO_u8SetPinVal+0x17e>
    1644:	84 2b       	or	r24, r20
    1646:	8c 93       	st	X, r24
    1648:	3a c0       	rjmp	.+116    	; 0x16be <DIO_u8SetPinVal+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
    164a:	83 e0       	ldi	r24, 0x03	; 3
    164c:	89 83       	std	Y+1, r24	; 0x01
    164e:	37 c0       	rjmp	.+110    	; 0x16be <DIO_u8SetPinVal+0x200>
								}

								break;
								
			case u8_DIO_PORTD: if(u8_PinState == u8_DIO_PIN_LOW)
    1650:	8c 81       	ldd	r24, Y+4	; 0x04
    1652:	88 23       	and	r24, r24
    1654:	a9 f4       	brne	.+42     	; 0x1680 <DIO_u8SetPinVal+0x1c2>
							   {
									CLR_BIT(Ru8_PORTD,u8_PinNum) ;
    1656:	a2 e3       	ldi	r26, 0x32	; 50
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	e2 e3       	ldi	r30, 0x32	; 50
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	48 2f       	mov	r20, r24
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
    1664:	28 2f       	mov	r18, r24
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	02 2e       	mov	r0, r18
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <DIO_u8SetPinVal+0x1b6>
    1670:	88 0f       	add	r24, r24
    1672:	99 1f       	adc	r25, r25
    1674:	0a 94       	dec	r0
    1676:	e2 f7       	brpl	.-8      	; 0x1670 <DIO_u8SetPinVal+0x1b2>
    1678:	80 95       	com	r24
    167a:	84 23       	and	r24, r20
    167c:	8c 93       	st	X, r24
    167e:	1f c0       	rjmp	.+62     	; 0x16be <DIO_u8SetPinVal+0x200>
							   }
							   else if(u8_PinState == u8_DIO_PIN_HIGH)
    1680:	8c 81       	ldd	r24, Y+4	; 0x04
    1682:	81 30       	cpi	r24, 0x01	; 1
    1684:	a1 f4       	brne	.+40     	; 0x16ae <DIO_u8SetPinVal+0x1f0>
							   {
									SET_BIT(Ru8_PORTD,u8_PinNum) ;
    1686:	a2 e3       	ldi	r26, 0x32	; 50
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	e2 e3       	ldi	r30, 0x32	; 50
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	48 2f       	mov	r20, r24
    1692:	8b 81       	ldd	r24, Y+3	; 0x03
    1694:	28 2f       	mov	r18, r24
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	02 2e       	mov	r0, r18
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <DIO_u8SetPinVal+0x1e6>
    16a0:	88 0f       	add	r24, r24
    16a2:	99 1f       	adc	r25, r25
    16a4:	0a 94       	dec	r0
    16a6:	e2 f7       	brpl	.-8      	; 0x16a0 <DIO_u8SetPinVal+0x1e2>
    16a8:	84 2b       	or	r24, r20
    16aa:	8c 93       	st	X, r24
    16ac:	08 c0       	rjmp	.+16     	; 0x16be <DIO_u8SetPinVal+0x200>
							   }
							   else 
							   {
									u8_ErrorState = u8_DIO_NOK ; 
    16ae:	83 e0       	ldi	r24, 0x03	; 3
    16b0:	89 83       	std	Y+1, r24	; 0x01
    16b2:	05 c0       	rjmp	.+10     	; 0x16be <DIO_u8SetPinVal+0x200>
							   }
								break;
								
			default          : u8_ErrorState = u8_DIO_NOK ; 
    16b4:	83 e0       	ldi	r24, 0x03	; 3
    16b6:	89 83       	std	Y+1, r24	; 0x01
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <DIO_u8SetPinVal+0x200>
								break ; 
		}
	}
	else 
	{
		u8_ErrorState = u8_DIO_NOK ; 
    16ba:	83 e0       	ldi	r24, 0x03	; 3
    16bc:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_ErrorState  ; 
    16be:	89 81       	ldd	r24, Y+1	; 0x01
}
    16c0:	26 96       	adiw	r28, 0x06	; 6
    16c2:	0f b6       	in	r0, 0x3f	; 63
    16c4:	f8 94       	cli
    16c6:	de bf       	out	0x3e, r29	; 62
    16c8:	0f be       	out	0x3f, r0	; 63
    16ca:	cd bf       	out	0x3d, r28	; 61
    16cc:	cf 91       	pop	r28
    16ce:	df 91       	pop	r29
    16d0:	08 95       	ret

000016d2 <DIO_u8SetPinDir>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8SetPinDir(uint8_t u8_PortNum,uint8_t u8_PinNum,uint8_t u8_PinDir)      
{
    16d2:	df 93       	push	r29
    16d4:	cf 93       	push	r28
    16d6:	00 d0       	rcall	.+0      	; 0x16d8 <DIO_u8SetPinDir+0x6>
    16d8:	00 d0       	rcall	.+0      	; 0x16da <DIO_u8SetPinDir+0x8>
    16da:	00 d0       	rcall	.+0      	; 0x16dc <DIO_u8SetPinDir+0xa>
    16dc:	cd b7       	in	r28, 0x3d	; 61
    16de:	de b7       	in	r29, 0x3e	; 62
    16e0:	8a 83       	std	Y+2, r24	; 0x02
    16e2:	6b 83       	std	Y+3, r22	; 0x03
    16e4:	4c 83       	std	Y+4, r20	; 0x04
	
	uint8_t u8_ErrorState = u8_DIO_OK;
    16e6:	82 e0       	ldi	r24, 0x02	; 2
    16e8:	89 83       	std	Y+1, r24	; 0x01
	if(u8_PinNum>=u8_DIO_PIN0 && u8_PinNum<=u8_DIO_PIN7)
    16ea:	8b 81       	ldd	r24, Y+3	; 0x03
    16ec:	88 30       	cpi	r24, 0x08	; 8
    16ee:	08 f0       	brcs	.+2      	; 0x16f2 <DIO_u8SetPinDir+0x20>
    16f0:	ee c0       	rjmp	.+476    	; 0x18ce <DIO_u8SetPinDir+0x1fc>
	{
		switch(u8_PortNum)
    16f2:	8a 81       	ldd	r24, Y+2	; 0x02
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	3e 83       	std	Y+6, r19	; 0x06
    16fa:	2d 83       	std	Y+5, r18	; 0x05
    16fc:	8d 81       	ldd	r24, Y+5	; 0x05
    16fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1700:	89 30       	cpi	r24, 0x09	; 9
    1702:	91 05       	cpc	r25, r1
    1704:	09 f4       	brne	.+2      	; 0x1708 <DIO_u8SetPinDir+0x36>
    1706:	4a c0       	rjmp	.+148    	; 0x179c <DIO_u8SetPinDir+0xca>
    1708:	2d 81       	ldd	r18, Y+5	; 0x05
    170a:	3e 81       	ldd	r19, Y+6	; 0x06
    170c:	2a 30       	cpi	r18, 0x0A	; 10
    170e:	31 05       	cpc	r19, r1
    1710:	34 f4       	brge	.+12     	; 0x171e <DIO_u8SetPinDir+0x4c>
    1712:	8d 81       	ldd	r24, Y+5	; 0x05
    1714:	9e 81       	ldd	r25, Y+6	; 0x06
    1716:	88 30       	cpi	r24, 0x08	; 8
    1718:	91 05       	cpc	r25, r1
    171a:	71 f0       	breq	.+28     	; 0x1738 <DIO_u8SetPinDir+0x66>
    171c:	d5 c0       	rjmp	.+426    	; 0x18c8 <DIO_u8SetPinDir+0x1f6>
    171e:	2d 81       	ldd	r18, Y+5	; 0x05
    1720:	3e 81       	ldd	r19, Y+6	; 0x06
    1722:	2a 30       	cpi	r18, 0x0A	; 10
    1724:	31 05       	cpc	r19, r1
    1726:	09 f4       	brne	.+2      	; 0x172a <DIO_u8SetPinDir+0x58>
    1728:	6b c0       	rjmp	.+214    	; 0x1800 <DIO_u8SetPinDir+0x12e>
    172a:	8d 81       	ldd	r24, Y+5	; 0x05
    172c:	9e 81       	ldd	r25, Y+6	; 0x06
    172e:	8b 30       	cpi	r24, 0x0B	; 11
    1730:	91 05       	cpc	r25, r1
    1732:	09 f4       	brne	.+2      	; 0x1736 <DIO_u8SetPinDir+0x64>
    1734:	97 c0       	rjmp	.+302    	; 0x1864 <DIO_u8SetPinDir+0x192>
    1736:	c8 c0       	rjmp	.+400    	; 0x18c8 <DIO_u8SetPinDir+0x1f6>
		{
			case u8_DIO_PORTA: if(u8_PinDir ==u8_DIO_OUTPUT_PIN)
    1738:	8c 81       	ldd	r24, Y+4	; 0x04
    173a:	81 30       	cpi	r24, 0x01	; 1
    173c:	a1 f4       	brne	.+40     	; 0x1766 <DIO_u8SetPinDir+0x94>
							   {
									SET_BIT(Ru8_DDRA,u8_PinNum) ;
    173e:	aa e3       	ldi	r26, 0x3A	; 58
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	ea e3       	ldi	r30, 0x3A	; 58
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	48 2f       	mov	r20, r24
    174a:	8b 81       	ldd	r24, Y+3	; 0x03
    174c:	28 2f       	mov	r18, r24
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	02 2e       	mov	r0, r18
    1756:	02 c0       	rjmp	.+4      	; 0x175c <DIO_u8SetPinDir+0x8a>
    1758:	88 0f       	add	r24, r24
    175a:	99 1f       	adc	r25, r25
    175c:	0a 94       	dec	r0
    175e:	e2 f7       	brpl	.-8      	; 0x1758 <DIO_u8SetPinDir+0x86>
    1760:	84 2b       	or	r24, r20
    1762:	8c 93       	st	X, r24
    1764:	b6 c0       	rjmp	.+364    	; 0x18d2 <DIO_u8SetPinDir+0x200>
							   }
							   else if(u8_PinDir ==u8_DIO_INPUT_PIN)
    1766:	8c 81       	ldd	r24, Y+4	; 0x04
    1768:	88 23       	and	r24, r24
    176a:	a9 f4       	brne	.+42     	; 0x1796 <DIO_u8SetPinDir+0xc4>
							   {
									CLR_BIT(Ru8_DDRA,u8_PinNum) ;
    176c:	aa e3       	ldi	r26, 0x3A	; 58
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	ea e3       	ldi	r30, 0x3A	; 58
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	48 2f       	mov	r20, r24
    1778:	8b 81       	ldd	r24, Y+3	; 0x03
    177a:	28 2f       	mov	r18, r24
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	02 2e       	mov	r0, r18
    1784:	02 c0       	rjmp	.+4      	; 0x178a <DIO_u8SetPinDir+0xb8>
    1786:	88 0f       	add	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	0a 94       	dec	r0
    178c:	e2 f7       	brpl	.-8      	; 0x1786 <DIO_u8SetPinDir+0xb4>
    178e:	80 95       	com	r24
    1790:	84 23       	and	r24, r20
    1792:	8c 93       	st	X, r24
    1794:	9e c0       	rjmp	.+316    	; 0x18d2 <DIO_u8SetPinDir+0x200>
							   }
							   else 
							   {
									u8_ErrorState = u8_DIO_NOK ; 
    1796:	83 e0       	ldi	r24, 0x03	; 3
    1798:	89 83       	std	Y+1, r24	; 0x01
    179a:	9b c0       	rjmp	.+310    	; 0x18d2 <DIO_u8SetPinDir+0x200>
							   }
							   break;
	
			case u8_DIO_PORTB: if(u8_PinDir ==u8_DIO_OUTPUT_PIN)
    179c:	8c 81       	ldd	r24, Y+4	; 0x04
    179e:	81 30       	cpi	r24, 0x01	; 1
    17a0:	a1 f4       	brne	.+40     	; 0x17ca <DIO_u8SetPinDir+0xf8>
							   {
									SET_BIT(Ru8_DDRB,u8_PinNum) ;
    17a2:	a7 e3       	ldi	r26, 0x37	; 55
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	e7 e3       	ldi	r30, 0x37	; 55
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	48 2f       	mov	r20, r24
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	28 2f       	mov	r18, r24
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	02 2e       	mov	r0, r18
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <DIO_u8SetPinDir+0xee>
    17bc:	88 0f       	add	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	0a 94       	dec	r0
    17c2:	e2 f7       	brpl	.-8      	; 0x17bc <DIO_u8SetPinDir+0xea>
    17c4:	84 2b       	or	r24, r20
    17c6:	8c 93       	st	X, r24
    17c8:	84 c0       	rjmp	.+264    	; 0x18d2 <DIO_u8SetPinDir+0x200>
							   }
							   else if(u8_PinDir ==u8_DIO_INPUT_PIN)
    17ca:	8c 81       	ldd	r24, Y+4	; 0x04
    17cc:	88 23       	and	r24, r24
    17ce:	a9 f4       	brne	.+42     	; 0x17fa <DIO_u8SetPinDir+0x128>
							   {
									CLR_BIT(Ru8_DDRB,u8_PinNum) ;
    17d0:	a7 e3       	ldi	r26, 0x37	; 55
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	e7 e3       	ldi	r30, 0x37	; 55
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	48 2f       	mov	r20, r24
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	28 2f       	mov	r18, r24
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	02 2e       	mov	r0, r18
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <DIO_u8SetPinDir+0x11c>
    17ea:	88 0f       	add	r24, r24
    17ec:	99 1f       	adc	r25, r25
    17ee:	0a 94       	dec	r0
    17f0:	e2 f7       	brpl	.-8      	; 0x17ea <DIO_u8SetPinDir+0x118>
    17f2:	80 95       	com	r24
    17f4:	84 23       	and	r24, r20
    17f6:	8c 93       	st	X, r24
    17f8:	6c c0       	rjmp	.+216    	; 0x18d2 <DIO_u8SetPinDir+0x200>
							   }
							   else 
							   {
									u8_ErrorState = u8_DIO_NOK ; 
    17fa:	83 e0       	ldi	r24, 0x03	; 3
    17fc:	89 83       	std	Y+1, r24	; 0x01
    17fe:	69 c0       	rjmp	.+210    	; 0x18d2 <DIO_u8SetPinDir+0x200>
							   }
							   break;
							   
			case u8_DIO_PORTC:  if(u8_PinDir ==u8_DIO_OUTPUT_PIN)
    1800:	8c 81       	ldd	r24, Y+4	; 0x04
    1802:	81 30       	cpi	r24, 0x01	; 1
    1804:	a1 f4       	brne	.+40     	; 0x182e <DIO_u8SetPinDir+0x15c>
							    {
									SET_BIT(Ru8_DDRC,u8_PinNum) ;
    1806:	a4 e3       	ldi	r26, 0x34	; 52
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	e4 e3       	ldi	r30, 0x34	; 52
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	48 2f       	mov	r20, r24
    1812:	8b 81       	ldd	r24, Y+3	; 0x03
    1814:	28 2f       	mov	r18, r24
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	02 2e       	mov	r0, r18
    181e:	02 c0       	rjmp	.+4      	; 0x1824 <DIO_u8SetPinDir+0x152>
    1820:	88 0f       	add	r24, r24
    1822:	99 1f       	adc	r25, r25
    1824:	0a 94       	dec	r0
    1826:	e2 f7       	brpl	.-8      	; 0x1820 <DIO_u8SetPinDir+0x14e>
    1828:	84 2b       	or	r24, r20
    182a:	8c 93       	st	X, r24
    182c:	52 c0       	rjmp	.+164    	; 0x18d2 <DIO_u8SetPinDir+0x200>
								}
								else if(u8_PinDir ==u8_DIO_INPUT_PIN)
    182e:	8c 81       	ldd	r24, Y+4	; 0x04
    1830:	88 23       	and	r24, r24
    1832:	a9 f4       	brne	.+42     	; 0x185e <DIO_u8SetPinDir+0x18c>
								{
									CLR_BIT(Ru8_DDRC,u8_PinNum) ;
    1834:	a4 e3       	ldi	r26, 0x34	; 52
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	e4 e3       	ldi	r30, 0x34	; 52
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	48 2f       	mov	r20, r24
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	28 2f       	mov	r18, r24
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	02 2e       	mov	r0, r18
    184c:	02 c0       	rjmp	.+4      	; 0x1852 <DIO_u8SetPinDir+0x180>
    184e:	88 0f       	add	r24, r24
    1850:	99 1f       	adc	r25, r25
    1852:	0a 94       	dec	r0
    1854:	e2 f7       	brpl	.-8      	; 0x184e <DIO_u8SetPinDir+0x17c>
    1856:	80 95       	com	r24
    1858:	84 23       	and	r24, r20
    185a:	8c 93       	st	X, r24
    185c:	3a c0       	rjmp	.+116    	; 0x18d2 <DIO_u8SetPinDir+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
    185e:	83 e0       	ldi	r24, 0x03	; 3
    1860:	89 83       	std	Y+1, r24	; 0x01
    1862:	37 c0       	rjmp	.+110    	; 0x18d2 <DIO_u8SetPinDir+0x200>
								}
								break;
		
			case u8_DIO_PORTD: if(u8_PinDir ==u8_DIO_OUTPUT_PIN)
    1864:	8c 81       	ldd	r24, Y+4	; 0x04
    1866:	81 30       	cpi	r24, 0x01	; 1
    1868:	a1 f4       	brne	.+40     	; 0x1892 <DIO_u8SetPinDir+0x1c0>
							    {
									SET_BIT(Ru8_DDRD,u8_PinNum) ;
    186a:	a1 e3       	ldi	r26, 0x31	; 49
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	e1 e3       	ldi	r30, 0x31	; 49
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	48 2f       	mov	r20, r24
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	28 2f       	mov	r18, r24
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	02 2e       	mov	r0, r18
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <DIO_u8SetPinDir+0x1b6>
    1884:	88 0f       	add	r24, r24
    1886:	99 1f       	adc	r25, r25
    1888:	0a 94       	dec	r0
    188a:	e2 f7       	brpl	.-8      	; 0x1884 <DIO_u8SetPinDir+0x1b2>
    188c:	84 2b       	or	r24, r20
    188e:	8c 93       	st	X, r24
    1890:	20 c0       	rjmp	.+64     	; 0x18d2 <DIO_u8SetPinDir+0x200>
								}
								else if(u8_PinDir ==u8_DIO_INPUT_PIN)
    1892:	8c 81       	ldd	r24, Y+4	; 0x04
    1894:	88 23       	and	r24, r24
    1896:	a9 f4       	brne	.+42     	; 0x18c2 <DIO_u8SetPinDir+0x1f0>
								{
									CLR_BIT(Ru8_DDRD,u8_PinNum) ;
    1898:	a1 e3       	ldi	r26, 0x31	; 49
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	e1 e3       	ldi	r30, 0x31	; 49
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	48 2f       	mov	r20, r24
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	02 2e       	mov	r0, r18
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <DIO_u8SetPinDir+0x1e4>
    18b2:	88 0f       	add	r24, r24
    18b4:	99 1f       	adc	r25, r25
    18b6:	0a 94       	dec	r0
    18b8:	e2 f7       	brpl	.-8      	; 0x18b2 <DIO_u8SetPinDir+0x1e0>
    18ba:	80 95       	com	r24
    18bc:	84 23       	and	r24, r20
    18be:	8c 93       	st	X, r24
    18c0:	08 c0       	rjmp	.+16     	; 0x18d2 <DIO_u8SetPinDir+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
    18c2:	83 e0       	ldi	r24, 0x03	; 3
    18c4:	89 83       	std	Y+1, r24	; 0x01
    18c6:	05 c0       	rjmp	.+10     	; 0x18d2 <DIO_u8SetPinDir+0x200>
								}
								break;
			
			default          : u8_ErrorState = u8_DIO_NOK ; 
    18c8:	83 e0       	ldi	r24, 0x03	; 3
    18ca:	89 83       	std	Y+1, r24	; 0x01
    18cc:	02 c0       	rjmp	.+4      	; 0x18d2 <DIO_u8SetPinDir+0x200>
								break ; 
		}
	}
	else 
	{
		u8_ErrorState = u8_DIO_NOK ; 
    18ce:	83 e0       	ldi	r24, 0x03	; 3
    18d0:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_ErrorState  ; 
    18d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    18d4:	26 96       	adiw	r28, 0x06	; 6
    18d6:	0f b6       	in	r0, 0x3f	; 63
    18d8:	f8 94       	cli
    18da:	de bf       	out	0x3e, r29	; 62
    18dc:	0f be       	out	0x3f, r0	; 63
    18de:	cd bf       	out	0x3d, r28	; 61
    18e0:	cf 91       	pop	r28
    18e2:	df 91       	pop	r29
    18e4:	08 95       	ret

000018e6 <DIO_u8SetPortVal>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8SetPortVal(uint8_t u8_PortNum,uint8_t u8_PortState)
{
    18e6:	df 93       	push	r29
    18e8:	cf 93       	push	r28
    18ea:	00 d0       	rcall	.+0      	; 0x18ec <DIO_u8SetPortVal+0x6>
    18ec:	00 d0       	rcall	.+0      	; 0x18ee <DIO_u8SetPortVal+0x8>
    18ee:	0f 92       	push	r0
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
    18f4:	8a 83       	std	Y+2, r24	; 0x02
    18f6:	6b 83       	std	Y+3, r22	; 0x03
		uint8_t u8_ErrorState = u8_DIO_OK;
    18f8:	82 e0       	ldi	r24, 0x02	; 2
    18fa:	89 83       	std	Y+1, r24	; 0x01

		switch(u8_PortNum)
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	3d 83       	std	Y+5, r19	; 0x05
    1904:	2c 83       	std	Y+4, r18	; 0x04
    1906:	8c 81       	ldd	r24, Y+4	; 0x04
    1908:	9d 81       	ldd	r25, Y+5	; 0x05
    190a:	89 30       	cpi	r24, 0x09	; 9
    190c:	91 05       	cpc	r25, r1
    190e:	d9 f0       	breq	.+54     	; 0x1946 <DIO_u8SetPortVal+0x60>
    1910:	2c 81       	ldd	r18, Y+4	; 0x04
    1912:	3d 81       	ldd	r19, Y+5	; 0x05
    1914:	2a 30       	cpi	r18, 0x0A	; 10
    1916:	31 05       	cpc	r19, r1
    1918:	34 f4       	brge	.+12     	; 0x1926 <DIO_u8SetPortVal+0x40>
    191a:	8c 81       	ldd	r24, Y+4	; 0x04
    191c:	9d 81       	ldd	r25, Y+5	; 0x05
    191e:	88 30       	cpi	r24, 0x08	; 8
    1920:	91 05       	cpc	r25, r1
    1922:	61 f0       	breq	.+24     	; 0x193c <DIO_u8SetPortVal+0x56>
    1924:	1f c0       	rjmp	.+62     	; 0x1964 <DIO_u8SetPortVal+0x7e>
    1926:	2c 81       	ldd	r18, Y+4	; 0x04
    1928:	3d 81       	ldd	r19, Y+5	; 0x05
    192a:	2a 30       	cpi	r18, 0x0A	; 10
    192c:	31 05       	cpc	r19, r1
    192e:	81 f0       	breq	.+32     	; 0x1950 <DIO_u8SetPortVal+0x6a>
    1930:	8c 81       	ldd	r24, Y+4	; 0x04
    1932:	9d 81       	ldd	r25, Y+5	; 0x05
    1934:	8b 30       	cpi	r24, 0x0B	; 11
    1936:	91 05       	cpc	r25, r1
    1938:	81 f0       	breq	.+32     	; 0x195a <DIO_u8SetPortVal+0x74>
    193a:	14 c0       	rjmp	.+40     	; 0x1964 <DIO_u8SetPortVal+0x7e>
		{
			case u8_DIO_PORTA: Ru8_PORTA = u8_PortState ;  break ;			   
    193c:	eb e3       	ldi	r30, 0x3B	; 59
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
    1942:	80 83       	st	Z, r24
    1944:	11 c0       	rjmp	.+34     	; 0x1968 <DIO_u8SetPortVal+0x82>
			case u8_DIO_PORTB: Ru8_PORTB = u8_PortState ;  break ;	
    1946:	e8 e3       	ldi	r30, 0x38	; 56
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	8b 81       	ldd	r24, Y+3	; 0x03
    194c:	80 83       	st	Z, r24
    194e:	0c c0       	rjmp	.+24     	; 0x1968 <DIO_u8SetPortVal+0x82>
			case u8_DIO_PORTC: Ru8_PORTC = u8_PortState ;  break ;	
    1950:	e5 e3       	ldi	r30, 0x35	; 53
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	80 83       	st	Z, r24
    1958:	07 c0       	rjmp	.+14     	; 0x1968 <DIO_u8SetPortVal+0x82>
			case u8_DIO_PORTD: Ru8_PORTD = u8_PortState ;  break ;	
    195a:	e2 e3       	ldi	r30, 0x32	; 50
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	8b 81       	ldd	r24, Y+3	; 0x03
    1960:	80 83       	st	Z, r24
    1962:	02 c0       	rjmp	.+4      	; 0x1968 <DIO_u8SetPortVal+0x82>
			default          : u8_ErrorState = u8_DIO_NOK; break ; 
    1964:	83 e0       	ldi	r24, 0x03	; 3
    1966:	89 83       	std	Y+1, r24	; 0x01
		}
		
	return u8_ErrorState  ; 
    1968:	89 81       	ldd	r24, Y+1	; 0x01
}
    196a:	0f 90       	pop	r0
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	0f 90       	pop	r0
    1972:	0f 90       	pop	r0
    1974:	cf 91       	pop	r28
    1976:	df 91       	pop	r29
    1978:	08 95       	ret

0000197a <DIO_u8SetPortDir>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8SetPortDir(uint8_t u8_PortNum,uint8_t u8_PortDir)
{
    197a:	df 93       	push	r29
    197c:	cf 93       	push	r28
    197e:	00 d0       	rcall	.+0      	; 0x1980 <DIO_u8SetPortDir+0x6>
    1980:	00 d0       	rcall	.+0      	; 0x1982 <DIO_u8SetPortDir+0x8>
    1982:	0f 92       	push	r0
    1984:	cd b7       	in	r28, 0x3d	; 61
    1986:	de b7       	in	r29, 0x3e	; 62
    1988:	8a 83       	std	Y+2, r24	; 0x02
    198a:	6b 83       	std	Y+3, r22	; 0x03
		uint8_t u8_ErrorState = u8_DIO_OK;
    198c:	82 e0       	ldi	r24, 0x02	; 2
    198e:	89 83       	std	Y+1, r24	; 0x01
		switch(u8_PortNum)
    1990:	8a 81       	ldd	r24, Y+2	; 0x02
    1992:	28 2f       	mov	r18, r24
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	3d 83       	std	Y+5, r19	; 0x05
    1998:	2c 83       	std	Y+4, r18	; 0x04
    199a:	8c 81       	ldd	r24, Y+4	; 0x04
    199c:	9d 81       	ldd	r25, Y+5	; 0x05
    199e:	89 30       	cpi	r24, 0x09	; 9
    19a0:	91 05       	cpc	r25, r1
    19a2:	d9 f0       	breq	.+54     	; 0x19da <DIO_u8SetPortDir+0x60>
    19a4:	2c 81       	ldd	r18, Y+4	; 0x04
    19a6:	3d 81       	ldd	r19, Y+5	; 0x05
    19a8:	2a 30       	cpi	r18, 0x0A	; 10
    19aa:	31 05       	cpc	r19, r1
    19ac:	34 f4       	brge	.+12     	; 0x19ba <DIO_u8SetPortDir+0x40>
    19ae:	8c 81       	ldd	r24, Y+4	; 0x04
    19b0:	9d 81       	ldd	r25, Y+5	; 0x05
    19b2:	88 30       	cpi	r24, 0x08	; 8
    19b4:	91 05       	cpc	r25, r1
    19b6:	61 f0       	breq	.+24     	; 0x19d0 <DIO_u8SetPortDir+0x56>
    19b8:	1f c0       	rjmp	.+62     	; 0x19f8 <DIO_u8SetPortDir+0x7e>
    19ba:	2c 81       	ldd	r18, Y+4	; 0x04
    19bc:	3d 81       	ldd	r19, Y+5	; 0x05
    19be:	2a 30       	cpi	r18, 0x0A	; 10
    19c0:	31 05       	cpc	r19, r1
    19c2:	81 f0       	breq	.+32     	; 0x19e4 <DIO_u8SetPortDir+0x6a>
    19c4:	8c 81       	ldd	r24, Y+4	; 0x04
    19c6:	9d 81       	ldd	r25, Y+5	; 0x05
    19c8:	8b 30       	cpi	r24, 0x0B	; 11
    19ca:	91 05       	cpc	r25, r1
    19cc:	81 f0       	breq	.+32     	; 0x19ee <DIO_u8SetPortDir+0x74>
    19ce:	14 c0       	rjmp	.+40     	; 0x19f8 <DIO_u8SetPortDir+0x7e>
		{
			case u8_DIO_PORTA: Ru8_DDRA = u8_PortDir ;     break ;			   
    19d0:	ea e3       	ldi	r30, 0x3A	; 58
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	8b 81       	ldd	r24, Y+3	; 0x03
    19d6:	80 83       	st	Z, r24
    19d8:	11 c0       	rjmp	.+34     	; 0x19fc <DIO_u8SetPortDir+0x82>
			case u8_DIO_PORTB: Ru8_DDRB = u8_PortDir ;     break ;	
    19da:	e7 e3       	ldi	r30, 0x37	; 55
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	8b 81       	ldd	r24, Y+3	; 0x03
    19e0:	80 83       	st	Z, r24
    19e2:	0c c0       	rjmp	.+24     	; 0x19fc <DIO_u8SetPortDir+0x82>
			case u8_DIO_PORTC: Ru8_DDRC = u8_PortDir ;     break ;	
    19e4:	e4 e3       	ldi	r30, 0x34	; 52
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ea:	80 83       	st	Z, r24
    19ec:	07 c0       	rjmp	.+14     	; 0x19fc <DIO_u8SetPortDir+0x82>
			case u8_DIO_PORTD: Ru8_DDRD = u8_PortDir ;     break ;	
    19ee:	e1 e3       	ldi	r30, 0x31	; 49
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	8b 81       	ldd	r24, Y+3	; 0x03
    19f4:	80 83       	st	Z, r24
    19f6:	02 c0       	rjmp	.+4      	; 0x19fc <DIO_u8SetPortDir+0x82>
			default          : u8_ErrorState = u8_DIO_NOK; break ; 
    19f8:	83 e0       	ldi	r24, 0x03	; 3
    19fa:	89 83       	std	Y+1, r24	; 0x01
		}
		
	return u8_ErrorState  ; 
    19fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    19fe:	0f 90       	pop	r0
    1a00:	0f 90       	pop	r0
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	cf 91       	pop	r28
    1a0a:	df 91       	pop	r29
    1a0c:	08 95       	ret

00001a0e <DIO_u8GetPinVal>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8GetPinVal(uint8_t u8_PortNum,uint8_t u8_PinNum,uint8_t* pu8_ReturnedPinVal)      
{
    1a0e:	df 93       	push	r29
    1a10:	cf 93       	push	r28
    1a12:	cd b7       	in	r28, 0x3d	; 61
    1a14:	de b7       	in	r29, 0x3e	; 62
    1a16:	27 97       	sbiw	r28, 0x07	; 7
    1a18:	0f b6       	in	r0, 0x3f	; 63
    1a1a:	f8 94       	cli
    1a1c:	de bf       	out	0x3e, r29	; 62
    1a1e:	0f be       	out	0x3f, r0	; 63
    1a20:	cd bf       	out	0x3d, r28	; 61
    1a22:	8a 83       	std	Y+2, r24	; 0x02
    1a24:	6b 83       	std	Y+3, r22	; 0x03
    1a26:	5d 83       	std	Y+5, r21	; 0x05
    1a28:	4c 83       	std	Y+4, r20	; 0x04
		uint8_t u8_ErrorState = u8_DIO_OK;
    1a2a:	82 e0       	ldi	r24, 0x02	; 2
    1a2c:	89 83       	std	Y+1, r24	; 0x01
		if(u8_PinNum>=u8_DIO_PIN0 && u8_PinNum<=u8_DIO_PIN7)
    1a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a30:	88 30       	cpi	r24, 0x08	; 8
    1a32:	08 f0       	brcs	.+2      	; 0x1a36 <DIO_u8GetPinVal+0x28>
    1a34:	74 c0       	rjmp	.+232    	; 0x1b1e <DIO_u8GetPinVal+0x110>
		{
			switch(u8_PortNum)
    1a36:	8a 81       	ldd	r24, Y+2	; 0x02
    1a38:	28 2f       	mov	r18, r24
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	3f 83       	std	Y+7, r19	; 0x07
    1a3e:	2e 83       	std	Y+6, r18	; 0x06
    1a40:	4e 81       	ldd	r20, Y+6	; 0x06
    1a42:	5f 81       	ldd	r21, Y+7	; 0x07
    1a44:	49 30       	cpi	r20, 0x09	; 9
    1a46:	51 05       	cpc	r21, r1
    1a48:	59 f1       	breq	.+86     	; 0x1aa0 <DIO_u8GetPinVal+0x92>
    1a4a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a4c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a4e:	8a 30       	cpi	r24, 0x0A	; 10
    1a50:	91 05       	cpc	r25, r1
    1a52:	34 f4       	brge	.+12     	; 0x1a60 <DIO_u8GetPinVal+0x52>
    1a54:	2e 81       	ldd	r18, Y+6	; 0x06
    1a56:	3f 81       	ldd	r19, Y+7	; 0x07
    1a58:	28 30       	cpi	r18, 0x08	; 8
    1a5a:	31 05       	cpc	r19, r1
    1a5c:	69 f0       	breq	.+26     	; 0x1a78 <DIO_u8GetPinVal+0x6a>
    1a5e:	5c c0       	rjmp	.+184    	; 0x1b18 <DIO_u8GetPinVal+0x10a>
    1a60:	4e 81       	ldd	r20, Y+6	; 0x06
    1a62:	5f 81       	ldd	r21, Y+7	; 0x07
    1a64:	4a 30       	cpi	r20, 0x0A	; 10
    1a66:	51 05       	cpc	r21, r1
    1a68:	79 f1       	breq	.+94     	; 0x1ac8 <DIO_u8GetPinVal+0xba>
    1a6a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a6c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a6e:	8b 30       	cpi	r24, 0x0B	; 11
    1a70:	91 05       	cpc	r25, r1
    1a72:	09 f4       	brne	.+2      	; 0x1a76 <DIO_u8GetPinVal+0x68>
    1a74:	3d c0       	rjmp	.+122    	; 0x1af0 <DIO_u8GetPinVal+0xe2>
    1a76:	50 c0       	rjmp	.+160    	; 0x1b18 <DIO_u8GetPinVal+0x10a>
			{
				case u8_DIO_PORTA: (*pu8_ReturnedPinVal) = GET_BIT(Ru8_PINA,u8_PinNum)  ; break ;
    1a78:	e9 e3       	ldi	r30, 0x39	; 57
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	28 2f       	mov	r18, r24
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	8b 81       	ldd	r24, Y+3	; 0x03
    1a84:	88 2f       	mov	r24, r24
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	a9 01       	movw	r20, r18
    1a8a:	02 c0       	rjmp	.+4      	; 0x1a90 <DIO_u8GetPinVal+0x82>
    1a8c:	55 95       	asr	r21
    1a8e:	47 95       	ror	r20
    1a90:	8a 95       	dec	r24
    1a92:	e2 f7       	brpl	.-8      	; 0x1a8c <DIO_u8GetPinVal+0x7e>
    1a94:	ca 01       	movw	r24, r20
    1a96:	81 70       	andi	r24, 0x01	; 1
    1a98:	ec 81       	ldd	r30, Y+4	; 0x04
    1a9a:	fd 81       	ldd	r31, Y+5	; 0x05
    1a9c:	80 83       	st	Z, r24
    1a9e:	41 c0       	rjmp	.+130    	; 0x1b22 <DIO_u8GetPinVal+0x114>
				case u8_DIO_PORTB: (*pu8_ReturnedPinVal) = GET_BIT(Ru8_PINB,u8_PinNum)  ; break ;
    1aa0:	e6 e3       	ldi	r30, 0x36	; 54
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	28 2f       	mov	r18, r24
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1aac:	88 2f       	mov	r24, r24
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	a9 01       	movw	r20, r18
    1ab2:	02 c0       	rjmp	.+4      	; 0x1ab8 <DIO_u8GetPinVal+0xaa>
    1ab4:	55 95       	asr	r21
    1ab6:	47 95       	ror	r20
    1ab8:	8a 95       	dec	r24
    1aba:	e2 f7       	brpl	.-8      	; 0x1ab4 <DIO_u8GetPinVal+0xa6>
    1abc:	ca 01       	movw	r24, r20
    1abe:	81 70       	andi	r24, 0x01	; 1
    1ac0:	ec 81       	ldd	r30, Y+4	; 0x04
    1ac2:	fd 81       	ldd	r31, Y+5	; 0x05
    1ac4:	80 83       	st	Z, r24
    1ac6:	2d c0       	rjmp	.+90     	; 0x1b22 <DIO_u8GetPinVal+0x114>
				case u8_DIO_PORTC: (*pu8_ReturnedPinVal) = GET_BIT(Ru8_PINC,u8_PinNum)  ; break ;
    1ac8:	e3 e3       	ldi	r30, 0x33	; 51
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	28 2f       	mov	r18, r24
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad4:	88 2f       	mov	r24, r24
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	a9 01       	movw	r20, r18
    1ada:	02 c0       	rjmp	.+4      	; 0x1ae0 <DIO_u8GetPinVal+0xd2>
    1adc:	55 95       	asr	r21
    1ade:	47 95       	ror	r20
    1ae0:	8a 95       	dec	r24
    1ae2:	e2 f7       	brpl	.-8      	; 0x1adc <DIO_u8GetPinVal+0xce>
    1ae4:	ca 01       	movw	r24, r20
    1ae6:	81 70       	andi	r24, 0x01	; 1
    1ae8:	ec 81       	ldd	r30, Y+4	; 0x04
    1aea:	fd 81       	ldd	r31, Y+5	; 0x05
    1aec:	80 83       	st	Z, r24
    1aee:	19 c0       	rjmp	.+50     	; 0x1b22 <DIO_u8GetPinVal+0x114>
				case u8_DIO_PORTD: (*pu8_ReturnedPinVal) = GET_BIT(Ru8_PIND,u8_PinNum)  ; break ;
    1af0:	e0 e3       	ldi	r30, 0x30	; 48
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	28 2f       	mov	r18, r24
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	8b 81       	ldd	r24, Y+3	; 0x03
    1afc:	88 2f       	mov	r24, r24
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	a9 01       	movw	r20, r18
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <DIO_u8GetPinVal+0xfa>
    1b04:	55 95       	asr	r21
    1b06:	47 95       	ror	r20
    1b08:	8a 95       	dec	r24
    1b0a:	e2 f7       	brpl	.-8      	; 0x1b04 <DIO_u8GetPinVal+0xf6>
    1b0c:	ca 01       	movw	r24, r20
    1b0e:	81 70       	andi	r24, 0x01	; 1
    1b10:	ec 81       	ldd	r30, Y+4	; 0x04
    1b12:	fd 81       	ldd	r31, Y+5	; 0x05
    1b14:	80 83       	st	Z, r24
    1b16:	05 c0       	rjmp	.+10     	; 0x1b22 <DIO_u8GetPinVal+0x114>
				default          : u8_ErrorState = u8_DIO_NOK; 							 break ; 
    1b18:	83 e0       	ldi	r24, 0x03	; 3
    1b1a:	89 83       	std	Y+1, r24	; 0x01
    1b1c:	02 c0       	rjmp	.+4      	; 0x1b22 <DIO_u8GetPinVal+0x114>
			}
		}
		else 
		{
			u8_ErrorState = u8_DIO_NOK;
    1b1e:	83 e0       	ldi	r24, 0x03	; 3
    1b20:	89 83       	std	Y+1, r24	; 0x01
		}
	return u8_ErrorState  ; 
    1b22:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b24:	27 96       	adiw	r28, 0x07	; 7
    1b26:	0f b6       	in	r0, 0x3f	; 63
    1b28:	f8 94       	cli
    1b2a:	de bf       	out	0x3e, r29	; 62
    1b2c:	0f be       	out	0x3f, r0	; 63
    1b2e:	cd bf       	out	0x3d, r28	; 61
    1b30:	cf 91       	pop	r28
    1b32:	df 91       	pop	r29
    1b34:	08 95       	ret

00001b36 <DIO_u8GetPortVal>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8GetPortVal(uint8_t u8_PortNum,uint8_t* pu8_ReturnedPortVal)           
{
    1b36:	df 93       	push	r29
    1b38:	cf 93       	push	r28
    1b3a:	00 d0       	rcall	.+0      	; 0x1b3c <DIO_u8GetPortVal+0x6>
    1b3c:	00 d0       	rcall	.+0      	; 0x1b3e <DIO_u8GetPortVal+0x8>
    1b3e:	00 d0       	rcall	.+0      	; 0x1b40 <DIO_u8GetPortVal+0xa>
    1b40:	cd b7       	in	r28, 0x3d	; 61
    1b42:	de b7       	in	r29, 0x3e	; 62
    1b44:	8a 83       	std	Y+2, r24	; 0x02
    1b46:	7c 83       	std	Y+4, r23	; 0x04
    1b48:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8_ErrorState = u8_DIO_OK;
    1b4a:	82 e0       	ldi	r24, 0x02	; 2
    1b4c:	89 83       	std	Y+1, r24	; 0x01

	switch(u8_PortNum)
    1b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b50:	28 2f       	mov	r18, r24
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	3e 83       	std	Y+6, r19	; 0x06
    1b56:	2d 83       	std	Y+5, r18	; 0x05
    1b58:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b5c:	89 30       	cpi	r24, 0x09	; 9
    1b5e:	91 05       	cpc	r25, r1
    1b60:	e9 f0       	breq	.+58     	; 0x1b9c <DIO_u8GetPortVal+0x66>
    1b62:	2d 81       	ldd	r18, Y+5	; 0x05
    1b64:	3e 81       	ldd	r19, Y+6	; 0x06
    1b66:	2a 30       	cpi	r18, 0x0A	; 10
    1b68:	31 05       	cpc	r19, r1
    1b6a:	34 f4       	brge	.+12     	; 0x1b78 <DIO_u8GetPortVal+0x42>
    1b6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b70:	88 30       	cpi	r24, 0x08	; 8
    1b72:	91 05       	cpc	r25, r1
    1b74:	61 f0       	breq	.+24     	; 0x1b8e <DIO_u8GetPortVal+0x58>
    1b76:	27 c0       	rjmp	.+78     	; 0x1bc6 <DIO_u8GetPortVal+0x90>
    1b78:	2d 81       	ldd	r18, Y+5	; 0x05
    1b7a:	3e 81       	ldd	r19, Y+6	; 0x06
    1b7c:	2a 30       	cpi	r18, 0x0A	; 10
    1b7e:	31 05       	cpc	r19, r1
    1b80:	a1 f0       	breq	.+40     	; 0x1baa <DIO_u8GetPortVal+0x74>
    1b82:	8d 81       	ldd	r24, Y+5	; 0x05
    1b84:	9e 81       	ldd	r25, Y+6	; 0x06
    1b86:	8b 30       	cpi	r24, 0x0B	; 11
    1b88:	91 05       	cpc	r25, r1
    1b8a:	b1 f0       	breq	.+44     	; 0x1bb8 <DIO_u8GetPortVal+0x82>
    1b8c:	1c c0       	rjmp	.+56     	; 0x1bc6 <DIO_u8GetPortVal+0x90>
	{
		case u8_DIO_PORTA: (*pu8_ReturnedPortVal) = Ru8_PINA ;  break ;
    1b8e:	e9 e3       	ldi	r30, 0x39	; 57
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	eb 81       	ldd	r30, Y+3	; 0x03
    1b96:	fc 81       	ldd	r31, Y+4	; 0x04
    1b98:	80 83       	st	Z, r24
    1b9a:	17 c0       	rjmp	.+46     	; 0x1bca <DIO_u8GetPortVal+0x94>
		case u8_DIO_PORTB: (*pu8_ReturnedPortVal) = Ru8_PINB ;  break ;
    1b9c:	e6 e3       	ldi	r30, 0x36	; 54
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ba4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ba6:	80 83       	st	Z, r24
    1ba8:	10 c0       	rjmp	.+32     	; 0x1bca <DIO_u8GetPortVal+0x94>
		case u8_DIO_PORTC: (*pu8_ReturnedPortVal) = Ru8_PINC ;  break ;
    1baa:	e3 e3       	ldi	r30, 0x33	; 51
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	eb 81       	ldd	r30, Y+3	; 0x03
    1bb2:	fc 81       	ldd	r31, Y+4	; 0x04
    1bb4:	80 83       	st	Z, r24
    1bb6:	09 c0       	rjmp	.+18     	; 0x1bca <DIO_u8GetPortVal+0x94>
		case u8_DIO_PORTD: (*pu8_ReturnedPortVal) = Ru8_PIND ;  break ;
    1bb8:	e0 e3       	ldi	r30, 0x30	; 48
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	eb 81       	ldd	r30, Y+3	; 0x03
    1bc0:	fc 81       	ldd	r31, Y+4	; 0x04
    1bc2:	80 83       	st	Z, r24
    1bc4:	02 c0       	rjmp	.+4      	; 0x1bca <DIO_u8GetPortVal+0x94>
		default          :  u8_ErrorState = u8_DIO_NOK; 	    break ;
    1bc6:	83 e0       	ldi	r24, 0x03	; 3
    1bc8:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8_ErrorState  ; 
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bcc:	26 96       	adiw	r28, 0x06	; 6
    1bce:	0f b6       	in	r0, 0x3f	; 63
    1bd0:	f8 94       	cli
    1bd2:	de bf       	out	0x3e, r29	; 62
    1bd4:	0f be       	out	0x3f, r0	; 63
    1bd6:	cd bf       	out	0x3d, r28	; 61
    1bd8:	cf 91       	pop	r28
    1bda:	df 91       	pop	r29
    1bdc:	08 95       	ret

00001bde <DIO_u8TogPinVal>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8TogPinVal(uint8_t u8_PortNum,uint8_t u8_PinNum)           
{
    1bde:	df 93       	push	r29
    1be0:	cf 93       	push	r28
    1be2:	00 d0       	rcall	.+0      	; 0x1be4 <DIO_u8TogPinVal+0x6>
    1be4:	00 d0       	rcall	.+0      	; 0x1be6 <DIO_u8TogPinVal+0x8>
    1be6:	0f 92       	push	r0
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
    1bec:	8a 83       	std	Y+2, r24	; 0x02
    1bee:	6b 83       	std	Y+3, r22	; 0x03
		uint8_t u8_ErrorState = u8_DIO_OK;
    1bf0:	82 e0       	ldi	r24, 0x02	; 2
    1bf2:	89 83       	std	Y+1, r24	; 0x01
		if(u8_PinNum>=u8_DIO_PIN0 && u8_PinNum<=u8_DIO_PIN7)
    1bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf6:	88 30       	cpi	r24, 0x08	; 8
    1bf8:	08 f0       	brcs	.+2      	; 0x1bfc <DIO_u8TogPinVal+0x1e>
    1bfa:	73 c0       	rjmp	.+230    	; 0x1ce2 <DIO_u8TogPinVal+0x104>
		{
			switch(u8_PortNum)
    1bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfe:	28 2f       	mov	r18, r24
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	3d 83       	std	Y+5, r19	; 0x05
    1c04:	2c 83       	std	Y+4, r18	; 0x04
    1c06:	8c 81       	ldd	r24, Y+4	; 0x04
    1c08:	9d 81       	ldd	r25, Y+5	; 0x05
    1c0a:	89 30       	cpi	r24, 0x09	; 9
    1c0c:	91 05       	cpc	r25, r1
    1c0e:	51 f1       	breq	.+84     	; 0x1c64 <DIO_u8TogPinVal+0x86>
    1c10:	2c 81       	ldd	r18, Y+4	; 0x04
    1c12:	3d 81       	ldd	r19, Y+5	; 0x05
    1c14:	2a 30       	cpi	r18, 0x0A	; 10
    1c16:	31 05       	cpc	r19, r1
    1c18:	34 f4       	brge	.+12     	; 0x1c26 <DIO_u8TogPinVal+0x48>
    1c1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c1e:	88 30       	cpi	r24, 0x08	; 8
    1c20:	91 05       	cpc	r25, r1
    1c22:	61 f0       	breq	.+24     	; 0x1c3c <DIO_u8TogPinVal+0x5e>
    1c24:	5b c0       	rjmp	.+182    	; 0x1cdc <DIO_u8TogPinVal+0xfe>
    1c26:	2c 81       	ldd	r18, Y+4	; 0x04
    1c28:	3d 81       	ldd	r19, Y+5	; 0x05
    1c2a:	2a 30       	cpi	r18, 0x0A	; 10
    1c2c:	31 05       	cpc	r19, r1
    1c2e:	71 f1       	breq	.+92     	; 0x1c8c <DIO_u8TogPinVal+0xae>
    1c30:	8c 81       	ldd	r24, Y+4	; 0x04
    1c32:	9d 81       	ldd	r25, Y+5	; 0x05
    1c34:	8b 30       	cpi	r24, 0x0B	; 11
    1c36:	91 05       	cpc	r25, r1
    1c38:	e9 f1       	breq	.+122    	; 0x1cb4 <DIO_u8TogPinVal+0xd6>
    1c3a:	50 c0       	rjmp	.+160    	; 0x1cdc <DIO_u8TogPinVal+0xfe>
			{
				case u8_DIO_PORTA: TOG_BIT(Ru8_PORTA,u8_PinNum) ;  break ;
    1c3c:	ab e3       	ldi	r26, 0x3B	; 59
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	eb e3       	ldi	r30, 0x3B	; 59
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	48 2f       	mov	r20, r24
    1c48:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4a:	28 2f       	mov	r18, r24
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	02 2e       	mov	r0, r18
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <DIO_u8TogPinVal+0x7c>
    1c56:	88 0f       	add	r24, r24
    1c58:	99 1f       	adc	r25, r25
    1c5a:	0a 94       	dec	r0
    1c5c:	e2 f7       	brpl	.-8      	; 0x1c56 <DIO_u8TogPinVal+0x78>
    1c5e:	84 27       	eor	r24, r20
    1c60:	8c 93       	st	X, r24
    1c62:	41 c0       	rjmp	.+130    	; 0x1ce6 <DIO_u8TogPinVal+0x108>
				case u8_DIO_PORTB: TOG_BIT(Ru8_PORTB,u8_PinNum) ;  break ;
    1c64:	a8 e3       	ldi	r26, 0x38	; 56
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	e8 e3       	ldi	r30, 0x38	; 56
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	48 2f       	mov	r20, r24
    1c70:	8b 81       	ldd	r24, Y+3	; 0x03
    1c72:	28 2f       	mov	r18, r24
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	02 2e       	mov	r0, r18
    1c7c:	02 c0       	rjmp	.+4      	; 0x1c82 <DIO_u8TogPinVal+0xa4>
    1c7e:	88 0f       	add	r24, r24
    1c80:	99 1f       	adc	r25, r25
    1c82:	0a 94       	dec	r0
    1c84:	e2 f7       	brpl	.-8      	; 0x1c7e <DIO_u8TogPinVal+0xa0>
    1c86:	84 27       	eor	r24, r20
    1c88:	8c 93       	st	X, r24
    1c8a:	2d c0       	rjmp	.+90     	; 0x1ce6 <DIO_u8TogPinVal+0x108>
				case u8_DIO_PORTC: TOG_BIT(Ru8_PORTC,u8_PinNum) ;  break ;
    1c8c:	a5 e3       	ldi	r26, 0x35	; 53
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	e5 e3       	ldi	r30, 0x35	; 53
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 81       	ld	r24, Z
    1c96:	48 2f       	mov	r20, r24
    1c98:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9a:	28 2f       	mov	r18, r24
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	02 2e       	mov	r0, r18
    1ca4:	02 c0       	rjmp	.+4      	; 0x1caa <DIO_u8TogPinVal+0xcc>
    1ca6:	88 0f       	add	r24, r24
    1ca8:	99 1f       	adc	r25, r25
    1caa:	0a 94       	dec	r0
    1cac:	e2 f7       	brpl	.-8      	; 0x1ca6 <DIO_u8TogPinVal+0xc8>
    1cae:	84 27       	eor	r24, r20
    1cb0:	8c 93       	st	X, r24
    1cb2:	19 c0       	rjmp	.+50     	; 0x1ce6 <DIO_u8TogPinVal+0x108>
				case u8_DIO_PORTD: TOG_BIT(Ru8_PORTD,u8_PinNum) ;  break ;
    1cb4:	a2 e3       	ldi	r26, 0x32	; 50
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	e2 e3       	ldi	r30, 0x32	; 50
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	48 2f       	mov	r20, r24
    1cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc2:	28 2f       	mov	r18, r24
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	02 2e       	mov	r0, r18
    1ccc:	02 c0       	rjmp	.+4      	; 0x1cd2 <DIO_u8TogPinVal+0xf4>
    1cce:	88 0f       	add	r24, r24
    1cd0:	99 1f       	adc	r25, r25
    1cd2:	0a 94       	dec	r0
    1cd4:	e2 f7       	brpl	.-8      	; 0x1cce <DIO_u8TogPinVal+0xf0>
    1cd6:	84 27       	eor	r24, r20
    1cd8:	8c 93       	st	X, r24
    1cda:	05 c0       	rjmp	.+10     	; 0x1ce6 <DIO_u8TogPinVal+0x108>
				default          :  u8_ErrorState = u8_DIO_NOK;   break ; 
    1cdc:	83 e0       	ldi	r24, 0x03	; 3
    1cde:	89 83       	std	Y+1, r24	; 0x01
    1ce0:	02 c0       	rjmp	.+4      	; 0x1ce6 <DIO_u8TogPinVal+0x108>
			}
		}
		else 
		{
			u8_ErrorState = u8_DIO_NOK;
    1ce2:	83 e0       	ldi	r24, 0x03	; 3
    1ce4:	89 83       	std	Y+1, r24	; 0x01
		}
	return u8_ErrorState  ; 
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ce8:	0f 90       	pop	r0
    1cea:	0f 90       	pop	r0
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	cf 91       	pop	r28
    1cf4:	df 91       	pop	r29
    1cf6:	08 95       	ret

00001cf8 <DIO_voidDisablePullUps>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void DIO_voidDisablePullUps(void)   
{
    1cf8:	df 93       	push	r29
    1cfa:	cf 93       	push	r28
    1cfc:	cd b7       	in	r28, 0x3d	; 61
    1cfe:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(Ru8_SFIOR,u8_PUD) ;
    1d00:	a0 e5       	ldi	r26, 0x50	; 80
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	e0 e5       	ldi	r30, 0x50	; 80
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	84 60       	ori	r24, 0x04	; 4
    1d0c:	8c 93       	st	X, r24
}
    1d0e:	cf 91       	pop	r28
    1d10:	df 91       	pop	r29
    1d12:	08 95       	ret

00001d14 <DIO_voidEnablePullUps>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void DIO_voidEnablePullUps(void)  
{
    1d14:	df 93       	push	r29
    1d16:	cf 93       	push	r28
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(Ru8_SFIOR,u8_PUD) ;
    1d1c:	a0 e5       	ldi	r26, 0x50	; 80
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	e0 e5       	ldi	r30, 0x50	; 80
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	80 81       	ld	r24, Z
    1d26:	8b 7f       	andi	r24, 0xFB	; 251
    1d28:	8c 93       	st	X, r24
}
    1d2a:	cf 91       	pop	r28
    1d2c:	df 91       	pop	r29
    1d2e:	08 95       	ret

00001d30 <EEPROM_voidInit>:
#include "../../MCAL/I2C/I2C_interface.h"
#include "EEPROM_interface.h"
#include "EEPROM_private.h"

void EEPROM_voidInit(void) 
{
    1d30:	df 93       	push	r29
    1d32:	cf 93       	push	r28
    1d34:	cd b7       	in	r28, 0x3d	; 61
    1d36:	de b7       	in	r29, 0x3e	; 62
	I2C_voidMasterInit();
    1d38:	0e 94 9c 08 	call	0x1138	; 0x1138 <I2C_voidMasterInit>
}
    1d3c:	cf 91       	pop	r28
    1d3e:	df 91       	pop	r29
    1d40:	08 95       	ret

00001d42 <EEPROM_u8WriteNeededPartBlock>:

///////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t EEPROM_u8WriteNeededPartBlock(uint16_t u16_PageNum,uint8_t u8_ByteNum,uint8_t* pu8_ArrWantedToWrite,uint8_t u8_ArrSize ) 
{
    1d42:	df 93       	push	r29
    1d44:	cf 93       	push	r28
    1d46:	cd b7       	in	r28, 0x3d	; 61
    1d48:	de b7       	in	r29, 0x3e	; 62
    1d4a:	29 97       	sbiw	r28, 0x09	; 9
    1d4c:	0f b6       	in	r0, 0x3f	; 63
    1d4e:	f8 94       	cli
    1d50:	de bf       	out	0x3e, r29	; 62
    1d52:	0f be       	out	0x3f, r0	; 63
    1d54:	cd bf       	out	0x3d, r28	; 61
    1d56:	9d 83       	std	Y+5, r25	; 0x05
    1d58:	8c 83       	std	Y+4, r24	; 0x04
    1d5a:	6e 83       	std	Y+6, r22	; 0x06
    1d5c:	58 87       	std	Y+8, r21	; 0x08
    1d5e:	4f 83       	std	Y+7, r20	; 0x07
    1d60:	29 87       	std	Y+9, r18	; 0x09
	uint8_t u8_PageAdd = u8_EEPROM_INTIAL_VAL ; 
    1d62:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t u8_ArrIndex = u8_EEPROM_INTIAL_VAL ;
    1d64:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t u8_ErrorInArg = u8_EEPROM_NO_ARG_ERROR ; 
    1d66:	87 e9       	ldi	r24, 0x97	; 151
    1d68:	89 83       	std	Y+1, r24	; 0x01
	if((u8_ByteNum+u8_ArrSize)<u8_EEPROM_MAX_BYTE_ADDRESS && u16_PageNum<u16_EEPROM_MAX_PAGE_ADDRESS  && pu8_ArrWantedToWrite!=NULL_POINTER )
    1d6a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d6c:	28 2f       	mov	r18, r24
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	89 85       	ldd	r24, Y+9	; 0x09
    1d72:	88 2f       	mov	r24, r24
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	82 0f       	add	r24, r18
    1d78:	93 1f       	adc	r25, r19
    1d7a:	80 34       	cpi	r24, 0x40	; 64
    1d7c:	91 05       	cpc	r25, r1
    1d7e:	0c f0       	brlt	.+2      	; 0x1d82 <EEPROM_u8WriteNeededPartBlock+0x40>
    1d80:	5b c0       	rjmp	.+182    	; 0x1e38 <EEPROM_u8WriteNeededPartBlock+0xf6>
    1d82:	8c 81       	ldd	r24, Y+4	; 0x04
    1d84:	9d 81       	ldd	r25, Y+5	; 0x05
    1d86:	22 e0       	ldi	r18, 0x02	; 2
    1d88:	80 30       	cpi	r24, 0x00	; 0
    1d8a:	92 07       	cpc	r25, r18
    1d8c:	08 f0       	brcs	.+2      	; 0x1d90 <EEPROM_u8WriteNeededPartBlock+0x4e>
    1d8e:	54 c0       	rjmp	.+168    	; 0x1e38 <EEPROM_u8WriteNeededPartBlock+0xf6>
    1d90:	8f 81       	ldd	r24, Y+7	; 0x07
    1d92:	98 85       	ldd	r25, Y+8	; 0x08
    1d94:	00 97       	sbiw	r24, 0x00	; 0
    1d96:	09 f4       	brne	.+2      	; 0x1d9a <EEPROM_u8WriteNeededPartBlock+0x58>
    1d98:	4f c0       	rjmp	.+158    	; 0x1e38 <EEPROM_u8WriteNeededPartBlock+0xf6>
	{
		I2C_u8MasterStartReq();
    1d9a:	0e 94 b9 08 	call	0x1172	; 0x1172 <I2C_u8MasterStartReq>
		I2C_voidMasterSendSLAWrite(u8_EEPROM_DEVICE_ADD);
    1d9e:	80 e5       	ldi	r24, 0x50	; 80
    1da0:	0e 94 01 09 	call	0x1202	; 0x1202 <I2C_voidMasterSendSLAWrite>
		u8_PageAdd = (uint8_t)(u16_PageNum>>u8_EEPROM_TAKE_7HSB_OF_PAGE_ADD) ; 
    1da4:	8c 81       	ldd	r24, Y+4	; 0x04
    1da6:	9d 81       	ldd	r25, Y+5	; 0x05
    1da8:	96 95       	lsr	r25
    1daa:	87 95       	ror	r24
    1dac:	96 95       	lsr	r25
    1dae:	87 95       	ror	r24
    1db0:	8b 83       	std	Y+3, r24	; 0x03
		I2C_voidMasterWriteData(u8_PageAdd) ;
    1db2:	8b 81       	ldd	r24, Y+3	; 0x03
    1db4:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <I2C_voidMasterWriteData>
		u8_PageAdd = (uint8_t)((u16_PageNum<<u8_EEPROM_REMOVE_SENT_PAGE_ADD)>>u8_EEPROM_MAKE_REMAIN_ADD_PART_IN_HSB);
    1db8:	8c 81       	ldd	r24, Y+4	; 0x04
    1dba:	9d 81       	ldd	r25, Y+5	; 0x05
    1dbc:	90 e4       	ldi	r25, 0x40	; 64
    1dbe:	89 9f       	mul	r24, r25
    1dc0:	90 2d       	mov	r25, r0
    1dc2:	88 27       	eor	r24, r24
    1dc4:	11 24       	eor	r1, r1
    1dc6:	89 2f       	mov	r24, r25
    1dc8:	99 27       	eor	r25, r25
    1dca:	8b 83       	std	Y+3, r24	; 0x03
		u8_ByteNum|=u8_PageAdd ; 
    1dcc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dce:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd0:	89 2b       	or	r24, r25
    1dd2:	8e 83       	std	Y+6, r24	; 0x06
		I2C_voidMasterWriteData(u8_ByteNum) ;
    1dd4:	8e 81       	ldd	r24, Y+6	; 0x06
    1dd6:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <I2C_voidMasterWriteData>
		for(u8_ArrIndex=u8_EEPROM_INTIAL_VAL;u8_ArrIndex<u8_ArrSize;u8_ArrIndex++)
    1dda:	1a 82       	std	Y+2, r1	; 0x02
    1ddc:	26 c0       	rjmp	.+76     	; 0x1e2a <EEPROM_u8WriteNeededPartBlock+0xe8>
		{
			if(pu8_ArrWantedToWrite[u8_ArrIndex] != NULL_CHAR )
    1dde:	8a 81       	ldd	r24, Y+2	; 0x02
    1de0:	28 2f       	mov	r18, r24
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	8f 81       	ldd	r24, Y+7	; 0x07
    1de6:	98 85       	ldd	r25, Y+8	; 0x08
    1de8:	fc 01       	movw	r30, r24
    1dea:	e2 0f       	add	r30, r18
    1dec:	f3 1f       	adc	r31, r19
    1dee:	80 81       	ld	r24, Z
    1df0:	88 23       	and	r24, r24
    1df2:	79 f0       	breq	.+30     	; 0x1e12 <EEPROM_u8WriteNeededPartBlock+0xd0>
			{
				I2C_voidMasterWriteData((pu8_ArrWantedToWrite[u8_ArrIndex]));
    1df4:	8a 81       	ldd	r24, Y+2	; 0x02
    1df6:	28 2f       	mov	r18, r24
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	8f 81       	ldd	r24, Y+7	; 0x07
    1dfc:	98 85       	ldd	r25, Y+8	; 0x08
    1dfe:	fc 01       	movw	r30, r24
    1e00:	e2 0f       	add	r30, r18
    1e02:	f3 1f       	adc	r31, r19
    1e04:	80 81       	ld	r24, Z
    1e06:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <I2C_voidMasterWriteData>
		u8_PageAdd = (uint8_t)(u16_PageNum>>u8_EEPROM_TAKE_7HSB_OF_PAGE_ADD) ; 
		I2C_voidMasterWriteData(u8_PageAdd) ;
		u8_PageAdd = (uint8_t)((u16_PageNum<<u8_EEPROM_REMOVE_SENT_PAGE_ADD)>>u8_EEPROM_MAKE_REMAIN_ADD_PART_IN_HSB);
		u8_ByteNum|=u8_PageAdd ; 
		I2C_voidMasterWriteData(u8_ByteNum) ;
		for(u8_ArrIndex=u8_EEPROM_INTIAL_VAL;u8_ArrIndex<u8_ArrSize;u8_ArrIndex++)
    1e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0c:	8f 5f       	subi	r24, 0xFF	; 255
    1e0e:	8a 83       	std	Y+2, r24	; 0x02
    1e10:	0c c0       	rjmp	.+24     	; 0x1e2a <EEPROM_u8WriteNeededPartBlock+0xe8>
			{
				I2C_voidMasterWriteData((pu8_ArrWantedToWrite[u8_ArrIndex]));
			}
			else
			{
				I2C_voidMasterWriteData((pu8_ArrWantedToWrite[u8_ArrIndex]));
    1e12:	8a 81       	ldd	r24, Y+2	; 0x02
    1e14:	28 2f       	mov	r18, r24
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	8f 81       	ldd	r24, Y+7	; 0x07
    1e1a:	98 85       	ldd	r25, Y+8	; 0x08
    1e1c:	fc 01       	movw	r30, r24
    1e1e:	e2 0f       	add	r30, r18
    1e20:	f3 1f       	adc	r31, r19
    1e22:	80 81       	ld	r24, Z
    1e24:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <I2C_voidMasterWriteData>
    1e28:	04 c0       	rjmp	.+8      	; 0x1e32 <EEPROM_u8WriteNeededPartBlock+0xf0>
		u8_PageAdd = (uint8_t)(u16_PageNum>>u8_EEPROM_TAKE_7HSB_OF_PAGE_ADD) ; 
		I2C_voidMasterWriteData(u8_PageAdd) ;
		u8_PageAdd = (uint8_t)((u16_PageNum<<u8_EEPROM_REMOVE_SENT_PAGE_ADD)>>u8_EEPROM_MAKE_REMAIN_ADD_PART_IN_HSB);
		u8_ByteNum|=u8_PageAdd ; 
		I2C_voidMasterWriteData(u8_ByteNum) ;
		for(u8_ArrIndex=u8_EEPROM_INTIAL_VAL;u8_ArrIndex<u8_ArrSize;u8_ArrIndex++)
    1e2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e2c:	89 85       	ldd	r24, Y+9	; 0x09
    1e2e:	98 17       	cp	r25, r24
    1e30:	b0 f2       	brcs	.-84     	; 0x1dde <EEPROM_u8WriteNeededPartBlock+0x9c>
			{
				I2C_voidMasterWriteData((pu8_ArrWantedToWrite[u8_ArrIndex]));
				break;
			}
		}
		I2C_voidMasterStop();
    1e32:	0e 94 0e 0a 	call	0x141c	; 0x141c <I2C_voidMasterStop>
    1e36:	02 c0       	rjmp	.+4      	; 0x1e3c <EEPROM_u8WriteNeededPartBlock+0xfa>
	}
	else 
	{
		u8_ErrorInArg = u8_EEPROM_ARG_ERROR ; 
    1e38:	86 e9       	ldi	r24, 0x96	; 150
    1e3a:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_ErrorInArg ; 
    1e3c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e3e:	29 96       	adiw	r28, 0x09	; 9
    1e40:	0f b6       	in	r0, 0x3f	; 63
    1e42:	f8 94       	cli
    1e44:	de bf       	out	0x3e, r29	; 62
    1e46:	0f be       	out	0x3f, r0	; 63
    1e48:	cd bf       	out	0x3d, r28	; 61
    1e4a:	cf 91       	pop	r28
    1e4c:	df 91       	pop	r29
    1e4e:	08 95       	ret

00001e50 <EEPROM_u8WriteWantedByte>:

///////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t EEPROM_u8WriteWantedByte(uint16_t u16_PageNum,uint8_t u8_ByteNum,uint8_t u8_WantedToWrite)
{
    1e50:	df 93       	push	r29
    1e52:	cf 93       	push	r28
    1e54:	00 d0       	rcall	.+0      	; 0x1e56 <EEPROM_u8WriteWantedByte+0x6>
    1e56:	00 d0       	rcall	.+0      	; 0x1e58 <EEPROM_u8WriteWantedByte+0x8>
    1e58:	00 d0       	rcall	.+0      	; 0x1e5a <EEPROM_u8WriteWantedByte+0xa>
    1e5a:	cd b7       	in	r28, 0x3d	; 61
    1e5c:	de b7       	in	r29, 0x3e	; 62
    1e5e:	9c 83       	std	Y+4, r25	; 0x04
    1e60:	8b 83       	std	Y+3, r24	; 0x03
    1e62:	6d 83       	std	Y+5, r22	; 0x05
    1e64:	4e 83       	std	Y+6, r20	; 0x06
	uint8_t u8_PageAdd = u8_EEPROM_INTIAL_VAL ; 
    1e66:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t u8_ErrorInArg = u8_EEPROM_NO_ARG_ERROR ; 
    1e68:	87 e9       	ldi	r24, 0x97	; 151
    1e6a:	89 83       	std	Y+1, r24	; 0x01
	if(u8_ByteNum<u8_EEPROM_MAX_BYTE_ADDRESS && u16_PageNum<u16_EEPROM_MAX_PAGE_ADDRESS  )
    1e6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6e:	80 34       	cpi	r24, 0x40	; 64
    1e70:	60 f5       	brcc	.+88     	; 0x1eca <EEPROM_u8WriteWantedByte+0x7a>
    1e72:	8b 81       	ldd	r24, Y+3	; 0x03
    1e74:	9c 81       	ldd	r25, Y+4	; 0x04
    1e76:	22 e0       	ldi	r18, 0x02	; 2
    1e78:	80 30       	cpi	r24, 0x00	; 0
    1e7a:	92 07       	cpc	r25, r18
    1e7c:	30 f5       	brcc	.+76     	; 0x1eca <EEPROM_u8WriteWantedByte+0x7a>
	{
		I2C_u8MasterStartReq();
    1e7e:	0e 94 b9 08 	call	0x1172	; 0x1172 <I2C_u8MasterStartReq>
		I2C_voidMasterSendSLAWrite(u8_EEPROM_DEVICE_ADD);
    1e82:	80 e5       	ldi	r24, 0x50	; 80
    1e84:	0e 94 01 09 	call	0x1202	; 0x1202 <I2C_voidMasterSendSLAWrite>
		u8_PageAdd = (uint8_t)(u16_PageNum>>u8_EEPROM_TAKE_7HSB_OF_PAGE_ADD);
    1e88:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8c:	96 95       	lsr	r25
    1e8e:	87 95       	ror	r24
    1e90:	96 95       	lsr	r25
    1e92:	87 95       	ror	r24
    1e94:	8a 83       	std	Y+2, r24	; 0x02
		I2C_voidMasterWriteData(u8_PageAdd);
    1e96:	8a 81       	ldd	r24, Y+2	; 0x02
    1e98:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <I2C_voidMasterWriteData>
		u8_PageAdd = (uint8_t)((u16_PageNum<<u8_EEPROM_REMOVE_SENT_PAGE_ADD)>>u8_EEPROM_MAKE_REMAIN_ADD_PART_IN_HSB);
    1e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea0:	90 e4       	ldi	r25, 0x40	; 64
    1ea2:	89 9f       	mul	r24, r25
    1ea4:	90 2d       	mov	r25, r0
    1ea6:	88 27       	eor	r24, r24
    1ea8:	11 24       	eor	r1, r1
    1eaa:	89 2f       	mov	r24, r25
    1eac:	99 27       	eor	r25, r25
    1eae:	8a 83       	std	Y+2, r24	; 0x02
		u8_ByteNum|=u8_PageAdd ; 
    1eb0:	9d 81       	ldd	r25, Y+5	; 0x05
    1eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb4:	89 2b       	or	r24, r25
    1eb6:	8d 83       	std	Y+5, r24	; 0x05
		I2C_voidMasterWriteData(u8_ByteNum);
    1eb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eba:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <I2C_voidMasterWriteData>
		I2C_voidMasterWriteData(u8_WantedToWrite);
    1ebe:	8e 81       	ldd	r24, Y+6	; 0x06
    1ec0:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <I2C_voidMasterWriteData>
		I2C_voidMasterStop();
    1ec4:	0e 94 0e 0a 	call	0x141c	; 0x141c <I2C_voidMasterStop>
    1ec8:	02 c0       	rjmp	.+4      	; 0x1ece <EEPROM_u8WriteWantedByte+0x7e>
	}
	else 
	{
		u8_ErrorInArg = u8_EEPROM_ARG_ERROR ; 
    1eca:	86 e9       	ldi	r24, 0x96	; 150
    1ecc:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_ErrorInArg ; 
    1ece:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ed0:	26 96       	adiw	r28, 0x06	; 6
    1ed2:	0f b6       	in	r0, 0x3f	; 63
    1ed4:	f8 94       	cli
    1ed6:	de bf       	out	0x3e, r29	; 62
    1ed8:	0f be       	out	0x3f, r0	; 63
    1eda:	cd bf       	out	0x3d, r28	; 61
    1edc:	cf 91       	pop	r28
    1ede:	df 91       	pop	r29
    1ee0:	08 95       	ret

00001ee2 <EEPROM_u8ReadNeededPartBlock>:

///////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t EEPROM_u8ReadNeededPartBlock(uint16_t u16_PageNum,uint8_t u8_ByteNum,uint8_t* pu8_ArrWantedToRead,uint8_t u8_ArrSize)
{
    1ee2:	df 93       	push	r29
    1ee4:	cf 93       	push	r28
    1ee6:	cd b7       	in	r28, 0x3d	; 61
    1ee8:	de b7       	in	r29, 0x3e	; 62
    1eea:	29 97       	sbiw	r28, 0x09	; 9
    1eec:	0f b6       	in	r0, 0x3f	; 63
    1eee:	f8 94       	cli
    1ef0:	de bf       	out	0x3e, r29	; 62
    1ef2:	0f be       	out	0x3f, r0	; 63
    1ef4:	cd bf       	out	0x3d, r28	; 61
    1ef6:	9d 83       	std	Y+5, r25	; 0x05
    1ef8:	8c 83       	std	Y+4, r24	; 0x04
    1efa:	6e 83       	std	Y+6, r22	; 0x06
    1efc:	58 87       	std	Y+8, r21	; 0x08
    1efe:	4f 83       	std	Y+7, r20	; 0x07
    1f00:	29 87       	std	Y+9, r18	; 0x09
   
	uint8_t u8_PageAdd = u8_EEPROM_INTIAL_VAL ; 
    1f02:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t u8_ArrIndex = u8_EEPROM_INTIAL_VAL ;
    1f04:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t u8_ErrorInArg = u8_EEPROM_NO_ARG_ERROR ; 
    1f06:	87 e9       	ldi	r24, 0x97	; 151
    1f08:	89 83       	std	Y+1, r24	; 0x01
	if(((u8_EEPROM_MAX_BYTE_ADDRESS-u8_ByteNum)>=u8_ArrSize)  && u16_PageNum<u16_EEPROM_MAX_PAGE_ADDRESS && pu8_ArrWantedToRead!=NULL_POINTER )
    1f0a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f0c:	28 2f       	mov	r18, r24
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	80 e4       	ldi	r24, 0x40	; 64
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	ac 01       	movw	r20, r24
    1f16:	42 1b       	sub	r20, r18
    1f18:	53 0b       	sbc	r21, r19
    1f1a:	9a 01       	movw	r18, r20
    1f1c:	89 85       	ldd	r24, Y+9	; 0x09
    1f1e:	88 2f       	mov	r24, r24
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	28 17       	cp	r18, r24
    1f24:	39 07       	cpc	r19, r25
    1f26:	0c f4       	brge	.+2      	; 0x1f2a <EEPROM_u8ReadNeededPartBlock+0x48>
    1f28:	79 c0       	rjmp	.+242    	; 0x201c <EEPROM_u8ReadNeededPartBlock+0x13a>
    1f2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f2e:	52 e0       	ldi	r21, 0x02	; 2
    1f30:	80 30       	cpi	r24, 0x00	; 0
    1f32:	95 07       	cpc	r25, r21
    1f34:	08 f0       	brcs	.+2      	; 0x1f38 <EEPROM_u8ReadNeededPartBlock+0x56>
    1f36:	72 c0       	rjmp	.+228    	; 0x201c <EEPROM_u8ReadNeededPartBlock+0x13a>
    1f38:	8f 81       	ldd	r24, Y+7	; 0x07
    1f3a:	98 85       	ldd	r25, Y+8	; 0x08
    1f3c:	00 97       	sbiw	r24, 0x00	; 0
    1f3e:	09 f4       	brne	.+2      	; 0x1f42 <EEPROM_u8ReadNeededPartBlock+0x60>
    1f40:	6d c0       	rjmp	.+218    	; 0x201c <EEPROM_u8ReadNeededPartBlock+0x13a>
	{
		
		I2C_u8MasterStartReq();
    1f42:	0e 94 b9 08 	call	0x1172	; 0x1172 <I2C_u8MasterStartReq>
		I2C_voidMasterSendSLAWrite(u8_EEPROM_DEVICE_ADD);
    1f46:	80 e5       	ldi	r24, 0x50	; 80
    1f48:	0e 94 01 09 	call	0x1202	; 0x1202 <I2C_voidMasterSendSLAWrite>
		u8_PageAdd = (uint8_t)(u16_PageNum>>u8_EEPROM_TAKE_7HSB_OF_PAGE_ADD) ; 
    1f4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f50:	96 95       	lsr	r25
    1f52:	87 95       	ror	r24
    1f54:	96 95       	lsr	r25
    1f56:	87 95       	ror	r24
    1f58:	8b 83       	std	Y+3, r24	; 0x03
		I2C_voidMasterWriteData(u8_PageAdd) ;
    1f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5c:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <I2C_voidMasterWriteData>
		u8_PageAdd = (uint8_t)((u16_PageNum<<u8_EEPROM_REMOVE_SENT_PAGE_ADD)>>u8_EEPROM_MAKE_REMAIN_ADD_PART_IN_HSB);
    1f60:	8c 81       	ldd	r24, Y+4	; 0x04
    1f62:	9d 81       	ldd	r25, Y+5	; 0x05
    1f64:	90 e4       	ldi	r25, 0x40	; 64
    1f66:	89 9f       	mul	r24, r25
    1f68:	90 2d       	mov	r25, r0
    1f6a:	88 27       	eor	r24, r24
    1f6c:	11 24       	eor	r1, r1
    1f6e:	89 2f       	mov	r24, r25
    1f70:	99 27       	eor	r25, r25
    1f72:	8b 83       	std	Y+3, r24	; 0x03
		u8_ByteNum|=u8_PageAdd ; 
    1f74:	9e 81       	ldd	r25, Y+6	; 0x06
    1f76:	8b 81       	ldd	r24, Y+3	; 0x03
    1f78:	89 2b       	or	r24, r25
    1f7a:	8e 83       	std	Y+6, r24	; 0x06
		I2C_voidMasterWriteData(u8_ByteNum) ;
    1f7c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f7e:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <I2C_voidMasterWriteData>
		I2C_u8MasterRepeatStart();
    1f82:	0e 94 dd 08 	call	0x11ba	; 0x11ba <I2C_u8MasterRepeatStart>
		I2C_voidMasterSendSLARead(u8_EEPROM_DEVICE_ADD) ;
    1f86:	80 e5       	ldi	r24, 0x50	; 80
    1f88:	0e 94 3a 09 	call	0x1274	; 0x1274 <I2C_voidMasterSendSLARead>
		for(u8_ArrIndex= u8_EEPROM_INTIAL_VAL;u8_ArrIndex<(u8_ArrSize - u8_EEPROM_LAST);u8_ArrIndex++)
    1f8c:	1a 82       	std	Y+2, r1	; 0x02
    1f8e:	18 c0       	rjmp	.+48     	; 0x1fc0 <EEPROM_u8ReadNeededPartBlock+0xde>
		{
			
			I2C_u8MasterReadData((pu8_ArrWantedToRead+u8_ArrIndex),u8_I2C_RECEIVE_MORE_WORDS);
    1f90:	8a 81       	ldd	r24, Y+2	; 0x02
    1f92:	28 2f       	mov	r18, r24
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	8f 81       	ldd	r24, Y+7	; 0x07
    1f98:	98 85       	ldd	r25, Y+8	; 0x08
    1f9a:	82 0f       	add	r24, r18
    1f9c:	93 1f       	adc	r25, r19
    1f9e:	6b e0       	ldi	r22, 0x0B	; 11
    1fa0:	0e 94 a7 09 	call	0x134e	; 0x134e <I2C_u8MasterReadData>
			if(pu8_ArrWantedToRead[u8_ArrIndex] == NULL_CHAR )
    1fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa6:	28 2f       	mov	r18, r24
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	8f 81       	ldd	r24, Y+7	; 0x07
    1fac:	98 85       	ldd	r25, Y+8	; 0x08
    1fae:	fc 01       	movw	r30, r24
    1fb0:	e2 0f       	add	r30, r18
    1fb2:	f3 1f       	adc	r31, r19
    1fb4:	80 81       	ld	r24, Z
    1fb6:	88 23       	and	r24, r24
    1fb8:	69 f0       	breq	.+26     	; 0x1fd4 <EEPROM_u8ReadNeededPartBlock+0xf2>
		u8_PageAdd = (uint8_t)((u16_PageNum<<u8_EEPROM_REMOVE_SENT_PAGE_ADD)>>u8_EEPROM_MAKE_REMAIN_ADD_PART_IN_HSB);
		u8_ByteNum|=u8_PageAdd ; 
		I2C_voidMasterWriteData(u8_ByteNum) ;
		I2C_u8MasterRepeatStart();
		I2C_voidMasterSendSLARead(u8_EEPROM_DEVICE_ADD) ;
		for(u8_ArrIndex= u8_EEPROM_INTIAL_VAL;u8_ArrIndex<(u8_ArrSize - u8_EEPROM_LAST);u8_ArrIndex++)
    1fba:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbc:	8f 5f       	subi	r24, 0xFF	; 255
    1fbe:	8a 83       	std	Y+2, r24	; 0x02
    1fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc2:	28 2f       	mov	r18, r24
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	89 85       	ldd	r24, Y+9	; 0x09
    1fc8:	88 2f       	mov	r24, r24
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	02 97       	sbiw	r24, 0x02	; 2
    1fce:	28 17       	cp	r18, r24
    1fd0:	39 07       	cpc	r19, r25
    1fd2:	f4 f2       	brlt	.-68     	; 0x1f90 <EEPROM_u8ReadNeededPartBlock+0xae>
			if(pu8_ArrWantedToRead[u8_ArrIndex] == NULL_CHAR )
			{
				break;
			}
		}
		I2C_u8MasterReadData((pu8_ArrWantedToRead+u8_ArrIndex),u8_I2C_RECEIVE_COMPLETE);
    1fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd6:	28 2f       	mov	r18, r24
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	8f 81       	ldd	r24, Y+7	; 0x07
    1fdc:	98 85       	ldd	r25, Y+8	; 0x08
    1fde:	82 0f       	add	r24, r18
    1fe0:	93 1f       	adc	r25, r19
    1fe2:	6a e0       	ldi	r22, 0x0A	; 10
    1fe4:	0e 94 a7 09 	call	0x134e	; 0x134e <I2C_u8MasterReadData>
		I2C_voidMasterStop();
    1fe8:	0e 94 0e 0a 	call	0x141c	; 0x141c <I2C_voidMasterStop>
		if(pu8_ArrWantedToRead[u8_ArrIndex-1] != NULL_CHAR)
    1fec:	8a 81       	ldd	r24, Y+2	; 0x02
    1fee:	88 2f       	mov	r24, r24
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	9c 01       	movw	r18, r24
    1ff4:	21 50       	subi	r18, 0x01	; 1
    1ff6:	30 40       	sbci	r19, 0x00	; 0
    1ff8:	8f 81       	ldd	r24, Y+7	; 0x07
    1ffa:	98 85       	ldd	r25, Y+8	; 0x08
    1ffc:	fc 01       	movw	r30, r24
    1ffe:	e2 0f       	add	r30, r18
    2000:	f3 1f       	adc	r31, r19
    2002:	80 81       	ld	r24, Z
    2004:	88 23       	and	r24, r24
    2006:	61 f0       	breq	.+24     	; 0x2020 <EEPROM_u8ReadNeededPartBlock+0x13e>
		{
			pu8_ArrWantedToRead[u8_ArrIndex] = NULL_CHAR ;
    2008:	8a 81       	ldd	r24, Y+2	; 0x02
    200a:	28 2f       	mov	r18, r24
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	8f 81       	ldd	r24, Y+7	; 0x07
    2010:	98 85       	ldd	r25, Y+8	; 0x08
    2012:	fc 01       	movw	r30, r24
    2014:	e2 0f       	add	r30, r18
    2016:	f3 1f       	adc	r31, r19
    2018:	10 82       	st	Z, r1
    201a:	02 c0       	rjmp	.+4      	; 0x2020 <EEPROM_u8ReadNeededPartBlock+0x13e>
		}
		
	}
	else 
	{
		u8_ErrorInArg = u8_EEPROM_ARG_ERROR ; 
    201c:	86 e9       	ldi	r24, 0x96	; 150
    201e:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_ErrorInArg ; 
    2020:	89 81       	ldd	r24, Y+1	; 0x01
}
    2022:	29 96       	adiw	r28, 0x09	; 9
    2024:	0f b6       	in	r0, 0x3f	; 63
    2026:	f8 94       	cli
    2028:	de bf       	out	0x3e, r29	; 62
    202a:	0f be       	out	0x3f, r0	; 63
    202c:	cd bf       	out	0x3d, r28	; 61
    202e:	cf 91       	pop	r28
    2030:	df 91       	pop	r29
    2032:	08 95       	ret

00002034 <EEPROM_u8ReadWantedByte>:

///////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t EEPROM_u8ReadWantedByte(uint16_t u16_PageNum,uint8_t u8_ByteNum,uint8_t* pu8_WantedToRead)
{
    2034:	df 93       	push	r29
    2036:	cf 93       	push	r28
    2038:	cd b7       	in	r28, 0x3d	; 61
    203a:	de b7       	in	r29, 0x3e	; 62
    203c:	27 97       	sbiw	r28, 0x07	; 7
    203e:	0f b6       	in	r0, 0x3f	; 63
    2040:	f8 94       	cli
    2042:	de bf       	out	0x3e, r29	; 62
    2044:	0f be       	out	0x3f, r0	; 63
    2046:	cd bf       	out	0x3d, r28	; 61
    2048:	9c 83       	std	Y+4, r25	; 0x04
    204a:	8b 83       	std	Y+3, r24	; 0x03
    204c:	6d 83       	std	Y+5, r22	; 0x05
    204e:	5f 83       	std	Y+7, r21	; 0x07
    2050:	4e 83       	std	Y+6, r20	; 0x06
	uint8_t u8_PageAdd = u8_EEPROM_INTIAL_VAL ; 
    2052:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t u8_ErrorInArg = u8_EEPROM_NO_ARG_ERROR ; 
    2054:	87 e9       	ldi	r24, 0x97	; 151
    2056:	89 83       	std	Y+1, r24	; 0x01
	if((u8_ByteNum<u8_EEPROM_MAX_BYTE_ADDRESS) && u16_PageNum<u16_EEPROM_MAX_PAGE_ADDRESS && pu8_WantedToRead!=NULL_POINTER )
    2058:	8d 81       	ldd	r24, Y+5	; 0x05
    205a:	80 34       	cpi	r24, 0x40	; 64
    205c:	b8 f5       	brcc	.+110    	; 0x20cc <EEPROM_u8ReadWantedByte+0x98>
    205e:	8b 81       	ldd	r24, Y+3	; 0x03
    2060:	9c 81       	ldd	r25, Y+4	; 0x04
    2062:	22 e0       	ldi	r18, 0x02	; 2
    2064:	80 30       	cpi	r24, 0x00	; 0
    2066:	92 07       	cpc	r25, r18
    2068:	88 f5       	brcc	.+98     	; 0x20cc <EEPROM_u8ReadWantedByte+0x98>
    206a:	8e 81       	ldd	r24, Y+6	; 0x06
    206c:	9f 81       	ldd	r25, Y+7	; 0x07
    206e:	00 97       	sbiw	r24, 0x00	; 0
    2070:	69 f1       	breq	.+90     	; 0x20cc <EEPROM_u8ReadWantedByte+0x98>
	{
		I2C_u8MasterStartReq();
    2072:	0e 94 b9 08 	call	0x1172	; 0x1172 <I2C_u8MasterStartReq>
		I2C_voidMasterSendSLAWrite(u8_EEPROM_DEVICE_ADD) ;
    2076:	80 e5       	ldi	r24, 0x50	; 80
    2078:	0e 94 01 09 	call	0x1202	; 0x1202 <I2C_voidMasterSendSLAWrite>
		u8_PageAdd = (uint8_t)(u16_PageNum>>u8_EEPROM_TAKE_7HSB_OF_PAGE_ADD) ; 
    207c:	8b 81       	ldd	r24, Y+3	; 0x03
    207e:	9c 81       	ldd	r25, Y+4	; 0x04
    2080:	96 95       	lsr	r25
    2082:	87 95       	ror	r24
    2084:	96 95       	lsr	r25
    2086:	87 95       	ror	r24
    2088:	8a 83       	std	Y+2, r24	; 0x02
		I2C_voidMasterWriteData(u8_PageAdd) ;
    208a:	8a 81       	ldd	r24, Y+2	; 0x02
    208c:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <I2C_voidMasterWriteData>
		u8_PageAdd = (uint8_t)((u16_PageNum<<u8_EEPROM_REMOVE_SENT_PAGE_ADD)>>u8_EEPROM_MAKE_REMAIN_ADD_PART_IN_HSB);
    2090:	8b 81       	ldd	r24, Y+3	; 0x03
    2092:	9c 81       	ldd	r25, Y+4	; 0x04
    2094:	90 e4       	ldi	r25, 0x40	; 64
    2096:	89 9f       	mul	r24, r25
    2098:	90 2d       	mov	r25, r0
    209a:	88 27       	eor	r24, r24
    209c:	11 24       	eor	r1, r1
    209e:	89 2f       	mov	r24, r25
    20a0:	99 27       	eor	r25, r25
    20a2:	8a 83       	std	Y+2, r24	; 0x02
		u8_ByteNum|=u8_PageAdd ; 
    20a4:	9d 81       	ldd	r25, Y+5	; 0x05
    20a6:	8a 81       	ldd	r24, Y+2	; 0x02
    20a8:	89 2b       	or	r24, r25
    20aa:	8d 83       	std	Y+5, r24	; 0x05
		I2C_voidMasterWriteData(u8_ByteNum) ;
    20ac:	8d 81       	ldd	r24, Y+5	; 0x05
    20ae:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <I2C_voidMasterWriteData>
		I2C_u8MasterRepeatStart();
    20b2:	0e 94 dd 08 	call	0x11ba	; 0x11ba <I2C_u8MasterRepeatStart>
		I2C_voidMasterSendSLARead(u8_EEPROM_DEVICE_ADD) ;
    20b6:	80 e5       	ldi	r24, 0x50	; 80
    20b8:	0e 94 3a 09 	call	0x1274	; 0x1274 <I2C_voidMasterSendSLARead>
		I2C_u8MasterReadData(pu8_WantedToRead,u8_I2C_RECEIVE_COMPLETE);
    20bc:	8e 81       	ldd	r24, Y+6	; 0x06
    20be:	9f 81       	ldd	r25, Y+7	; 0x07
    20c0:	6a e0       	ldi	r22, 0x0A	; 10
    20c2:	0e 94 a7 09 	call	0x134e	; 0x134e <I2C_u8MasterReadData>
		I2C_voidMasterStop();
    20c6:	0e 94 0e 0a 	call	0x141c	; 0x141c <I2C_voidMasterStop>
    20ca:	02 c0       	rjmp	.+4      	; 0x20d0 <EEPROM_u8ReadWantedByte+0x9c>
	}
	else 
	{
		u8_ErrorInArg = u8_EEPROM_ARG_ERROR ; 
    20cc:	86 e9       	ldi	r24, 0x96	; 150
    20ce:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_ErrorInArg ; 
    20d0:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    20d2:	27 96       	adiw	r28, 0x07	; 7
    20d4:	0f b6       	in	r0, 0x3f	; 63
    20d6:	f8 94       	cli
    20d8:	de bf       	out	0x3e, r29	; 62
    20da:	0f be       	out	0x3f, r0	; 63
    20dc:	cd bf       	out	0x3d, r28	; 61
    20de:	cf 91       	pop	r28
    20e0:	df 91       	pop	r29
    20e2:	08 95       	ret

000020e4 <EEPROM_u8ReadCurrentByte>:
///////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t EEPROM_u8ReadCurrentByte(uint8_t* pu8_WantedToRead)
{
    20e4:	df 93       	push	r29
    20e6:	cf 93       	push	r28
    20e8:	00 d0       	rcall	.+0      	; 0x20ea <EEPROM_u8ReadCurrentByte+0x6>
    20ea:	0f 92       	push	r0
    20ec:	cd b7       	in	r28, 0x3d	; 61
    20ee:	de b7       	in	r29, 0x3e	; 62
    20f0:	9b 83       	std	Y+3, r25	; 0x03
    20f2:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_ErrorInArg = u8_EEPROM_NO_ARG_ERROR ; 
    20f4:	87 e9       	ldi	r24, 0x97	; 151
    20f6:	89 83       	std	Y+1, r24	; 0x01
	if(pu8_WantedToRead!=NULL_POINTER )
    20f8:	8a 81       	ldd	r24, Y+2	; 0x02
    20fa:	9b 81       	ldd	r25, Y+3	; 0x03
    20fc:	00 97       	sbiw	r24, 0x00	; 0
    20fe:	69 f0       	breq	.+26     	; 0x211a <EEPROM_u8ReadCurrentByte+0x36>
	{
		I2C_u8MasterStartReq();
    2100:	0e 94 b9 08 	call	0x1172	; 0x1172 <I2C_u8MasterStartReq>
		I2C_voidMasterSendSLARead(u8_EEPROM_DEVICE_ADD) ;
    2104:	80 e5       	ldi	r24, 0x50	; 80
    2106:	0e 94 3a 09 	call	0x1274	; 0x1274 <I2C_voidMasterSendSLARead>
		I2C_u8MasterReadData(pu8_WantedToRead,u8_I2C_RECEIVE_COMPLETE);
    210a:	8a 81       	ldd	r24, Y+2	; 0x02
    210c:	9b 81       	ldd	r25, Y+3	; 0x03
    210e:	6a e0       	ldi	r22, 0x0A	; 10
    2110:	0e 94 a7 09 	call	0x134e	; 0x134e <I2C_u8MasterReadData>
		I2C_voidMasterStop();
    2114:	0e 94 0e 0a 	call	0x141c	; 0x141c <I2C_voidMasterStop>
    2118:	02 c0       	rjmp	.+4      	; 0x211e <EEPROM_u8ReadCurrentByte+0x3a>
	}
	else 
	{
		u8_ErrorInArg = u8_EEPROM_ARG_ERROR ; 
    211a:	86 e9       	ldi	r24, 0x96	; 150
    211c:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_ErrorInArg ; 
    211e:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    2120:	0f 90       	pop	r0
    2122:	0f 90       	pop	r0
    2124:	0f 90       	pop	r0
    2126:	cf 91       	pop	r28
    2128:	df 91       	pop	r29
    212a:	08 95       	ret

0000212c <main>:
#define u8_MAX_INTERED_USER_DATA_SIZE		20

#define u8_MAX_PAGE_NUM						511

int main(void)
{
    212c:	df 93       	push	r29
    212e:	cf 93       	push	r28
    2130:	cd b7       	in	r28, 0x3d	; 61
    2132:	de b7       	in	r29, 0x3e	; 62
    2134:	e6 97       	sbiw	r28, 0x36	; 54
    2136:	0f b6       	in	r0, 0x3f	; 63
    2138:	f8 94       	cli
    213a:	de bf       	out	0x3e, r29	; 62
    213c:	0f be       	out	0x3f, r0	; 63
    213e:	cd bf       	out	0x3d, r28	; 61
	uint16_t u16_enteredPageNum= u8_INTIAL_VAL 	 ;
    2140:	1c 82       	std	Y+4, r1	; 0x04
    2142:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t u8_dataState  , u8_pageState = u8_INTIAL_VAL  ;
    2144:	19 82       	std	Y+1, r1	; 0x01
	uint8_t pu8_commandStr[u8_COMMAND_STR_SIZE] ;
	//uint8_t pu8_pageStr[u8_PAGE_STR_SIZE] ;
	uint8_t pu8_eepromDataStr[u8_MAX_INTERED_USER_DATA_SIZE] ;
	uint8_t pu8_userDataStr[u8_MAX_INTERED_USER_DATA_SIZE] ;

	SET_BIT(Ru8_SREG , bit7); // set global interrupt
    2146:	af e5       	ldi	r26, 0x5F	; 95
    2148:	b0 e0       	ldi	r27, 0x00	; 0
    214a:	ef e5       	ldi	r30, 0x5F	; 95
    214c:	f0 e0       	ldi	r31, 0x00	; 0
    214e:	80 81       	ld	r24, Z
    2150:	80 68       	ori	r24, 0x80	; 128
    2152:	8c 93       	st	X, r24
	USART_voidInit() ;
    2154:	0e 94 49 00 	call	0x92	; 0x92 <USART_voidInit>
	EEPROM_voidInit() ;
    2158:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <EEPROM_voidInit>


	while(1)
	{

		USART_u8TransStr((uint8_t*)"\rEnter READ or WRITE\r") ;
    215c:	80 e6       	ldi	r24, 0x60	; 96
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	0e 94 52 01 	call	0x2a4	; 0x2a4 <USART_u8TransStr>

		do
		{
			u8_dataState = USART_u8ReceiveStr(pu8_commandStr,u8_COMMAND_STR_SIZE,'\r') ;
    2164:	ce 01       	movw	r24, r28
    2166:	05 96       	adiw	r24, 0x05	; 5
    2168:	6a e0       	ldi	r22, 0x0A	; 10
    216a:	4d e0       	ldi	r20, 0x0D	; 13
    216c:	0e 94 8a 01 	call	0x314	; 0x314 <USART_u8ReceiveStr>
    2170:	8a 83       	std	Y+2, r24	; 0x02

		}while(u8_dataState != u8_USART_RECEIVED_CORRECT) ;
    2172:	8a 81       	ldd	r24, Y+2	; 0x02
    2174:	81 39       	cpi	r24, 0x91	; 145
    2176:	b1 f7       	brne	.-20     	; 0x2164 <main+0x38>



		if(strcmp(pu8_commandStr,(uint8_t*)"WRITE")==u8_EQUAL_STR)
    2178:	ce 01       	movw	r24, r28
    217a:	05 96       	adiw	r24, 0x05	; 5
    217c:	26 e7       	ldi	r18, 0x76	; 118
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	b9 01       	movw	r22, r18
    2182:	0e 94 cf 11 	call	0x239e	; 0x239e <strcmp>
    2186:	00 97       	sbiw	r24, 0x00	; 0
    2188:	49 f5       	brne	.+82     	; 0x21dc <main+0xb0>
		{
			//Respond with OK
			USART_u8TransStr((uint8_t*)"ok \r") ;
    218a:	8c e7       	ldi	r24, 0x7C	; 124
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	0e 94 52 01 	call	0x2a4	; 0x2a4 <USART_u8TransStr>
			//take page number and check page validity
			u8_pageState =  u8_enterCheckPageVal((uint16_t*)(&u16_enteredPageNum)) ;
    2192:	ce 01       	movw	r24, r28
    2194:	03 96       	adiw	r24, 0x03	; 3
    2196:	0e 94 18 11 	call	0x2230	; 0x2230 <u8_enterCheckPageVal>
    219a:	89 83       	std	Y+1, r24	; 0x01
			if(u8_pageState == u8_PAGE_VALID)
    219c:	89 81       	ldd	r24, Y+1	; 0x01
    219e:	82 30       	cpi	r24, 0x02	; 2
    21a0:	e9 f6       	brne	.-70     	; 0x215c <main+0x30>
			{
				USART_u8TransStr((uint8_t*)"ok \r") ;
    21a2:	8c e7       	ldi	r24, 0x7C	; 124
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	0e 94 52 01 	call	0x2a4	; 0x2a4 <USART_u8TransStr>
				do
				{
					u8_dataState = USART_u8ReceiveStr(pu8_userDataStr,u8_MAX_INTERED_USER_DATA_SIZE,'\r') ;
    21aa:	ce 01       	movw	r24, r28
    21ac:	83 96       	adiw	r24, 0x23	; 35
    21ae:	64 e1       	ldi	r22, 0x14	; 20
    21b0:	4d e0       	ldi	r20, 0x0D	; 13
    21b2:	0e 94 8a 01 	call	0x314	; 0x314 <USART_u8ReceiveStr>
    21b6:	8a 83       	std	Y+2, r24	; 0x02

				 }while(u8_dataState != u8_USART_RECEIVED_CORRECT) ;
    21b8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ba:	81 39       	cpi	r24, 0x91	; 145
    21bc:	b1 f7       	brne	.-20     	; 0x21aa <main+0x7e>

				USART_u8TransStr((uint8_t*)"ok \r") ;
    21be:	8c e7       	ldi	r24, 0x7C	; 124
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	0e 94 52 01 	call	0x2a4	; 0x2a4 <USART_u8TransStr>
				//Write wanted page from EEPROM
				EEPROM_u8WriteNeededPartBlock(u16_enteredPageNum,u8_BEGIN_WRITE_IN_BYTE_NUM0,pu8_userDataStr,u8_MAX_INTERED_USER_DATA_SIZE) ;
    21c6:	8b 81       	ldd	r24, Y+3	; 0x03
    21c8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ca:	9e 01       	movw	r18, r28
    21cc:	2d 5d       	subi	r18, 0xDD	; 221
    21ce:	3f 4f       	sbci	r19, 0xFF	; 255
    21d0:	60 e0       	ldi	r22, 0x00	; 0
    21d2:	a9 01       	movw	r20, r18
    21d4:	24 e1       	ldi	r18, 0x14	; 20
    21d6:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <EEPROM_u8WriteNeededPartBlock>
    21da:	c0 cf       	rjmp	.-128    	; 0x215c <main+0x30>

			}
		}
		else if((strcmp(pu8_commandStr,(uint8_t*)"READ")==u8_EQUAL_STR ))
    21dc:	ce 01       	movw	r24, r28
    21de:	05 96       	adiw	r24, 0x05	; 5
    21e0:	21 e8       	ldi	r18, 0x81	; 129
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	b9 01       	movw	r22, r18
    21e6:	0e 94 cf 11 	call	0x239e	; 0x239e <strcmp>
    21ea:	00 97       	sbiw	r24, 0x00	; 0
    21ec:	e1 f4       	brne	.+56     	; 0x2226 <main+0xfa>
		{
			//Respond with OK
			USART_u8TransStr((uint8_t*)"ok \r") ;
    21ee:	8c e7       	ldi	r24, 0x7C	; 124
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	0e 94 52 01 	call	0x2a4	; 0x2a4 <USART_u8TransStr>
			//take page number and check page validity and return in pointer number converted to u16
			u8_pageState = u8_enterCheckPageVal((uint16_t*)(&u16_enteredPageNum)) ;
    21f6:	ce 01       	movw	r24, r28
    21f8:	03 96       	adiw	r24, 0x03	; 3
    21fa:	0e 94 18 11 	call	0x2230	; 0x2230 <u8_enterCheckPageVal>
    21fe:	89 83       	std	Y+1, r24	; 0x01
			//read wanted page from EEPROM
			if(u8_pageState == u8_PAGE_VALID)
    2200:	89 81       	ldd	r24, Y+1	; 0x01
    2202:	82 30       	cpi	r24, 0x02	; 2
    2204:	09 f0       	breq	.+2      	; 0x2208 <main+0xdc>
    2206:	aa cf       	rjmp	.-172    	; 0x215c <main+0x30>
			{
				// read from EEPROM the written data
				EEPROM_u8ReadNeededPartBlock(u16_enteredPageNum,u8_BEGIN_WRITE_IN_BYTE_NUM0,pu8_eepromDataStr,u8_MAX_INTERED_USER_DATA_SIZE) ;
    2208:	8b 81       	ldd	r24, Y+3	; 0x03
    220a:	9c 81       	ldd	r25, Y+4	; 0x04
    220c:	9e 01       	movw	r18, r28
    220e:	21 5f       	subi	r18, 0xF1	; 241
    2210:	3f 4f       	sbci	r19, 0xFF	; 255
    2212:	60 e0       	ldi	r22, 0x00	; 0
    2214:	a9 01       	movw	r20, r18
    2216:	24 e1       	ldi	r18, 0x14	; 20
    2218:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <EEPROM_u8ReadNeededPartBlock>
				USART_u8TransStr(pu8_eepromDataStr) ;
    221c:	ce 01       	movw	r24, r28
    221e:	0f 96       	adiw	r24, 0x0f	; 15
    2220:	0e 94 52 01 	call	0x2a4	; 0x2a4 <USART_u8TransStr>
    2224:	9b cf       	rjmp	.-202    	; 0x215c <main+0x30>
			}

		}
		else
		{
			USART_u8TransStr((uint8_t*)"Wrong input command \r") ;
    2226:	86 e8       	ldi	r24, 0x86	; 134
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <USART_u8TransStr>
    222e:	96 cf       	rjmp	.-212    	; 0x215c <main+0x30>

00002230 <u8_enterCheckPageVal>:



//FUNCTION that take pointer to string to take the page number in,
uint8_t u8_enterCheckPageVal(uint16_t* pu16_enteredPageNum)
{
    2230:	df 93       	push	r29
    2232:	cf 93       	push	r28
    2234:	cd b7       	in	r28, 0x3d	; 61
    2236:	de b7       	in	r29, 0x3e	; 62
    2238:	2a 97       	sbiw	r28, 0x0a	; 10
    223a:	0f b6       	in	r0, 0x3f	; 63
    223c:	f8 94       	cli
    223e:	de bf       	out	0x3e, r29	; 62
    2240:	0f be       	out	0x3f, r0	; 63
    2242:	cd bf       	out	0x3d, r28	; 61
    2244:	9a 87       	std	Y+10, r25	; 0x0a
    2246:	89 87       	std	Y+9, r24	; 0x09
	uint8_t pu8_pageNumStr[u8_PAGE_STR_SIZE] ;
	uint8_t u8_inputPageState = u8_PAGE_INVALID , u8_indexArr = u8_INTIAL_VAL;
    2248:	83 e0       	ldi	r24, 0x03	; 3
    224a:	8a 83       	std	Y+2, r24	; 0x02
    224c:	19 82       	std	Y+1, r1	; 0x01
	*pu16_enteredPageNum = 	u8_I2C_INTIAL_VAL ;
    224e:	e9 85       	ldd	r30, Y+9	; 0x09
    2250:	fa 85       	ldd	r31, Y+10	; 0x0a
    2252:	11 82       	std	Z+1, r1	; 0x01
    2254:	10 82       	st	Z, r1
	USART_u8TransStr((uint8_t*)"please Enter page number less than 511 \r ") ;
    2256:	8c e9       	ldi	r24, 0x9C	; 156
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <USART_u8TransStr>

	//take a valid input from user (due to the time out that USART implemented with )
	do
	{
		u8_inputPageState = USART_u8ReceiveStr(pu8_pageNumStr,u8_PAGE_STR_SIZE,'\r') ;
    225e:	ce 01       	movw	r24, r28
    2260:	03 96       	adiw	r24, 0x03	; 3
    2262:	66 e0       	ldi	r22, 0x06	; 6
    2264:	4d e0       	ldi	r20, 0x0D	; 13
    2266:	0e 94 8a 01 	call	0x314	; 0x314 <USART_u8ReceiveStr>
    226a:	8a 83       	std	Y+2, r24	; 0x02

	}while(u8_inputPageState != u8_USART_RECEIVED_CORRECT) ;
    226c:	8a 81       	ldd	r24, Y+2	; 0x02
    226e:	81 39       	cpi	r24, 0x91	; 145
    2270:	b1 f7       	brne	.-20     	; 0x225e <u8_enterCheckPageVal+0x2e>
    2272:	6e c0       	rjmp	.+220    	; 0x2350 <u8_enterCheckPageVal+0x120>

	// check the array taken by USART from user is digits and less than 511 (number of pages in EEPROM or not )
	while(pu8_pageNumStr[u8_indexArr]!=NULL_CHAR && u8_indexArr< (u8_PAGE_STR_SIZE))
	{
		if(pu8_pageNumStr[u8_indexArr]>='0' && pu8_pageNumStr[u8_indexArr]<='9' && (*pu16_enteredPageNum) < 511)
    2274:	89 81       	ldd	r24, Y+1	; 0x01
    2276:	28 2f       	mov	r18, r24
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	ce 01       	movw	r24, r28
    227c:	03 96       	adiw	r24, 0x03	; 3
    227e:	fc 01       	movw	r30, r24
    2280:	e2 0f       	add	r30, r18
    2282:	f3 1f       	adc	r31, r19
    2284:	80 81       	ld	r24, Z
    2286:	80 33       	cpi	r24, 0x30	; 48
    2288:	08 f4       	brcc	.+2      	; 0x228c <u8_enterCheckPageVal+0x5c>
    228a:	5d c0       	rjmp	.+186    	; 0x2346 <u8_enterCheckPageVal+0x116>
    228c:	89 81       	ldd	r24, Y+1	; 0x01
    228e:	28 2f       	mov	r18, r24
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	ce 01       	movw	r24, r28
    2294:	03 96       	adiw	r24, 0x03	; 3
    2296:	fc 01       	movw	r30, r24
    2298:	e2 0f       	add	r30, r18
    229a:	f3 1f       	adc	r31, r19
    229c:	80 81       	ld	r24, Z
    229e:	8a 33       	cpi	r24, 0x3A	; 58
    22a0:	08 f0       	brcs	.+2      	; 0x22a4 <u8_enterCheckPageVal+0x74>
    22a2:	51 c0       	rjmp	.+162    	; 0x2346 <u8_enterCheckPageVal+0x116>
    22a4:	e9 85       	ldd	r30, Y+9	; 0x09
    22a6:	fa 85       	ldd	r31, Y+10	; 0x0a
    22a8:	80 81       	ld	r24, Z
    22aa:	91 81       	ldd	r25, Z+1	; 0x01
    22ac:	21 e0       	ldi	r18, 0x01	; 1
    22ae:	8f 3f       	cpi	r24, 0xFF	; 255
    22b0:	92 07       	cpc	r25, r18
    22b2:	08 f0       	brcs	.+2      	; 0x22b6 <u8_enterCheckPageVal+0x86>
    22b4:	48 c0       	rjmp	.+144    	; 0x2346 <u8_enterCheckPageVal+0x116>
		{
			if(u8_indexArr== u8_INTIAL_VAL)
    22b6:	89 81       	ldd	r24, Y+1	; 0x01
    22b8:	88 23       	and	r24, r24
    22ba:	b1 f4       	brne	.+44     	; 0x22e8 <u8_enterCheckPageVal+0xb8>
			{
				(*pu16_enteredPageNum) = (uint16_t)(pu8_pageNumStr[u8_indexArr] - '0');
    22bc:	89 81       	ldd	r24, Y+1	; 0x01
    22be:	28 2f       	mov	r18, r24
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	ce 01       	movw	r24, r28
    22c4:	03 96       	adiw	r24, 0x03	; 3
    22c6:	fc 01       	movw	r30, r24
    22c8:	e2 0f       	add	r30, r18
    22ca:	f3 1f       	adc	r31, r19
    22cc:	80 81       	ld	r24, Z
    22ce:	88 2f       	mov	r24, r24
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	c0 97       	sbiw	r24, 0x30	; 48
    22d4:	e9 85       	ldd	r30, Y+9	; 0x09
    22d6:	fa 85       	ldd	r31, Y+10	; 0x0a
    22d8:	91 83       	std	Z+1, r25	; 0x01
    22da:	80 83       	st	Z, r24
				u8_indexArr++ ;
    22dc:	89 81       	ldd	r24, Y+1	; 0x01
    22de:	8f 5f       	subi	r24, 0xFF	; 255
    22e0:	89 83       	std	Y+1, r24	; 0x01
				u8_inputPageState = u8_PAGE_VALID ;
    22e2:	82 e0       	ldi	r24, 0x02	; 2
    22e4:	8a 83       	std	Y+2, r24	; 0x02
    22e6:	34 c0       	rjmp	.+104    	; 0x2350 <u8_enterCheckPageVal+0x120>

			}
			else if(u8_indexArr<=2)
    22e8:	89 81       	ldd	r24, Y+1	; 0x01
    22ea:	83 30       	cpi	r24, 0x03	; 3
    22ec:	38 f5       	brcc	.+78     	; 0x233c <u8_enterCheckPageVal+0x10c>
			{
				(*pu16_enteredPageNum) = ((*pu16_enteredPageNum)*u8_INCREASE_PAGE_WEIGHT ) + (pu8_pageNumStr[u8_indexArr] - '0') ;
    22ee:	e9 85       	ldd	r30, Y+9	; 0x09
    22f0:	fa 85       	ldd	r31, Y+10	; 0x0a
    22f2:	80 81       	ld	r24, Z
    22f4:	91 81       	ldd	r25, Z+1	; 0x01
    22f6:	9c 01       	movw	r18, r24
    22f8:	22 0f       	add	r18, r18
    22fa:	33 1f       	adc	r19, r19
    22fc:	c9 01       	movw	r24, r18
    22fe:	88 0f       	add	r24, r24
    2300:	99 1f       	adc	r25, r25
    2302:	88 0f       	add	r24, r24
    2304:	99 1f       	adc	r25, r25
    2306:	a9 01       	movw	r20, r18
    2308:	48 0f       	add	r20, r24
    230a:	59 1f       	adc	r21, r25
    230c:	89 81       	ldd	r24, Y+1	; 0x01
    230e:	28 2f       	mov	r18, r24
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	ce 01       	movw	r24, r28
    2314:	03 96       	adiw	r24, 0x03	; 3
    2316:	fc 01       	movw	r30, r24
    2318:	e2 0f       	add	r30, r18
    231a:	f3 1f       	adc	r31, r19
    231c:	80 81       	ld	r24, Z
    231e:	88 2f       	mov	r24, r24
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	84 0f       	add	r24, r20
    2324:	95 1f       	adc	r25, r21
    2326:	c0 97       	sbiw	r24, 0x30	; 48
    2328:	e9 85       	ldd	r30, Y+9	; 0x09
    232a:	fa 85       	ldd	r31, Y+10	; 0x0a
    232c:	91 83       	std	Z+1, r25	; 0x01
    232e:	80 83       	st	Z, r24
				u8_indexArr++ ;
    2330:	89 81       	ldd	r24, Y+1	; 0x01
    2332:	8f 5f       	subi	r24, 0xFF	; 255
    2334:	89 83       	std	Y+1, r24	; 0x01
				u8_inputPageState = u8_PAGE_VALID ;
    2336:	82 e0       	ldi	r24, 0x02	; 2
    2338:	8a 83       	std	Y+2, r24	; 0x02
    233a:	0a c0       	rjmp	.+20     	; 0x2350 <u8_enterCheckPageVal+0x120>
			}
			else
			{
				USART_u8TransStr((uint8_t*)"Invalid Page number \r") ;
    233c:	86 ec       	ldi	r24, 0xC6	; 198
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	0e 94 52 01 	call	0x2a4	; 0x2a4 <USART_u8TransStr>
    2344:	14 c0       	rjmp	.+40     	; 0x236e <u8_enterCheckPageVal+0x13e>
				break;
			}
		}
		else
		{
			USART_u8TransStr((uint8_t*)"Invalid Page number \r") ;
    2346:	86 ec       	ldi	r24, 0xC6	; 198
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <USART_u8TransStr>
    234e:	0f c0       	rjmp	.+30     	; 0x236e <u8_enterCheckPageVal+0x13e>
		u8_inputPageState = USART_u8ReceiveStr(pu8_pageNumStr,u8_PAGE_STR_SIZE,'\r') ;

	}while(u8_inputPageState != u8_USART_RECEIVED_CORRECT) ;

	// check the array taken by USART from user is digits and less than 511 (number of pages in EEPROM or not )
	while(pu8_pageNumStr[u8_indexArr]!=NULL_CHAR && u8_indexArr< (u8_PAGE_STR_SIZE))
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	28 2f       	mov	r18, r24
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	ce 01       	movw	r24, r28
    2358:	03 96       	adiw	r24, 0x03	; 3
    235a:	fc 01       	movw	r30, r24
    235c:	e2 0f       	add	r30, r18
    235e:	f3 1f       	adc	r31, r19
    2360:	80 81       	ld	r24, Z
    2362:	88 23       	and	r24, r24
    2364:	21 f0       	breq	.+8      	; 0x236e <u8_enterCheckPageVal+0x13e>
    2366:	89 81       	ldd	r24, Y+1	; 0x01
    2368:	86 30       	cpi	r24, 0x06	; 6
    236a:	08 f4       	brcc	.+2      	; 0x236e <u8_enterCheckPageVal+0x13e>
    236c:	83 cf       	rjmp	.-250    	; 0x2274 <u8_enterCheckPageVal+0x44>
			USART_u8TransStr((uint8_t*)"Invalid Page number \r") ;
			break ;
		}
	}
	// check if the value choosen more than the page number or not
	if((*pu16_enteredPageNum)>u8_MAX_PAGE_NUM)
    236e:	e9 85       	ldd	r30, Y+9	; 0x09
    2370:	fa 85       	ldd	r31, Y+10	; 0x0a
    2372:	80 81       	ld	r24, Z
    2374:	91 81       	ldd	r25, Z+1	; 0x01
    2376:	22 e0       	ldi	r18, 0x02	; 2
    2378:	80 30       	cpi	r24, 0x00	; 0
    237a:	92 07       	cpc	r25, r18
    237c:	30 f0       	brcs	.+12     	; 0x238a <u8_enterCheckPageVal+0x15a>
	{
		USART_u8TransStr((uint8_t*)"Invalid Page number \r") ;
    237e:	86 ec       	ldi	r24, 0xC6	; 198
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	0e 94 52 01 	call	0x2a4	; 0x2a4 <USART_u8TransStr>
		u8_inputPageState = u8_PAGE_INVALID ;
    2386:	83 e0       	ldi	r24, 0x03	; 3
    2388:	8a 83       	std	Y+2, r24	; 0x02
	}
	return u8_inputPageState ;
    238a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    238c:	2a 96       	adiw	r28, 0x0a	; 10
    238e:	0f b6       	in	r0, 0x3f	; 63
    2390:	f8 94       	cli
    2392:	de bf       	out	0x3e, r29	; 62
    2394:	0f be       	out	0x3f, r0	; 63
    2396:	cd bf       	out	0x3d, r28	; 61
    2398:	cf 91       	pop	r28
    239a:	df 91       	pop	r29
    239c:	08 95       	ret

0000239e <strcmp>:
    239e:	fb 01       	movw	r30, r22
    23a0:	dc 01       	movw	r26, r24
    23a2:	8d 91       	ld	r24, X+
    23a4:	01 90       	ld	r0, Z+
    23a6:	80 19       	sub	r24, r0
    23a8:	01 10       	cpse	r0, r1
    23aa:	d9 f3       	breq	.-10     	; 0x23a2 <strcmp+0x4>
    23ac:	99 0b       	sbc	r25, r25
    23ae:	08 95       	ret

000023b0 <_exit>:
    23b0:	f8 94       	cli

000023b2 <__stop_program>:
    23b2:	ff cf       	rjmp	.-2      	; 0x23b2 <__stop_program>
